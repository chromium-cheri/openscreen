{
  "comments": [
    {
      "key": {
        "uuid": "219b6182_82524979",
        "filename": "docs/trace_logging.md",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "This sentence seems to be cut off",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b1eb91e_4a133114",
        "filename": "docs/trace_logging.md",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Good catch",
      "parentUuid": "219b6182_82524979",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2fd53818_84f4c692",
        "filename": "docs/trace_logging.md",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Would it be correct to say this is the default implementation?  Or does the embedder have to specifically compile it in if they don\u0027t want to provide their own implementation?\n\nDocumenting when this implementation is used and how to override it would be would be good.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dc722ab_86ee64f2",
        "filename": "docs/trace_logging.md",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Good point. Updating text to state this is the default implementation",
      "parentUuid": "2fd53818_84f4c692",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "651f1640_94325534",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 5
      },
      "lineNbr": 384,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Is the conversion from while(true) just so we could include a counter with the trace? Is there an advantage to just keeping a separate counter variable for this?  Minor style issue as there are never going to be 1 \u003c\u003c 60 loops executed.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56942914_9a8c0ece",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 5
      },
      "lineNbr": 384,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "I\u0027d originally started with 1\u003c\u003c60 to ensure that the counts were different for both loops. Though I\u0027ve switched now to do even and odd for them, since that wasn\u0027t clear.\n\nAlso, updated to use a separate counter for clearer code\n\nThe reason for keeping this counter at all is to manually set the TraceId\n\nNote that this will likely be removed soon - once this change and my Networking changes are both in, I plan to add TraceLogs throughout the modified Demo code",
      "parentUuid": "651f1640_94325534",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bac0762_15c563a1",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 5
      },
      "lineNbr": 384,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "Ok, please add comments near the +2 increments explaining that this is to generate unique trace IDs.",
      "parentUuid": "56942914_9a8c0ece",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cc62ceb_d053d0a9",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Similar comment",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ad00b6a_9c0e9fe6",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Updated similarly.",
      "parentUuid": "2cc62ceb_d053d0a9",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "913bee61_250f4666",
        "filename": "osp/impl/presentation/presentation_connection.cc",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "str() returns a copy, so the ctor is not necessary here.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c342c3dd_bf4c44a6",
        "filename": "osp/impl/presentation/presentation_connection.cc",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "913bee61_250f4666",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4405b40d_ef5bf49c",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "s/Macro/macro/g\n\nI\u0027d prefer to not capitalize things that are just jargon and not proper names or class/type names.\n\nIf you\u0027re not sure search the Chromium code base to see what existing comments do.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "367ef6f3_ddba5fbd",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Updated\n\nI\u0027ll do my best to pay better attention to this going forward",
      "parentUuid": "4405b40d_ef5bf49c",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3e9b38a_4dce38ed",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Since this class is the root of an inheritance chain, it should have a virtual destructor (even if it\u0027s a default) and its subclasses should declare theirs as an override.  Otherwise a pointer to the base type won\u0027t use the vtable when its dtor is called and bad things will happen.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74b0cee1_b875046c",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Good to know - thank you for the explanation",
      "parentUuid": "a3e9b38a_4dce38ed",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ba5a111_086e9c1d",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Traces the end of an asynchronous call.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f2869d_9185481a",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ba5a111_086e9c1d",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64bf4ad7_53b3c16d",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "\"only support one TraceLoggingPlatform\" (is what you meant?)",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cceb28b1_3dbcff2d",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Updated!",
      "parentUuid": "64bf4ad7_53b3c16d",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4910641_e7855c6f",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Class variables (including statics) need a trailing underscore\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names\n\nAlso this needs to be initialized to nullptr",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06d26fe0_dea08bc6",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Updated name, and similar throughout the file. Somehow I\u0027d missed that this was also true for static variables.\n\nThe variable is initialized by the embedder, through the TRACE_SET_DEFAULT_PLATFORM(...) macro exposed in trace_logging_platform.h",
      "parentUuid": "f4910641_e7855c6f",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fe55ffe_81fff5f9",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06d26fe0_dea08bc6",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "570599b1_fc940266",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Is there a distinction that needs to be made between TraceBase and ScopedTraceOperation?  It looks like STO is the only class that uses TraceBase.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca1f8959_28d0b0a6",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "The main reason for the distinction is that we need to create TraceBase objects as part of macros when Tracing is disabled, and having TraceBase be an empty object provides the best perf.",
      "parentUuid": "570599b1_fc940266",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be577d37_4c930af1",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca1f8959_28d0b0a6",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56d8a501_5be2af28",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "needs override",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db5f0da4_16cc911a",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56d8a501_5be2af28",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a2e2199_64b073b3",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "The convention is that ctors are declared first, followed by dtors, then assignment operators.\n\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order\n\nI\u0027ve usually seen this followed, even for delete\u0027d operators.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a11a68ab_a6e2e94c",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Switched all of these out for OSP_DISALLOW_COPY_AND_ASSIGN(...) instead, since that seems clearer\n\nI placed this at the end of the private section since this is the convention I\u0027ve seen used throughout our other files. If this is an issue let me know and I can move it",
      "parentUuid": "5a2e2199_64b073b3",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1636b7b_c3f217d6",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "Looks good to me!",
      "parentUuid": "a11a68ab_a6e2e94c",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc54e1fa_0ecb942b",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Usually I\u0027ve seen \"LIFO\" but the stack comment makes this clear enough :-)",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7f8b3ba_650b962f",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Updated to `LIFO`",
      "parentUuid": "fc54e1fa_0ecb942b",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6a25ce8_87d11de1",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "I assume you\u0027re pushing and popping off the back?\n\nDid you consider a std::deque, which is always constant time, but has more pointer overhead?\n\nstd::vector always grows.  Is there a cap on the stack depth? Do you call shrink_to_fit() at any point?",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97bc83c5_da2ae59f",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Based on what I have read online, the perf of vector is better than dequeue when only inserting/deleting at the end. There is some test measurements documented here to support that: https://www.codeproject.com/Articles/1185449/Performance-of-a-Circular-Buffer-vs-Vector-Deque-a\n\nIt looks like a circular buffer would be fastest, but until we add that implementation to OSP, a vector is the best option we have\n\nAs far as a cap on stack depth, I don\u0027t currently have one set - If the library is being used as intended, the size of the stack should never grow beyond relatively low values:\n- When using synchronous traces, the depth of the stack should always be the same when entering and leaving any given function. Therefore, the maximum depth of the stack should be the maximum call stack in C++, which is bounded.\n- If using asynchronous traces, we expect all starts to be matched with an end. If this is the case, then the call stack should not exceed a bounded size\n\nFor this reason, I intentionally don\u0027t call shrink_to_fit() - since our code paths all are expected to get hit multiple times, I would expect the same vector entries to get re-used, so calling shrink_to_fit() would mean we need to spend time de-allocating and re-allocating that space\n\nIf I am looking at this wrong, please grab me in person to chat or ping me, since that is likely faster that going back-and-forth here",
      "parentUuid": "a6a25ce8_87d11de1",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2cd445c_aa2ff487",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "std::vector sounds like the right tradeoff here, although I though that we were going to port in a circular buffer into osp_base at some point.  Feel free to leave a NOTE summarizing your reasoning above and mentioning that a circular buffer may offer improvements in the future.\n\nRegarding shrink_to_fit, it\u0027s not a priority to optimize for this case, but I would consider adding a OSP_DCHECK that the stack doesn\u0027t exceed some size that would accommodate all normal usage (256? 1024?)  Just in case there is some recursive routine gone wild that blows it up.",
      "parentUuid": "97bc83c5_da2ae59f",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdc1456e_514fa1f7",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Usually \u0027this\u0027 is omitted in implementations of class methods.\n\nAlso, non-trivial methods should be defined out-of-line in a .cc.\n\nhttps://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/c++/c++-dos-and-donts.md#minimize-code-in-header",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b7db69b_7a45a5da",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "These are methods of a template class, so they can\u0027t be defined out-of-line\n\nI\u0027ve removed use of `this` from here, though below in SynchronousTraceLogger and AsynchronousTraceLogger destructors it is needed for compilation to succeed",
      "parentUuid": "fdc1456e_514fa1f7",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df78db87_407b8dc9",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:59:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3b7db69b_7a45a5da",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dce87e9d_7d985c6c",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Needs to override dtor",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c15557_eec5649c",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dce87e9d_7d985c6c",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68349431_5380a08b",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "initialize to nullptr",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a08ebb1_4b91bdde",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Moved initialization here instead of in the Initialize(...) method",
      "parentUuid": "68349431_5380a08b",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3833a779_2fbe44cf",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Initialize start_time and result through a normal constructor initializers?",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75a2281_f47745e4",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Updated to use initializer list.",
      "parentUuid": "3833a779_2fbe44cf",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "549de16e_e6a437f7",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "override",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd5a238a_a1ff0fe8",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "549de16e_e6a437f7",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b62a02be_30b5ec6f",
        "filename": "platform/api/time.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "What is a \"bogotick\"? :-)",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7569df39_92e7d521",
        "filename": "platform/api/time.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "@miu asked me to use this instead of milliseconds to represent the distinction between a timespan and a time as Chromium takes this approach\n\nI also have a preference for using ms, so I will start an email thread to discuss this one. For the time being I\u0027ve changed this back to ms",
      "parentUuid": "b62a02be_30b5ec6f",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea9d9cfe_b6fe1eda",
        "filename": "platform/api/time.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "I think we sorted this out, can you add a comment explaining what the microseconds symbol is?\nNot all console fonts may display unicode glyphs correctly, so check against yours to see if it looks OK.  Just \"millis\" would seem more straightforward to me.",
      "parentUuid": "7569df39_92e7d521",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b4aec37_771caff7",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "I see that all categories are disabled on non-debug builds, but did we discuss how to compile out the tracing code macros entirely?\n\nSee how we do this for e.g. OSP_DCHECK:\nhttps://chromium.googlesource.com/openscreen/+/refs/heads/master/platform/api/logging.h#119\n\nThis can be dealt with as we have a need (i.e. we aren\u0027t going to be shipping release builds for a little while), but if you decided to postpone this, then please file an issue and assign a TODO here to come back to it.",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ec76eb3_bef8e8ad",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Opened an issue and added a TODO",
      "parentUuid": "6b4aec37_771caff7",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f28c0218_34eccf23",
        "filename": "platform/api/trace_logging_platform.h",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Can this call a static method that checks that default_trace_platform was nullptr first and platform !\u003d nullptr?",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be56faf9_9ceb4c7b",
        "filename": "platform/api/trace_logging_platform.h",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Since we are here setting the initial value of default_trace_platform, we get these checks for free by the compiler\n\nThe specific failure looks like:\n../../platform/base/trace_logging_platform.cc:66:1: error: redefinition of \u0027default_trace_platform_\u0027\nTRACE_SET_DEFAULT_PLATFORM(new TextTraceLoggingPlatform);\n^\n../../platform/api/trace_logging_platform.h:18:46: note: expanded from macro \u0027TRACE_SET_DEFAULT_PLATFORM\u0027\n  TraceLoggingPlatform* internal::TraceBase::default_trace_platform_ \u003d platform;\n                                             ^\n../../platform/base/trace_logging_platform.cc:65:1: note: previous definition is here\nTRACE_SET_DEFAULT_PLATFORM(new TextTraceLoggingPlatform);\n^\n../../platform/api/trace_logging_platform.h:18:46: note: expanded from macro \u0027TRACE_SET_DEFAULT_PLATFORM\u0027\n  TraceLoggingPlatform* internal::TraceBase::default_trace_platform_ \u003d platform;",
      "parentUuid": "f28c0218_34eccf23",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "819abb7d_7511c6be",
        "filename": "platform/api/trace_logging_platform.h",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "be56faf9_9ceb4c7b",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef9fdf4e_84773540",
        "filename": "platform/api/trace_logging_types.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "enum class TraceCategory : uint64_t { ?",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db7b0b58_870e8529",
        "filename": "platform/api/trace_logging_types.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "This is actually what I had originally\n\n@miu pointed out that if we used an old-style enum inside a struct, rather than an enum class, we wouldn\u0027t need to define | and \u0026 operators for all of the bitflags and would instead get them for free. I think this approach ends up cleaner, but I can change it back if you have a strong opinion",
      "parentUuid": "ef9fdf4e_84773540",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddff427a_1b0d6621",
        "filename": "platform/api/trace_logging_types.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:59:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db7b0b58_870e8529",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fab8756_e20f0a66",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Typo in unrelated",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a94f4894_6adac0e6",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "7fab8756_e20f0a66",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "323eeb60_c893ab55",
        "filename": "platform/base/task_runner_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Nit: Prefer \u003d default",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77c400fd_c4ae0e91",
        "filename": "platform/base/task_runner_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "The compiler actually isn\u0027t letting me set this because it\u0027s not the default constructor",
      "parentUuid": "323eeb60_c893ab55",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d5d8deb_2b604041",
        "filename": "platform/base/task_runner_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T04:43:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "77c400fd_c4ae0e91",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0654206_24e7632f",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-05T23:57:38Z",
      "side": 1,
      "message": "Nit: remove extra ()",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce803c7d_1cbb5a4d",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T05:25:58Z",
      "side": 1,
      "message": "I actually didn\u0027t realize these were optional on a `new` declaration - removed.",
      "parentUuid": "f0654206_24e7632f",
      "revId": "843ed3b9d55c4e197d08d50da09c41ef10bd79f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}