{
  "comments": [
    {
      "key": {
        "uuid": "e83baebb_cf1eaa91",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-26T01:23:27Z",
      "side": 1,
      "message": "nit: OSP_DCHECK_LE",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 12
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e471d74_3c2bb093",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-26T01:23:27Z",
      "side": 1,
      "message": "Not requiring any changes but some considerations:\n\n1. Note: strcasecmp() is BSD/POSIX only. I can\u0027t recall if it\u0027s available on Windows (without strings.h).\n\n2. Alternative, but I\u0027m really not happy about going against the \"less code that does more\" mantra; so, maybe don\u0027t do this:\n\n  std::lexicographical_compare(\n      labels_[i].begin(), labels_[i].end(),\n      rhs.labels_[i].begin(), rhs.labels_[i].end(),\n      [](char a, char b) { return std::tolower(a) \u003c std::tolower(b); });\n\n3. #1 and #2 assume ASCII. Is that okay?\n\nSo, I\u0027m fine if you decide to leave it as-is, and we can deal with portability issues later (e.g., for Chrome, if we want to use Open Screen mDNS instead of using Chrome\u0027s existing impl).",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 74
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "941f7c96_a594ca07",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-26T23:01:09Z",
      "side": 1,
      "message": "This saves some code, but will require a fix to compile under windows.  You also need to include \u003cstrings.h\u003e, which will have to be guarded away on windows.\n\nMaybe better to add a wrapper function for strcasecmp in util/ with a FIXME so there\u0027s one clear place to port in the future.\n\nAlso please check that strncasecmp guarantees numeric ordering for legal DNS characters, as that\u0027s required by the mDNS spec IIRC.  The POSIX locale (LC_LOCALE and LC_COLLATE) may affect the behavior which we don\u0027t want.",
      "parentUuid": "5e471d74_3c2bb093",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 74
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "030905fb_3471eeef",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-27T21:59:12Z",
      "side": 1,
      "message": "Suggestion: Rather than rewrite a bunch of \"should be in the standard library\" utility functions, how about depending on Abseil more?\n\nFor example, EqualsIgnoreCase() is right here, works on all platforms, is strictly ASCII, and doesn\u0027t depend on any system locale settings: https://source.chromium.org/chromium/chromium/src/+/master:third_party/abseil-cpp/absl/strings/match.h;drc\u003d6eaa04678d753386f43c69a79d398da7dd675c0f;l\u003d72?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F",
      "parentUuid": "941f7c96_a594ca07",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 74
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f7a1fc0_50bd5770",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-03-02T20:03:42Z",
      "side": 1,
      "message": "absl::EqualsIgnoreCase works for me too.  When I wrote the current code, I can\u0027t recall if I didn\u0027t know about it, or if it had some potential issue.  I believe the unit tests are pretty complete and should detect any regressions from switching to absl.",
      "parentUuid": "030905fb_3471eeef",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 74
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4fc02b5_cd875fb8",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-03T19:38:08Z",
      "side": 1,
      "message": "Here are a couple answers:\n\nOn Windows we would have to call stricmp instead of strcasecmp. We can put comparison function into a header in util and pick the right name based on the platform we are building for.\n\nEqualsIgnoreCase would be a great option, but it returns bool to only indicate equality or inequality.\nInternally it\u0027s using memcasecmp (strcasecmp equivalent) that is defined in an internal abseil header.\nWe can include the internal header directly and use memcasecmp.\n\nAs for ASCII vs UTF-8, I\u0027m replacing existing functionality with an equivalent.\nIf my understanding is correct, UTF-8 is structured in a such way that top bits in the encoding of a multibyte character guarantee that comparison will be correct with this approach.\n\nI\u0027d like to know your preference on this.",
      "parentUuid": "2f7a1fc0_50bd5770",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 74
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c12d148_8762ac84",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-03-03T22:21:04Z",
      "side": 1,
      "message": "Abseil is very clear that clients are not to depend on internal headers.\n\nhttps://abseil.io/about/compatibility\n\nI went back to the spec and didn\u0027t see any mention of a need to sort domain names, only entire records.   What is this code used for (if anything)?  If any sort order will do, then your suggestion to wrap the POSIX functions seems fine.\n\nIf the behavior of mDNS depends on the sort order then simpler and less risky to just to revert and leave this code alone.",
      "parentUuid": "d4fc02b5_cd875fb8",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 74
      },
      "revId": "13f27bf5f1b16490d13bc9abc1bb899a9fbead1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}