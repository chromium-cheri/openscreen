{
  "comments": [
    {
      "key": {
        "uuid": "14e2be92_f5acbcd2",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-17T03:22:38Z",
      "side": 1,
      "message": "This plus all other destruction logic would be _dramatically_ simpler if we copied handled values instead of using pointers.  This class probably _could_ be reused for Windows so I left it, but then again if SocketHandle were just a uintptr_t and reinterpreted per platform, copying would also be platform-agnostic.",
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c62299e4_ceadb8d3",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-17T19:23:37Z",
      "side": 1,
      "message": "Why do you need to prune changed_handles? ProcessReadyHandles checks if the handle is present in handle_mappings_.",
      "range": {
        "startLine": 103,
        "startChar": 6,
        "endLine": 108,
        "endChar": 25
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74ae7a04_fec78aaa",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-17T20:56:10Z",
      "side": 1,
      "message": "+1\nPlus doing it there avoids an extra iteration through the set",
      "parentUuid": "c62299e4_ceadb8d3",
      "range": {
        "startLine": 103,
        "startChar": 6,
        "endLine": 108,
        "endChar": 25
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ceb506_f188df4a",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-18T01:58:46Z",
      "side": 1,
      "message": "If socket deletion is blocking on a deregister call, this will unblock it.  Since |changed_handles| holds pointers, the check in ProcessReadyHandles won\u0027t even be valid.  This is true even without the select() changes.  I believe the alternatives are:\n\n1. Hold handles by value, though that potentially introduces an ABA problem, although _that_ might not be detrimental since we have non-blocking sockets (false positives have very minor cost as long as it won\u0027t generate an error condition).\n2. Don\u0027t allow deletion here, only _before_ select().  That would definitely increase the amount of blocking the task runner thread does on each socket destroy.\n\nThoughts?",
      "parentUuid": "74ae7a04_fec78aaa",
      "range": {
        "startLine": 103,
        "startChar": 6,
        "endLine": 108,
        "endChar": 25
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8199914_555e95bd",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-19T19:07:55Z",
      "side": 1,
      "message": "I probably don\u0027t get something here\n\nThe pruning of changed_handles does this comparison:\n\nhandle_mappings_.find(handle) \u003d\u003d handle_mappings_.end()\n\nAnd this is exactly the same comparison as in ProcessReadyHandles:\n\nauto iterator \u003d handle_mappings_.find(handle);\nif (iterator \u003d\u003d handle_mappings_.end()) {\n  // This is OK: SocketHandle was deleted in the meantime.\n  continue;\n}",
      "parentUuid": "75ceb506_f188df4a",
      "range": {
        "startLine": 103,
        "startChar": 6,
        "endLine": 108,
        "endChar": 25
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60537205_b6c186bb",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-20T06:37:27Z",
      "side": 1,
      "message": "The scenario to consider is:\n\n1. TlsConnectionPosix is trying to destroy itself on the task runner, but needs to call DeregisterConnection, which will block in SocketHandleWaiter::OnHandleDeletion via the handle_deletion_block_ condition variable until SocketHandleWaiter removes it from handles_being_deleted_.\n2. If the SocketHandleWaiter on the network thread was in a select() during this, it will remove the above socket from handle_being_deleted_ here.\n3. As soon as it releases the lock, the task runner thread is free to continue deleting the TlsConnectionPosix.\n4. The network thread (here) enters ProcessReadyHandles and checks handle_mappings_ with a now-invalid reference from changed_handles.\n\nLike I said, this is not so much an issue with using select() more, because the accept-only sockets still followed this path.  AFAICT it just wasn\u0027t caught until now because no one ever calls DeregisterAcceptObserver except tests, which are single-threaded and disable the locking.",
      "parentUuid": "b8199914_555e95bd",
      "range": {
        "startLine": 103,
        "startChar": 6,
        "endLine": 108,
        "endChar": 25
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18ef4b9a_f023a464",
        "filename": "platform/impl/socket_handle_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-20T17:25:35Z",
      "side": 1,
      "message": "Good catch! I\u0027m surprised this didn\u0027t get hit since this code is being used in the demos + E2E tests\n\nIt looks like this approach requires an extra iteration through socket_handles_. Can we either remove the find call in ProcessReadyHandles or remove this call and change line 72 to check by pointer equality with\n\n\u003e auto iterator \u003d std::find_if(handle_mappings_.begin(), handle_mappings_.end(), [ptr \u003d \u0026handle](const auto\u0026 h) { return \u0026h \u003d\u003d ptr; });",
      "parentUuid": "60537205_b6c186bb",
      "range": {
        "startLine": 103,
        "startChar": 6,
        "endLine": 108,
        "endChar": 25
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55993cf7_0a67be54",
        "filename": "platform/impl/socket_handle_waiter_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-17T03:22:38Z",
      "side": 1,
      "message": "I will also plumb this through if this CL gets traction.",
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9b83e8a_cde2fe38",
        "filename": "platform/impl/stream_socket_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-17T19:23:37Z",
      "side": 1,
      "message": "This had me puzzled for a bit. Can we have two distinct constructors for SocketAddressPosix: one that accepts sockaddr and another that accepts sockaddr_in6? Or is it going to be too messy at each call site?",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 72
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d154678c_ec982296",
        "filename": "platform/impl/stream_socket_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-18T01:58:46Z",
      "side": 1,
      "message": "IMO it\u0027s just messier because then we\u0027d have two paths to call getsockname + constructor.  SocketAddressPosix already acknowledges that these are all but a union.",
      "parentUuid": "e9b83e8a_cde2fe38",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 72
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54d440d7_d55bfb27",
        "filename": "platform/impl/stream_socket_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-19T19:07:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d154678c_ec982296",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 72
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57b2f0a8_baec17f1",
        "filename": "platform/impl/tls_connection_posix.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-17T19:23:37Z",
      "side": 1,
      "message": "Is this to allow access to socket_handle() ?",
      "range": {
        "startLine": 64,
        "startChar": 18,
        "endLine": 64,
        "endChar": 35
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58f9436a_5608a290",
        "filename": "platform/impl/tls_connection_posix.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-18T01:58:46Z",
      "side": 1,
      "message": "Either that or some intermediate step I took.  socket_handle() is also on StreamSocket though, so reverting.",
      "parentUuid": "57b2f0a8_baec17f1",
      "range": {
        "startLine": 64,
        "startChar": 18,
        "endLine": 64,
        "endChar": 35
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a71298eb_7f382892",
        "filename": "platform/impl/tls_data_router_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-17T19:23:37Z",
      "side": 1,
      "message": "Why not connections_.erase(std::remove_if()) ?",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da1e1002_cd7d4051",
        "filename": "platform/impl/tls_data_router_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-18T01:58:46Z",
      "side": 1,
      "message": "Per your comment on the previous CL, and for consistency with the StreamSocket code below, we don\u0027t want to call OnHandleDeletion if we didn\u0027t actually know about this connection.",
      "parentUuid": "a71298eb_7f382892",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f2dcde8_27bcb93a",
        "filename": "platform/impl/tls_data_router_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-17T20:56:10Z",
      "side": 1,
      "message": "This approach doesn\u0027t respect Clock::duration timeout, because these operations can take a long time. The round-robin approach previously used was to get around this issue. The SocketHandleWaiter can timeout, and then these callbacks can take an arbitrarily long time (blocking further UdpSocket reads)",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 115,
        "endChar": 3
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f15e7c8_998be9d0",
        "filename": "platform/impl/tls_data_router_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-18T01:58:46Z",
      "side": 1,
      "message": "Right, I forgot to add more timeout code to SocketHandleWaiter.  PTAL there now.",
      "parentUuid": "1f2dcde8_27bcb93a",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 115,
        "endChar": 3
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101c8875_ce4f0176",
        "filename": "platform/impl/tls_data_router_posix.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-17T19:23:37Z",
      "side": 1,
      "message": "socket?",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 37
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b07d7e1_73f8ad61",
        "filename": "platform/impl/tls_data_router_posix.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-03-18T01:58:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "101c8875_ce4f0176",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 37
      },
      "revId": "491ed35d5f24ba9829887aaf17d12154d2901cf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}