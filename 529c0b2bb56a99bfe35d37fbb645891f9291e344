{
  "comments": [
    {
      "key": {
        "uuid": "6a890f5b_c276a47e",
        "filename": "cast/common/certificate/test_helpers.cc",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "This seems generally useful and I suspect we\u0027ll end up writing it again.\n\nConsider moving this function to a new file in testing/util, for test-only utility functions.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac4668c1_f5ad992e",
        "filename": "cast/common/certificate/test_helpers.cc",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Drive-by: \nAre s and l null-terminated? \nConsider absl::StartsWith instead of defining custom comparison macros.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bd0aef9_95712f95",
        "filename": "cast/common/certificate/types.cc",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Drive-by: is there a specific reason to use the libc methods here instead of std::chrono::system_clock?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "258a3edd_380f4be7",
        "filename": "cast/common/certificate/types.cc",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Where does |time| come from?\n\nIs there some other check against obviously invalid |time| values that is made before this function is called, that will trigger an error in release builds?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f02c290_7b80e73a",
        "filename": "cast/common/certificate/types.cc",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "It appears that 64-bit time_t is not guaranteed in 32-bit Linux.  Sigh.\n\nIt would be a good idea to assert that time_t is a minimum of 32 bits.\n\nMaybe we should assert that time_t is 64 bits by default, and force developers to opt in to 32-bit time_t through a build flag with a big warning message.   Not sure.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2ef3a69_1702cb5f",
        "filename": "cast/common/certificate/types.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Can you use std::chrono::seconds here?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb283435_0b094dbf",
        "filename": "cast/common/channel/proto/cast_channel.proto",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Does this fix need to be rolled downstream?  (Presumably not, since Chrome shouldn\u0027t compile if it actually referenced this field.)",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a22883d_cd7cc872",
        "filename": "cast/receiver/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Can you add cast/common/certificate instead of whitelisting all of cast/common?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efc94e3c_2abbf44d",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.cc",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Nit: do this check at the top of the method",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2df0ffeb_5759153e",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.cc",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "We\u0027ll eventually want an error reporting and collection path, either through the trace logging framework, or a set of observer APIs.  \n\nAlthough these challenges could be coming from any on-network device, so there will likely be spam we just want to ignore.  So not the highest priority to collect metrics on.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "573341d9_e5ca00e2",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.cc",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Do you know why an UNSPECIFIED sig_alg is assumed to be PKCS1v15?  A workaround for a misbehaving client?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b4e4f29_c7b6a654",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.cc",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "SHA1 has been deprecated for a long time...",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0986421c_7ef1bd4e",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "These are device configuration problems that should definitely be logged somewhere in a future patch.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83ad8632_08b24a26",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.cc",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Can this be a std::vector\u003cconst uint8_t\u003e to avoid conversions below?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0237839_d68471af",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.h",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "In general we\u0027ve agreed to drop second-level namespaces in Open Screen code, unless there was a compelling case to avoid name conflicts or some other reason.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b65b3d13_314e7489",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Can you document these more specifically?\n\n- What certs are included in certs?\n- Which private key is the private_key for?\n- What is the format of the serialized_crl?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec253a15_3d447b3d",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "If this is a hardware private key, it is generally not accessible to user space code.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c4bbf73_b2d38c44",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Can these be const?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f14a498d_43b1c530",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Could this return a const reference?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9936d2b9_6cba3860",
        "filename": "cast/receiver/channel/device_auth_namespace_handler.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Please document lifetime assumptions for creds_provider.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f7de32b_dcaadb01",
        "filename": "cast/receiver/channel/device_auth_namespace_handler_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Are these assertions just to ensure that the contents of auth_challenge.pb are sane?\nShould they just go after you parse the file at L62?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca906493_9145e64b",
        "filename": "cast/receiver/channel/device_auth_namespace_handler_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "I\u0027m a little confused - it looks like you are just checking values from a pre-stored protocol messages?\n\nWhere do you validate the contents of challenge_reply are as expected?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b7fdf06_e2e5fcdd",
        "filename": "cast/receiver/channel/device_auth_namespace_handler_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "There are a lot of error cases that don\u0027t have test coverage.  Consider writing some tests that modify auth_challenge.pb to verify that they don\u0027t pass validation.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d638893_c248ac88",
        "filename": "cast/receiver/channel/device_auth_test_helpers.cc",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "private_key",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8a07d9f_49109c31",
        "filename": "cast/receiver/channel/device_auth_test_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "We\u0027ve adopted a pattern of keeping test support code in testing/ folders, can you do that for these files?\n\nMaybe this and the certificate test helpers could go in a cast/receiver/channel/testing folder?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6488185_17097ceb",
        "filename": "cast/receiver/channel/receiver_socket_factory.h",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-10T00:44:02Z",
      "side": 1,
      "message": "Is the same true of |socket_client|?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c321b94_9d13415e",
        "filename": "cast/sender/channel/cast_auth_util.cc",
        "patchSetId": 3
      },
      "lineNbr": 292,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Please add /* */ comments for the nullptr args.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0096c048_9dba269d",
        "filename": "cast/test/device_auth_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Is this ever nonzero?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16100b6f_77a6332b",
        "filename": "cast/test/device_auth_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Can you add a test case that verifies a CRL?",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccf5c02f_639d67a3",
        "filename": "test/data/cast/receiver/channel/device_chain.pem",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Did you generate a new set of test certs?  These are different from the ones in Chromium.",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92097a0e_de6251f6",
        "filename": "test/data/cast/receiver/channel/device_chain.pem",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-12-09T19:47:27Z",
      "side": 1,
      "message": "Nit: remove trailing whitespace throughout",
      "revId": "529c0b2bb56a99bfe35d37fbb645891f9291e344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}