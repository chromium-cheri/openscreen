{
  "comments": [
    {
      "key": {
        "uuid": "82c85aae_4731e504",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This case should just be a failure; every struct member must have an integer key now.",
      "range": {
        "startLine": 320,
        "startChar": 53,
        "endLine": 320,
        "endChar": 64
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "681f1dce_d71775e5",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "When talking with Peter, he had said that we should support both integer keys and string keys. I can change this, but let\u0027s make sure we all agree first",
      "parentUuid": "82c85aae_4731e504",
      "range": {
        "startLine": 320,
        "startChar": 53,
        "endLine": 320,
        "endChar": 64
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75a5b2cf_16d2488f",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "That\u0027s fair, then.",
      "parentUuid": "681f1dce_d71775e5",
      "range": {
        "startLine": 320,
        "startChar": 53,
        "endLine": 320,
        "endChar": 64
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0e87672_12672368",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This should be writing a uint key now, not a string.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c727588c_ea7064fb",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "I\u0027m plannnig on leaving this as a string - in the case of integer keys, it\u0027s a uint64, but for non-integer keys it\u0027s a string",
      "parentUuid": "e0e87672_12672368",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bb040eb_57e764c2",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-12T21:02:35Z",
      "side": 1,
      "message": "Even if we\u0027re keeping both strings and integer keys, the integer keys need to serialize with cbor_encode_uint.",
      "parentUuid": "c727588c_ea7064fb",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dad7a78_8818d68d",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-13T17:07:09Z",
      "side": 1,
      "message": "Ah, I completely missed that. If it needs to be special cased here, it makes sense to plumb it all the way through the code as an optional uint instead of a string too",
      "parentUuid": "6bb040eb_57e764c2",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2eac8f91_80d3386a",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This should be matching (approx., see the IETF draft for actual character set): \".*\"",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7dbc26b_1fbdf7f9",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "Since this is no longer needed (as below was changed to parseId), I am reverting this to the unimplemented state",
      "parentUuid": "2eac8f91_80d3386a",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c775b98d_3833c1f7",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "Of course, we aren\u0027t using literal text or bytes at the moment, so this won\u0027t break anything, but is there a reason for this change?",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fce3ce1_14453b91",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "It actually broke existing code when I implemented ParseText, so I removed the call from here. I also removed ParseBytes so that the same issue wasn\u0027t hit later if we wanted to add it back in",
      "parentUuid": "c775b98d_3833c1f7",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0f43ff0_a97b9f0f",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "Yes, that\u0027s probably because you implemented ParseText similar to ParseId, so an id would parse as a value, which is bad.  I\u0027d suggest reverting this when ParseText is fixed.",
      "parentUuid": "1fce3ce1_14453b91",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94e659fe_0ca29b96",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0f43ff0_a97b9f0f",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c58283b5_40c2b57e",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "ParseId",
      "range": {
        "startLine": 254,
        "startChar": 19,
        "endLine": 254,
        "endChar": 28
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d90a8d9b_350b2221",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "c58283b5_40c2b57e",
      "range": {
        "startLine": 254,
        "startChar": 19,
        "endLine": 254,
        "endChar": 28
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a92f58f4_4219f0f5",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d90a8d9b_350b2221",
      "range": {
        "startLine": 254,
        "startChar": 19,
        "endLine": 254,
        "endChar": 28
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31d677ec_dbf7aebe",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This should still be optional, or we should figure out how to rename these methods.  Currently, they\u0027re named for the line of the grammar which they implement (https://tools.ietf.org/html/draft-ietf-cbor-cddl-07#appendix-B).  This function should accept any form of |grpent|\u0027s first line.  If we want to deviate from that convention, I think we need to come up with better names.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76620ac3_f4edc051",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "I like the idea of more descriptive names. I wasn\u0027t sure what they were named for and assumed it was just the order they were called in",
      "parentUuid": "31d677ec_dbf7aebe",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900c6747_fdf53a9c",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "I\u0027ve updated the names. What do you think of the new ones:\n\nParseGroupEntry1 --\u003e PrarseGroupEntryWithNameInComment\nParseGroupEntry2 --\u003e ParseGroupEntryWithNameAsId\nParseGroupEntry3 --\u003e ParseGroupEntryWithGroupReference\nParseGroupEntry4 --\u003e ParseGroupEntryWithInlineGroupDefinition\n\nI don\u0027t think it should be in this CL, but I would like to update all of the Parse____# names similarly to make the code more readable",
      "parentUuid": "76620ac3_f4edc051",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b887f500_140bd085",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-12T21:02:35Z",
      "side": 1,
      "message": "The renames sound fine.  I still think the new 1 and 2 could just be one method.  Just change `if (!member_key) ...` to `if (member_key) member_key-\u003einternal_text` plus keep an AstNode* for whether the \"real\" key is the first one or the one found in the comment for passing to UpdateNodesForGroupEntry.  If that ends up seeming complicated, then this is fine.",
      "parentUuid": "900c6747_fdf53a9c",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a48dff0_ad78b517",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-13T17:07:09Z",
      "side": 1,
      "message": "I think keeping it as 2 separate methods help improve readability - it could be done as one like you say, but it would require enough special casing that things would start to get complex",
      "parentUuid": "b887f500_140bd085",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "177dfd5e_4e34ac4f",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "I feel like this should be the other way around: the proper key is still the number, which will be serialized, but our \"internal text\" is how we represent it in the C++ structure.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3809c8_bb2cb2b1",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "I can switch it around. I was thinking of it the other way, where the \u0027internal text\u0027 is only used internally to the serialization process (ie the number key), while the external text is the interface visible to callers",
      "parentUuid": "177dfd5e_4e34ac4f",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b74ffba0_1e85c549",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "Yeah, I guess it depends what you consider internal vs. external.  I consider internal to be the library and the wire/network to be external.  But you could also consider the \"serializer\" to be internal the the callers/library to be external.  I guess we should get other opinions before settling on either one.",
      "parentUuid": "0d3809c8_bb2cb2b1",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8da59d4d_a56dc76b",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "updated it to \u0027text\u0027 and \u0027text_from_comment\u0027 - even if other people agree to internal vs external, it may still be confusing which will detract from code readability. This is more explicit.",
      "parentUuid": "b74ffba0_1e85c549",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20af8a49_e1fd4615",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-12T21:02:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8da59d4d_a56dc76b",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1002ac08_cc45ca5a",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "emplace",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1c899a6_09e26a12",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "Will make the change, but for future reference what\u0027s the difference?",
      "parentUuid": "1002ac08_cc45ca5a",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a8a6621_028f1323",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "The simple answer is that map.insert(pair(a, b)) constructs a pair and then _copies_ or _moves_ it into the map\u0027s internal pair object.  map.emplace(a, b) directly constructs the internal pair object from the arguments (a, b).  If you\u0027re not familiar with this, I\u0027d suggest looking up \"perfect forwarding\".",
      "parentUuid": "e1c899a6_09e26a12",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afaecce1_767e0b30",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "That\u0027s really cool!Removed the reference here since struct_type.names_over_the_wire has been removed, but made similar perf improvements elsewhere in my code as possible",
      "parentUuid": "6a8a6621_028f1323",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cbadc37_4254429a",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "I think it would be easier to do something more like:\n\nstruct Member {\n  std::string name;\n  uint64_t value_over_wire;\n  CppType* type;\n};\nstd::vector\u003cMember\u003e members;\n\nEvery lookup in this map in codegen.cc is when you would have already had the appropriate value in your loop iterator, and populating it in sema.cc is also a 1:1 stepping.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f83bfd4_ed37b66f",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "I like that approach more - feels much cleaner. Will make that change",
      "parentUuid": "4cbadc37_4254429a",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bfebe48_e18f57ec",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-08T00:04:35Z",
      "side": 1,
      "message": "Updated to:\nstruct CppMember {\n  std::string public_name;\n  std::string name_over_wire;\n  CppType* type;\n};\n\n(string instead of uint64 since for non-integer-keys it is a string)",
      "parentUuid": "3f83bfd4_ed37b66f",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38f02279_b6da3c46",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-12T21:02:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8bfebe48_e18f57ec",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}