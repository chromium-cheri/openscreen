{
  "comments": [
    {
      "key": {
        "uuid": "82c85aae_4731e504",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This case should just be a failure; every struct member must have an integer key now.",
      "range": {
        "startLine": 320,
        "startChar": 53,
        "endLine": 320,
        "endChar": 64
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "681f1dce_d71775e5",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "When talking with Peter, he had said that we should support both integer keys and string keys. I can change this, but let\u0027s make sure we all agree first",
      "parentUuid": "82c85aae_4731e504",
      "range": {
        "startLine": 320,
        "startChar": 53,
        "endLine": 320,
        "endChar": 64
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75a5b2cf_16d2488f",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "That\u0027s fair, then.",
      "parentUuid": "681f1dce_d71775e5",
      "range": {
        "startLine": 320,
        "startChar": 53,
        "endLine": 320,
        "endChar": 64
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0e87672_12672368",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This should be writing a uint key now, not a string.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eac8f91_80d3386a",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This should be matching (approx., see the IETF draft for actual character set): \".*\"",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c775b98d_3833c1f7",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "Of course, we aren\u0027t using literal text or bytes at the moment, so this won\u0027t break anything, but is there a reason for this change?",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fce3ce1_14453b91",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "It actually broke existing code when I implemented ParseText, so I removed the call from here. I also removed ParseBytes so that the same issue wasn\u0027t hit later if we wanted to add it back in",
      "parentUuid": "c775b98d_3833c1f7",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0f43ff0_a97b9f0f",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "Yes, that\u0027s probably because you implemented ParseText similar to ParseId, so an id would parse as a value, which is bad.  I\u0027d suggest reverting this when ParseText is fixed.",
      "parentUuid": "1fce3ce1_14453b91",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c58283b5_40c2b57e",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "ParseId",
      "range": {
        "startLine": 254,
        "startChar": 19,
        "endLine": 254,
        "endChar": 28
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d90a8d9b_350b2221",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "c58283b5_40c2b57e",
      "range": {
        "startLine": 254,
        "startChar": 19,
        "endLine": 254,
        "endChar": 28
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31d677ec_dbf7aebe",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "This should still be optional, or we should figure out how to rename these methods.  Currently, they\u0027re named for the line of the grammar which they implement (https://tools.ietf.org/html/draft-ietf-cbor-cddl-07#appendix-B).  This function should accept any form of |grpent|\u0027s first line.  If we want to deviate from that convention, I think we need to come up with better names.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76620ac3_f4edc051",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "I like the idea of more descriptive names. I wasn\u0027t sure what they were named for and assumed it was just the order they were called in",
      "parentUuid": "31d677ec_dbf7aebe",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "177dfd5e_4e34ac4f",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "I feel like this should be the other way around: the proper key is still the number, which will be serialized, but our \"internal text\" is how we represent it in the C++ structure.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3809c8_bb2cb2b1",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "I can switch it around. I was thinking of it the other way, where the \u0027internal text\u0027 is only used internally to the serialization process (ie the number key), while the external text is the interface visible to callers",
      "parentUuid": "177dfd5e_4e34ac4f",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b74ffba0_1e85c549",
        "filename": "tools/cddl/parse.cc",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "Yeah, I guess it depends what you consider internal vs. external.  I consider internal to be the library and the wire/network to be external.  But you could also consider the \"serializer\" to be internal the the callers/library to be external.  I guess we should get other opinions before settling on either one.",
      "parentUuid": "0d3809c8_bb2cb2b1",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1002ac08_cc45ca5a",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "emplace",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1c899a6_09e26a12",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "Will make the change, but for future reference what\u0027s the difference?",
      "parentUuid": "1002ac08_cc45ca5a",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a8a6621_028f1323",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T20:40:32Z",
      "side": 1,
      "message": "The simple answer is that map.insert(pair(a, b)) constructs a pair and then _copies_ or _moves_ it into the map\u0027s internal pair object.  map.emplace(a, b) directly constructs the internal pair object from the arguments (a, b).  If you\u0027re not familiar with this, I\u0027d suggest looking up \"perfect forwarding\".",
      "parentUuid": "e1c899a6_09e26a12",
      "range": {
        "startLine": 483,
        "startChar": 52,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cbadc37_4254429a",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-06T07:05:04Z",
      "side": 1,
      "message": "I think it would be easier to do something more like:\n\nstruct Member {\n  std::string name;\n  uint64_t value_over_wire;\n  CppType* type;\n};\nstd::vector\u003cMember\u003e members;\n\nEvery lookup in this map in codegen.cc is when you would have already had the appropriate value in your loop iterator, and populating it in sema.cc is also a 1:1 stepping.",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f83bfd4_ed37b66f",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T19:50:48Z",
      "side": 1,
      "message": "I like that approach more - feels much cleaner. Will make that change",
      "parentUuid": "4cbadc37_4254429a",
      "revId": "e2f234601a13e62533399f5bdddd94109295ffde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}