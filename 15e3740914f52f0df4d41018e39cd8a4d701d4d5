{
  "comments": [
    {
      "key": {
        "uuid": "bf3fa4ff_bb603501",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T00:44:01Z",
      "side": 1,
      "message": "Needs newline between declarations.",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7757f8b_b94160d7",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T22:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf3fa4ff_bb603501",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "624b9ed6_8b463fad",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T00:44:01Z",
      "side": 1,
      "message": "I\u0027m not sure I follow the need to pass a functor here, just to mock the generation of mDNS records in the unit test.\n\nIt looks like the unit test is expecting the A records that would have been generated by the real GetDnsRecords anyway.\n\nIf you don\u0027t want to dig through multiple record types, you could use std::find_if to pull out the A records.",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d85fa9c_2797a666",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T22:32:12Z",
      "side": 1,
      "message": "This might be more of a philosophical difference than a requirement\n\nWhen testing, I prefer to limit the test to test as little code as possible while still validating that the class/method being tested works as expected\n\nBy using dependency injection here, I can ensure that even if the code in GetDnsRecords(...) has a bug (ie we refactor it and it breaks), then these tests won\u0027t break. That way, debugging changes can be a lot easier and we won\u0027t see false-negatives, where it looks like a change breaks PublisherImpl when it\u0027s actually just a downstream dependency.\nOr, a worse issue I have hit in the past, is that the downstream dependency (GetDnsRecords(...) here) has a bug that returns unexpected values, which accidentally hit the expected return values for the test, so tests that should fail actually pass",
      "parentUuid": "624b9ed6_8b463fad",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8e841aa_4e38ea18",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-08T23:51:31Z",
      "side": 1,
      "message": "I don\u0027t think of dependency injection as a way to insulate tests from bugs in dependencies, but rather a way to simplify the writing of tests so you can more easily generate specific behaviors that would be too hard to set up otherwise (by allowing the test to inject fakes/mocks).\n\nIt also can reduce nondeterminism and improve test speed especially when the dependency requires expensive system resources (memory/CPU/graphics/processes/servers).  That\u0027s not the case here as GetDnsRecords is just manipulating in-memory data structures.\n\nFor the cases you mention, I think those are arguments that GetDnsRecords needs better test coverage.\n\nTo put it another way: if I were introduce a bug in GetDnsRecords, I would expect multiple tests to break, including hopefully the tests for GetDnsRecords.\n\nI get your argument that focusing unit tests on small slices of code makes debugging test failures easier.  In big projects that\u0027s a real issue.  But practically speaking I usually don\u0027t have a problem figuring out the code path between a change I made and the test breakage.\n\nThe other thing, is that in a statically bound language like C++ dependency injection always has an impact on the API surface and the runtime performance: more types and declarations, more arguments, more vtables, and more complexity for the code maintainers.  So there\u0027s a cost/benefit tradeoff, and it looks like the test here could be written with out passing a fake to generate records.  Maybe I missed something?\n\nIn Javascript, who cares.  You can override any property at any time with zero impact on the production code.",
      "parentUuid": "8d85fa9c_2797a666",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df8bf37f_910c2852",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-13T00:28:22Z",
      "side": 1,
      "message": "That\u0027s fair. I didn\u0027t really consider the performance impact it has on c++ :) I think your arguments make sense - Especially about how extra test failures are less of a problem in smaller projects like OSP. I will change the tests to avoid dependency injection in this case",
      "parentUuid": "a8e841aa_4e38ea18",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e475e443_b601523b",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T00:44:01Z",
      "side": 1,
      "message": "\u003d 0",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae35242a_09098854",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T22:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e475e443_b601523b",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a43d52d_6f719588",
        "filename": "discovery/dnssd/impl/publisher_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T00:44:01Z",
      "side": 1,
      "message": "Prefer passing string_view by value instead of const reference.  See comments in the header:\n\nhttps://github.com/abseil/abseil-cpp/blob/master/absl/strings/string_view.h#L78",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89305665_58817505",
        "filename": "discovery/dnssd/impl/publisher_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T22:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a43d52d_6f719588",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06520c3f_462ce311",
        "filename": "discovery/dnssd/impl/publisher_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T00:44:01Z",
      "side": 1,
      "message": "Nit: Okay to return a reference here for readability.",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0443b10_0c7b2121",
        "filename": "discovery/dnssd/impl/publisher_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T22:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06520c3f_462ce311",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86d549a2_ebe43938",
        "filename": "discovery/dnssd/impl/publisher_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T00:44:01Z",
      "side": 1,
      "message": "When was aRecord2 ever registered with the mdns_service?",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e16671ec_56feef0e",
        "filename": "discovery/dnssd/impl/publisher_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T22:32:12Z",
      "side": 1,
      "message": "We didn\u0027t register it. We set it to be the return value on line 88. That way, we can ensure that DeregisterRecord is called with exactly the record we expect\n\nThis way we cut out the dependecy on how (or if) conversion_layer/GetDnsRecords() works (see comment earlier in this CL)\n\nClosing comment as duplicate of comment earlier in the CL - Depending on the discussion there, the UTs may change",
      "parentUuid": "86d549a2_ebe43938",
      "revId": "15e3740914f52f0df4d41018e39cd8a4d701d4d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}