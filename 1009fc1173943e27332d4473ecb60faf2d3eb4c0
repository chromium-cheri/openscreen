{
  "comments": [
    {
      "key": {
        "uuid": "7e57f7b5_891b69ac",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-11-02T04:28:13Z",
      "side": 1,
      "message": "Could you please rename boolean to flag (or something else) here? It\u0027s confusing because the actual type is string.",
      "range": {
        "startLine": 106,
        "startChar": 7,
        "endLine": 106,
        "endChar": 26
      },
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94995c2e_4922f646",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-05T18:22:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e57f7b5_891b69ac",
      "range": {
        "startLine": 106,
        "startChar": 7,
        "endLine": 106,
        "endChar": 26
      },
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd73b7cd_fd4f77a0",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-01T21:16:29Z",
      "side": 1,
      "message": "Please document this method.  I assume this is getting every distinct entry: both the key\u003dvalue  entries and the flag entries?\n\nThe values also don\u0027t have to contain character data.  There\u0027s a risk that the caller will assume it\u0027s valid UTF-8 or some other encoding.  What code is going to call this method?",
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a1f566e_191663fb",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-05T18:22:34Z",
      "side": 1,
      "message": "Documentation added\n\nUpdated to std::vector\u003cstd::vector\u003cuint8_t\u003e\u003e\n\nThe result of this call is being passed to TxtRecordRData::ctor (which requires a vector of string_views and internally stores the data as a vector\u003cstring\u003e). I originally went with std::vector\u003cstd::string\u003e over std::vector\u003cstd::vector\u003cuint8_t\u003e\u003e because this approach should require less processing (after adding a ctor taking std::vector\u003cstd::string\u003e\u0026, it requires parsing the vector once instead of 3 times). After thinking a bit more, I realized that for a small vector this should be minimal cost.",
      "parentUuid": "bd73b7cd_fd4f77a0",
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af3b33eb_6fda1923",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-05T20:05:33Z",
      "side": 1,
      "message": "I\u0027m still not sure this is the best API for this since the caller will have to figure out for each vector entry:\n\n1. If it\u0027s a boolean or key/value.\n2. If the latter, parsing the key and value.\n3. Validating that the key is actually ASCII.\n\nCan you explain more about the use case for this API?\n\nWould it be better to leave this method out until it can be reviewed with the calling code?",
      "parentUuid": "8a1f566e_191663fb",
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "011ca7f1_ef3a2b55",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-05T20:11:31Z",
      "side": 1,
      "message": "Ok, I understand better after looking at the TxtRecordRData code.  Would it make sense for this method to just return a TxtRecordRData directly?",
      "parentUuid": "af3b33eb_6fda1923",
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "802a939d_d2c8940a",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-05T20:22:24Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion either way about the return type - I am happy to go with whatever is your preference\n\nThe 2 reasons I lean slightly towards the current approach are related to our previous discussions about making some subset of the mDNS API public so that it can be swapped out by embedders:\n- Currently, that hasn\u0027t happened yet for mDNS Record data types, so it seems risky to use these entities in the public API of DNS-SD. Any mDNS API would need the data we return here though to publish a TXT record though.\n- It seems weird for the DNS-SD public API to rely on mDNS types - if an embedder swaps out our DNS-SD implementation for their own, they won\u0027t be using any of our mDNS code, so having this dependency would make their lives harder",
      "parentUuid": "011ca7f1_ef3a2b55",
      "revId": "1009fc1173943e27332d4473ecb60faf2d3eb4c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}