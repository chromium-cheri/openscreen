{
  "comments": [
    {
      "key": {
        "uuid": "14bbd334_dbe89d5c",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-18T00:16:28Z",
      "side": 1,
      "message": "typo: s/1044/1024/\n\nA trick I use (but is not required...just personal style):\n\n  1 \u003c\u003c 10  // 1 KB\n  1 \u003c\u003c 20  // 1 MB\n  1 \u003c\u003c 30  // 1 GB\n\n...which also means constants like, say, 42 MB can be:\n\n  42 \u003c\u003c 20  // 42 MB",
      "range": {
        "startLine": 17,
        "startChar": 31,
        "endLine": 17,
        "endChar": 35
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c36c19cf_5b6eb414",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T04:57:36Z",
      "side": 1,
      "message": "That\u0027s really convenient! Updating to suggestion",
      "parentUuid": "14bbd334_dbe89d5c",
      "range": {
        "startLine": 17,
        "startChar": 31,
        "endLine": 17,
        "endChar": 35
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac171299_c302397e",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-18T00:16:28Z",
      "side": 1,
      "message": "In a header file, we shouldn\u0027t put constants in an anonymous namespace. Suggest making them public static class members instead.\n\nAlso, it kind of feels like these are tunable configuration rather than constants that should be hard-coded.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7ff683a_91ac41f9",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T04:57:36Z",
      "side": 1,
      "message": "Size I have left as static class member constant, because the array size needs to be a constexpr value (and I don\u0027t think it\u0027s worth templating this class, unless you disagree). The other 2 have been moved to the observer\u0027s responsibility",
      "parentUuid": "ac171299_c302397e",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e962fc4d_f99ab96d",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-18T00:16:28Z",
      "side": 1,
      "message": "Per the above comment: If the \"constants\" should actually be configurable, perhaps a better observer interface would be something like:\n\n  virtual void NotifyWriteBufferFill(double fraction);  // 0.0 to 1.0 (0% to 100%)\n\nThen, the impl of Observer can decide what to do at the various fill levels.\n\nAlso, what would the implementation of OnTooMuchDataBuffered() look like? It seems that would always be the same as OnWriteBufferBlocked(). I see the class-level comments mention this should be treated as an unrecoverable error, but in stream writes, it\u0027s more typical for the sender to block/stall indefinitely until the buffer isn\u0027t full anymore. What I\u0027m getting at: Maybe this method isn\u0027t needed, if the impl of this interface can\u0027t do anything actionable.",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 54,
        "endChar": 45
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ab5f4a_5abb3771",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T04:57:36Z",
      "side": 1,
      "message": "Updated as suggested - you\u0027re right. This is much cleaner.\n\nSee platform/impl/tls_connection for an example implementation and why we need more than just OnWriteBufferBlocked / OnWriteBufferUnblocked.",
      "parentUuid": "e962fc4d_f99ab96d",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 54,
        "endChar": 45
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6468263_f71c6d6e",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-18T00:16:28Z",
      "side": 1,
      "message": "It feels like this should return an error if the entire buffer isn\u0027t written. Maybe return the number of bytes actually pushed into the queue (could be anywhere from 0 to len)?",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 63,
        "endChar": 6
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cdf4942_66d356a9",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T04:57:36Z",
      "side": 1,
      "message": "Updated as suggested",
      "parentUuid": "a6468263_f71c6d6e",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 63,
        "endChar": 6
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da3a3bd9_b576cf4b",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-18T00:16:28Z",
      "side": 1,
      "message": "Side note, following-up on our discussion yesterday: It just occurred to me that you may still want to use a mutex. The reason is that the other thread will need to poll constantly unless the data flow rate is very steady/predictable and known ahead of time, which is wasteful of CPU. You can still use mostly the same FIFO design, but just use a mutex (instead of atomically fetching the head/tail pointers) and then also use a condition variable so that Write() can signal the consumer thread when the latter is blocking (waiting for more data).",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 67,
        "endChar": 48
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9812fb9_fc027d1c",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T04:57:36Z",
      "side": 1,
      "message": "That\u0027s really clever! I\u0027ll keep that in mind during the follow-up CL when I write the impl",
      "parentUuid": "da3a3bd9_b576cf4b",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 67,
        "endChar": 48
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2da5694_9f3404e5",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T19:30:42Z",
      "side": 1,
      "message": "After thinking a bit more, I suspect that polling for write data will occur in the same loop as calling NetworkWaiter\u0027s Wait method and checking for TcpSocket readable data (so that we can get away with only one Networking thread instead of multiple), so we can\u0027t block on any one waiting on data. I will add a TODO when implementing it so we don\u0027t forget about this idea though, in case we don\u0027t end up using the same thread\n\nIf this seems like the wrong approach though, now is a great time to tell me - before I try to integrate the 3 above calls together",
      "parentUuid": "f9812fb9_fc027d1c",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 67,
        "endChar": 48
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddc4b573_ed993842",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-18T00:16:28Z",
      "side": 1,
      "message": "Observer* const observer_;\n          ^^^^^",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 86,
        "endChar": 21
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad994ed_5ba642bb",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-18T04:57:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ddc4b573_ed993842",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 86,
        "endChar": 21
      },
      "revId": "2844c8a05b8238f8230daa84ba6667e88d25315d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}