{
  "comments": [
    {
      "key": {
        "uuid": "d1ab96a2_dc5750ff",
        "filename": "discovery/dnssd/impl/publisher_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-30T19:11:01Z",
      "side": 1,
      "message": "Does OnDomainFound not need to be ran on the task runner? Or is it just implicit? Looks like it\u0027s a private method that implements an interface?",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64d21284_c945c8bc",
        "filename": "discovery/dnssd/impl/querier_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "ISTM that we are consistently constructing a FakeClock with a FakeTaskRunner.\n\nWould it be better to have the a FakeTaskRunner ctor that constructs its own FakeClock, for tests that don\u0027t need the FakeClock themselves?",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0baa7ab1_ea966c1b",
        "filename": "discovery/dnssd/impl/querier_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-31T00:32:10Z",
      "side": 1,
      "message": "I like that approach! Will plan to do this as a follow-up CL though - there are a bunch of other places in our code where the same approach would apply, and I\u0027d like to make that same change there too",
      "parentUuid": "64d21284_c945c8bc",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe87f894_c9476a54",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "A wrapper around DNS-SD for publishing DNS-SD service instances through mDNS.  DNS-SD records are generated by calling ServiceConverter\u003cT\u003e, where",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aba65c77_e2581840",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-30T19:11:01Z",
      "side": 1,
      "message": "This pattern is super common/boilerplatey, but since c++ doesn\u0027t have decorators I\u0027m not sure how we could improve it. I\u0027m happy with how it is.",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f36ebead_bdcb4e45",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "Is it possible to have TaskRunner::RunOrPostTask(Functor)?",
      "parentUuid": "aba65c77_e2581840",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9d5ed40_ef9cc385",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "record is held by const ref.  That means that it will be handled by both the calling thread and the task runner thread.\n\nSafer to pass by copy.",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b78bc0a9_dec10eed",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-31T00:32:10Z",
      "side": 1,
      "message": "I might be misunderstanding - The current syntax is for capture by copy:\nhttps://en.cppreference.com/w/cpp/language/lambda#Lambda_capture\n\nThough after thinking a bit more, how do you feel about updating the Register method signature to pass by move? Then we would have:\n\n  void Register(T record) {\n    if (!task_runner_-\u003eIsRunningOnTaskRunner()) {\n      task_runner_-\u003ePostTask([this, r \u003d std::move(record)]() { Register(std::move(r)); });\n      return;\n    }\n\n    // TODO(rwkeane): Report errors through the reporting API.\n    publisher_-\u003eRegister(conversion_(record));\n  }\n\nThough I\u0027m not quite sure how std::move() syntax interacts with crossing thread boundaries and whether it actually save us an extra copy. WDYT?",
      "parentUuid": "b9d5ed40_ef9cc385",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87895160_4b391ac6",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57ba14e5_ffce8918",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-31T00:32:10Z",
      "side": 1,
      "message": "Closing as duplicate with above",
      "parentUuid": "87895160_4b391ac6",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "550d377a_8e53f57f",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "nit: converter_",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45d4b875_13ff7463",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "All of these APIs should be updated to be asynchronous, i.e. results passed through a callback argument or client API.  Right now there\u0027s no way for the async invocation to return any result.",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98358123_4aa7a854",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-31T00:32:10Z",
      "side": 1,
      "message": "The reason I didn\u0027t see a need to update these methods to be async is because, once the call is bounced to the Task Runner, the only possible return result is Error::None() - so the caller isn\u0027t actually losing any information\n\nIn the event an error is needed in future, this can be provided via the reporting API introduced here: \nhttps://chromium-review.googlesource.com/c/openscreen/+/2028449\n(This approach already has a couple TODOs marked in the DnsSdServicePublisher class. I had planned to do this as a follow-up CL, because this introduces a new callback in the ReportingClient class, which might need further discussion)\n\nWDYT?",
      "parentUuid": "45d4b875_13ff7463",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e710d7ea_f1dc013d",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 4
      },
      "lineNbr": 130,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-30T23:08:21Z",
      "side": 1,
      "message": "I believe we discussed this; a cleaner design is to have |this| hold a copy of records, then it can respond to the getter with a synchronous result.\n\nThe trick is to update records_ without introducing a data race, which requires a mutex or pointer swap.",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "506d34d8_6c6f62c9",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-30T19:11:01Z",
      "side": 1,
      "message": "?? we don\u0027t use ref here?",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66bc756d_e027174e",
        "filename": "platform/test/fake_task_runner.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-30T19:11:01Z",
      "side": 1,
      "message": "const method?",
      "revId": "02855a98d6cb4c34dc8435dce38a55746fecde50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}