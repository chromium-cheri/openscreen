{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ca9cfbf_40d517f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-05-25T08:52:55Z",
      "side": 1,
      "message": "PTAL, thanks.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64a2990a_3e9282ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "Overall this looks great!  A couple of minor things to take a look at.  Some of the things I noted are just cobwebs and cleanups that I haven\u0027t gotten around to and aren\u0027t necessary to fix in this patch.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4026de9d_a684f99c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks for the review comments. PTAL.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "010d58ab_96364741",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-06-05T21:32:50Z",
      "side": 1,
      "message": "Thanks, one comment to address before landing.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d8c4217_9b85a848",
        "filename": "osp/impl/dns_sd_service_listener_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "Can this be passed by reference as it should never be nullptr?",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e7144c0_664ed1cb",
        "filename": "osp/impl/dns_sd_service_listener_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks, I think this can be passed by reference. The question is that pointer is used in all places (DnsSdPublisherClient, ServiceInstance, QuerierImpl, PublisherImpl, etc.). Do we need to change all of them? If so, I think chage this in another CL is better. What do you think?",
      "parentUuid": "1d8c4217_9b85a848",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c915ddac_8af2ff38",
        "filename": "osp/impl/dns_sd_service_listener_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-06-05T21:32:50Z",
      "side": 1,
      "message": "Agreed, better to do a pass through the code and change multiple places at once.  I added a note to https://issuetracker.google.com/281739775 which collects other TODO()\u0027s in the code.",
      "parentUuid": "7e7144c0_664ed1cb",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c16c6342_4f6e6792",
        "filename": "osp/impl/dns_sd_service_listener_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-06T01:25:20Z",
      "side": 1,
      "message": "Thanks, I will change this in another CL.",
      "parentUuid": "c915ddac_8af2ff38",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8499d07b_e9a30f5c",
        "filename": "osp/impl/dns_sd_service_listener_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-07T02:32:03Z",
      "side": 1,
      "message": "Hi, I am trying to make this change and have a question now. Is it necessary to change the pointer to reference in all the library? In other words, do we need to change the pointer to reference in Platform API? As a result, we also need to change in cast, osp and discovery.",
      "parentUuid": "c16c6342_4f6e6792",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ca5c85_3833e89a",
        "filename": "osp/impl/dns_sd_service_listener_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-06-07T19:19:57Z",
      "side": 1,
      "message": "You are welcome to try to do that but it would be a lot of work and a big patch ðŸ˜Š\n\nDoing a bulk find-and-replace of TaskRunner* with TaskRunner\u0026 in osp/ would be a good start (and fixing up calls to e.g. PostTask).\n\nChanging the signatures in the platform API would be more involved since that has multiple implementations - both here and in Chromium.",
      "parentUuid": "8499d07b_e9a30f5c",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a02520f2_62ae6f54",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "I believe it is possible for an endpoint to have both V4 and V6 addresses.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32fa6c94_810f81f6",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks, I made this accoding to ReceiverInfo in Cast: https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/openscreen/src/cast/common/public/receiver_info.cc;l\u003d117\n\nIs there any difference between these two?",
      "parentUuid": "a02520f2_62ae6f54",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "877ee076_47b92a10",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-06-05T21:32:50Z",
      "side": 1,
      "message": "The Cast receiver info is for discovery of Chromecast devices, right now V4 endpoints are preferred if they are available.\n\nAccording to the spec, it\u0027s only required to know the V4 or V6 address of an endpoint (not both).  But knowing both would allow the endpoint more flexibility to choose how to connect.\n\nSo I would lean towards populating both the V4 and V6 addresses for OSP.",
      "parentUuid": "32fa6c94_810f81f6",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f2c9901_e3defb85",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-06T01:25:20Z",
      "side": 1,
      "message": "Thanks for explaining. PTAL.",
      "parentUuid": "877ee076_47b92a10",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41af0724_5748e5ce",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "I think it would be cleaner for this API to use move semantics instead of passing references.  I can clean this up later.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "038234dc_ec43fe17",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "41af0724_5748e5ce",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34423d4e_b1af4f8c",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "I\u0027ve been meaning to get rid of this and replace it with something simpler.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f0ff6fe_d68a1c52",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "34423d4e_b1af4f8c",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e74f0bdc_6a975c74",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "Yeah, this is the long term goal, however, needs to wrap the returned service object and keep track of who is still using it.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15c1c8a1_13486a20",
        "filename": "osp/impl/dns_sd_watcher_client.cc",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "e74f0bdc_6a975c74",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c3ae8e8_32eeec09",
        "filename": "osp/impl/dns_sd_watcher_client.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "pass by reference",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74c97c6e_e2711fbe",
        "filename": "osp/impl/dns_sd_watcher_client.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-06-05T21:32:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "8c3ae8e8_32eeec09",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e55c504_b55d3eb8",
        "filename": "osp/public/service_listener.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-05-31T23:37:41Z",
      "side": 1,
      "message": "I think the main design question for this was whether we could have the publisher and listener require the same configuration object, so that if an agent wanted to play both roles it could use the same socket / DNS-SD implementation underneath.  But I think this design can be improved later if we want.",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "144e4e58_bd304474",
        "filename": "osp/public/service_listener.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2023-06-05T05:10:28Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "0e55c504_b55d3eb8",
      "revId": "0aa14f106b870142e41954c9901cc81912126f2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}