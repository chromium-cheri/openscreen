{
  "comments": [
    {
      "key": {
        "uuid": "812f2a62_cccda3b6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "nit: associated",
      "range": {
        "startLine": 17,
        "startChar": 59,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ad38829_5d74c317",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "812f2a62_cccda3b6",
      "range": {
        "startLine": 17,
        "startChar": 59,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d4534e7_e91c124b",
        "filename": "cast/streaming/rtp_time.h",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "Same typename comment.",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43762664_b733fe46",
        "filename": "cast/streaming/rtp_time.h",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d4534e7_e91c124b",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8474a310_681de82c",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-09T18:56:57Z",
      "side": 1,
      "message": "It\u0027s a bummer that Abseil doesn\u0027t provide saturate_cast, or std::clamp.",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af9f4714_f146bf82",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Chromium provides it, but that would involve pulling in a huge \"safe_numerics\" library.",
      "parentUuid": "8474a310_681de82c",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16960ae9_9c2095c2",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "Here and below, typename is unnecessary because std::enable_if_t is already a type (would be used for `typename std::enable_if\u003c...\u003e::type`).",
      "range": {
        "startLine": 16,
        "startChar": 10,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90477431_66e4ab60",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Done. That\u0027s probably where it came from (some earlier change long ago where we were using std::enable_if\u003c...\u003e::type). Hopefully, it wasn\u0027t a workaround for an old gcc/clang bug!",
      "parentUuid": "16960ae9_9c2095c2",
      "range": {
        "startLine": 16,
        "startChar": 10,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e5b1beb_cf0c71bb",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "not be exactly",
      "range": {
        "startLine": 104,
        "startChar": 49,
        "endLine": 104,
        "endChar": 60
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31674596_bf9ef996",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e5b1beb_cf0c71bb",
      "range": {
        "startLine": 104,
        "startChar": 49,
        "endLine": 104,
        "endChar": 60
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b8441c8_03a52a65",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "to compare",
      "range": {
        "startLine": 107,
        "startChar": 27,
        "endLine": 107,
        "endChar": 41
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5454e25_c03bdc0d",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b8441c8_03a52a65",
      "range": {
        "startLine": 107,
        "startChar": 27,
        "endLine": 107,
        "endChar": 41
      },
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e8a22b4_3ccb5add",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "ISTM this could just be `double(uint64_t(1) \u003c\u003c (digits - 1)) * 2.0`.",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eef25a40_06e71a82",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Good idea. Done.",
      "parentUuid": "5e8a22b4_3ccb5add",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "611363f8_5627104a",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "If kMaxInt \u003d\u003d kMaxIntPlusOne, From doesn\u0027t have enough precision for the max To value.  Then, nextafter() is getting the _actual_ next smallest representable value in From.  So isn\u0027t the latter condition also covered by `from \u003e\u003d kMaxInt`?  Then these can be one if: `(kMaxInt \u003c\u003d kMaxIntPlus \u0026\u0026 from \u003e\u003d kMaxInt)`, but the former is trivially true so just `from \u003e\u003d kMaxInt`.\n\nThere\u0027s a good chance I\u0027m missing a subtlety so LMK.",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad3d0d1d_5e0604fa",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "I went over this again, and you are correct. I\u0027ve simplified the code, and added a comment for future readers to understand the edge case that is being covered by the smaller amount of code.\n\nFWIW, the code I had wasn\u0027t broken, but was just more code than needed to accomplish the same results. The unit tests prove both versions are good, as the tests explicitly step through the floating-point values around the INT_MAX boundary.",
      "parentUuid": "611363f8_5627104a",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "039d4227_b9bfe40c",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-09T08:51:23Z",
      "side": 1,
      "message": "nit: return 0;",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e992f9b8_3b9996d1",
        "filename": "util/saturate_cast.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "Same thing, but okay. 😊",
      "parentUuid": "039d4227_b9bfe40c",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc821a11_485c70b3",
        "filename": "util/saturate_cast_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-09T18:56:57Z",
      "side": 1,
      "message": "Style question: may be primitive obession, but this seems similarly useful to std::pair\u003cfloat, int32_t\u003e?",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a3d143e_aed5fad8",
        "filename": "util/saturate_cast_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-09T23:01:58Z",
      "side": 1,
      "message": "In a tiny way, having the struct is better: The code on L203 makes it clear what the \"from\" and \"to\" values are. If we used std::pair, the code would be less obvious:\n\n  EXPECT_EQ(value_pair.second, saturate_cast\u003cint32_t\u003e(value_pair.first));\n\n(i.e., We\u0027d have to make the mental leap that \"first\" means \"from\" or \"input value.\")\n\nAll said, I wouldn\u0027t ding anyone for writing the code either way. ;-)",
      "parentUuid": "dc821a11_485c70b3",
      "revId": "e4384513cd3b12f276fb3dad633851ec282b0fec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}