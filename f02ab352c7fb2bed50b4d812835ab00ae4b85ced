{
  "comments": [
    {
      "key": {
        "uuid": "1c280863_c968dd05",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "I changed the name from info to get_presentation_info because @pthatcher specifically requested that. Can you check with him if we actually want to undo that feedback?\n\nSee: https://chromium-review.googlesource.com/c/openscreen/+/1412264/1/api/impl/presentation/presentation_connection.cc#21",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4ba21a7_e2a51927",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "Can this (and swap() below) go in an anonymous namespace?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0bf720f_45a8f2af",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "We own ReceiverWatch, why not just expose a swap method on that, that takes an other param?",
      "parentUuid": "d4ba21a7_e2a51927",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a13d44aa_602e7aee",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "Slightly prefer using optional for request_id_ (is 0 a valid request_id)?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2bdabd1_76c860bd",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-07T00:49:07Z",
      "side": 1,
      "message": "wouldn\u0027t this modify other, which could have unintended consequences? same comment where swap is used throughout this file",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 21
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6028b634_db3d0ab0",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-07T06:29:25Z",
      "side": 1,
      "message": "This is the copy(/move)-swap idiom.  This avoids duplication between ctor, operator\u003d, and potentially a swap method (especially for other classes using the same idiom).  The original operand is first move-constructed by \"swapping\" with an empty object above, then the result is swapped here, and finally the original LHS is destroyed because |other| is actually a local.",
      "parentUuid": "f2bdabd1_76c860bd",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 21
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8068a090_2675ace8",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "Same here, can we just put this on the ConnectRequest class?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aad416e_be424bb5",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "TODO: Replace service_id with endpoint_id",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6438a40_a2c6d4a3",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "ISTM that monitoring the list of endpoints/receivers to send availability requests could be the job of the UrlAvailabilityRequester - since it already manages the ReceiverObserver\u0027s passed through this API.",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61182481_d3e6182d",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "We should generate a UUID seeded with a secure random value.  There is code for this in Chromium I bet; I looked for the specific code to allocate media capture devices from getUserMedia, but couldn\u0027t find the code that generates a token to pass to the renderer conveying device permission.\n\nI can look some more if it\u0027s not obvious.",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c66b111_4bf34449",
        "filename": "api/impl/presentation/presentation_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "I think this will be fixed by another in-progress patch?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a8eb7ca_64aa8500",
        "filename": "api/impl/presentation/presentation_controller_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-15T23:16:28Z",
      "side": 1,
      "message": "nit: constexpr",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d7c5833_ecc3cce1",
        "filename": "api/impl/presentation/presentation_controller_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "I\u0027d vote for doing that in this patch, instead of adding yet another implementation (making it like 7 now?). Even if you just leave the other classes that implement it alone with a TODO.",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a5c3b73_af95d842",
        "filename": "api/impl/presentation/presentation_controller_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 206,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-15T23:16:28Z",
      "side": 1,
      "message": "Would it be possible to factor out some of the setup code shared between ReceiverAvailableFirstWatch and ReceiverAlreadyAvailableBeforeWatch?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "529c0892_3b256be7",
        "filename": "api/impl/presentation/presentation_controller_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-15T23:16:28Z",
      "side": 1,
      "message": "Won\u0027t OnReceiverAvailable also be called on mock_receiver_observer_, since they are both watching kTestUrl?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11a99b7c_e8edf153",
        "filename": "api/impl/presentation/presentation_controller_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-15T23:16:28Z",
      "side": 1,
      "message": "Can you add test expectations for what happens when a ReceiverWatch is canceled?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dca84d95_bb02cbbc",
        "filename": "api/impl/quic/quic_connection_factory_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-07T00:49:07Z",
      "side": 1,
      "message": "delegate ^ server_delegate_",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 98,
        "endChar": 45
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff7162f7_317aacc0",
        "filename": "api/impl/quic/quic_connection_factory_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-07T06:29:25Z",
      "side": 1,
      "message": "There\u0027s no logical XOR, but this could be (!delegate !\u003d !server_delegate_).",
      "parentUuid": "dca84d95_bb02cbbc",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 98,
        "endChar": 45
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7127a163_9c7a000c",
        "filename": "api/impl/service_listener_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "TODO: Write a simple ObserverList implementation in base/; it\u0027s worth it because we can check that the list is empty on destruction (check_empty \u003d true in Chromium\u0027s base::ObserverList).",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dedb813f_8ef2ad3c",
        "filename": "api/impl/service_listener_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-07T00:49:07Z",
      "side": 1,
      "message": "comment doesn\u0027t explain the \u0027Maybe\u0027 in method name",
      "range": {
        "startLine": 72,
        "startChar": 1,
        "endLine": 73,
        "endChar": 47
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa0f2b07_40312237",
        "filename": "api/impl/service_listener_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-07T06:29:25Z",
      "side": 1,
      "message": "The \"if\" explains the \"maybe\".  For example, the observer doesn\u0027t need to fire if the state is kStarting.",
      "parentUuid": "dedb813f_8ef2ad3c",
      "range": {
        "startLine": 72,
        "startChar": 1,
        "endLine": 73,
        "endChar": 47
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87788f21_cf555666",
        "filename": "api/impl/service_listener_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-14T21:51:47Z",
      "side": 1,
      "message": "We might just change this to always fire with the new state.  See https://crbug.com/openscreen/6.  I would be in favor of that in general.",
      "parentUuid": "aa0f2b07_40312237",
      "range": {
        "startLine": 72,
        "startChar": 1,
        "endLine": 73,
        "endChar": 47
      },
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b600f9f_ca8585bc",
        "filename": "api/public/presentation/presentation_controller.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "I mentioned this elsewhere, but why not make this a method on the class instead of a friend method? I don\u0027t understand what we gain from this.",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3feebb71_08946bf9",
        "filename": "demo/demo.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "Can you move this code to a separate helper method? It\u0027s duplicated three times here.\n\nAlso, the logic you have for checking that a character is printable is unclear, most people don\u0027t know that space and tilde represent the ends of the range. We have helpful methods that can do this for us instead, such as std::isprint or absl::ascii_isprint.\n\n\n E.g.\n\n    std::string SanitizeServiceId(absl::string_view unsafe_service_id) {\n        std::string safe_service_id(unsafe_service_id);\n\n        for (auto\u0026 c : safe_service_id) {\n            if (!std::isprint(c))\n              c \u003d \u0027.\u0027;\n        }\n\n        return safe_service_id;\n    }",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac3820b7_cd813fa5",
        "filename": "demo/demo.cc",
        "patchSetId": 2
      },
      "lineNbr": 296,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "Can you split up this method? it\u0027s pretty big.\n\nI would suggested moving lines 291-306 into a HandleEventLine method or something similar.",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "112b03d6_812595b4",
        "filename": "demo/demo.cc",
        "patchSetId": 2
      },
      "lineNbr": 395,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-03-18T21:00:17Z",
      "side": 1,
      "message": "Duplicate code to lines 296+. Can we just add a command and argument_tail struct, and a single method that takes a absl::string_view line and splits it up?",
      "revId": "f02ab352c7fb2bed50b4d812835ab00ae4b85ced",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}