{
  "comments": [
    {
      "key": {
        "uuid": "08949770_ca7b3346",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-29T19:16:59Z",
      "side": 1,
      "message": "See my idea below for TaskRunnerScope or TaskRunnerThread).  I think that\u0027s the kind of thing I\u0027d like to see here as well (NetworkReaderScope or NetworkReaderThread).",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58a7ff08_8684030f",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Thread must be set here instead of in the ctor because UTs don\u0027t want to run a new thread",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 61
      },
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da0c996b_efe3c0db",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-29T18:02:42Z",
      "side": 1,
      "message": "You could declare a private method like\n\nRunWithThread(std::thread\u0026\u0026 thread)\n\nthat calls RunUntilStopped.  But it would only be called from Create(), so I don\u0027t feel strongly about it.",
      "parentUuid": "58a7ff08_8684030f",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 61
      },
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38d3b922_bea96ef6",
        "filename": "platform/impl/network_reader.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-29T18:07:11Z",
      "side": 1,
      "message": "I\u0027m a bit puzzled as to why we need a factory method for NetworkReader. NetworkReader is not a part of platform/api, i.e. should not be created directly as it is an implementation detail of our default implementation.",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 49
      },
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52f5aab2_4bd5fc9e",
        "filename": "platform/impl/network_reader.h",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-29T18:07:11Z",
      "side": 1,
      "message": "Remove?",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 37
      },
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce9bfa0e_7c94e99a",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-29T19:16:59Z",
      "side": 1,
      "message": "I wonder if this would be too surprising to someone (that a destructor would be block indefinitely).  Could we instead have a something like a TaskRunnerScope object that owns a TaskRunner and does this when it\u0027s destroyed?  Then it\u0027s an opt-in explicit thing.",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8abebe45_079037a6",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-29T19:55:10Z",
      "side": 1,
      "message": "How is a ScopedTaskRunner different from a std::unique_ptr\u003cTaskRunnerImpl\u003e?\n\nI think it\u0027s simpler to detach the thread so it doesn\u0027t block than introduce a new object.",
      "parentUuid": "ce9bfa0e_7c94e99a",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d93a1776_d1d8c16d",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-29T21:25:40Z",
      "side": 1,
      "message": "The purpose of this CL is to have some common code somewhere that knows how to stop the TaskRunner and wait until it\u0027s done, which was duplicated twice in a different CL.\n\nstd::unique_ptr\u003cTaskRunnerImpl\u003e won\u0027t do that unless we have it in the destructor, which is what might be surprising.",
      "parentUuid": "8abebe45_079037a6",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c280f241_9ac0cca8",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-29T19:16:59Z",
      "side": 1,
      "message": "I don\u0027t understand why the Create() is on TaskRunner instead of TaskRunnerImpl.  Shouldn\u0027t the caller know that it\u0027s going to get a TaskRunnerImpl?  I\u0027d prefer if this were on the TaskRunnerScope think I mentioned earlier so you could so something like this:\n\nauto task_runner_scope \u003d TaskRunnerScope(std::make_unique\u003cTaskRunnerImpl\u003e(Clock::now));\n\n\nMaybe TaskRunnerThread would be a better name.  But I think that\u0027s the kind of thing I was looking for.",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86e10cbc_fd82566f",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-29T19:55:10Z",
      "side": 1,
      "message": "Calling code in OSP shouldn\u0027t care about the concrete type of the TaskRunner.\n\nIf we want to allow the embedder to work with different platform implementations, then it makes sense to have an abstract Create() method.\n\nBut if Chrome is always going to create a ChromeTaskRunner and standalone is always going to create a TaskRunnerImpl, then each implementation can just have its own Create() method.",
      "parentUuid": "c280f241_9ac0cca8",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "514c5879_4c9fe55e",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-29T21:25:40Z",
      "side": 1,
      "message": "I\u0027m fine with each impl having a Create method.  If we want platforms to choose instead of callers, I suppose we could have a big platform::Factory that has a CreateTaskRunner method.",
      "parentUuid": "86e10cbc_fd82566f",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8467f66c_77397d5f",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Thread must be set here instead of in the ctor because UTs don\u0027t want to run a new thread",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e893d3d6_2e79192d",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-29T19:16:59Z",
      "side": 1,
      "message": "Why does this have to be in TaskRunner?  See below on TaskRunnerScope",
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aed68dc_afcb9891",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-29T18:07:11Z",
      "side": 1,
      "message": "Remove?",
      "range": {
        "startLine": 160,
        "startChar": 2,
        "endLine": 160,
        "endChar": 34
      },
      "revId": "ba6425864a513bfd24c5e3440d2cef00565b76f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}