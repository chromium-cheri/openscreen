{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8f2b85da_92e2b3af",
        "filename": "util/flat_map.h",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-25T00:15:07Z",
      "side": 1,
      "message": "Now that\u0027s a cool trick. I\u0027m going to have to remember that one",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 41,
        "endChar": 16
      },
      "revId": "ec32bc5421573d56b8cc7443f570a4982d068a78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bf3573_15864078",
        "filename": "util/flat_map.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-25T00:15:07Z",
      "side": 1,
      "message": "Lower case `f` here for consistency with map::find: http://www.cplusplus.com/reference/map/map/find/\nSame for other similar functions here\n\nnon-standard naming is allowed when we are trying to match existing c++ functions: https://google.github.io/styleguide/cppguide.html#Exceptions_to_Naming_Rules",
      "range": {
        "startLine": 47,
        "startChar": 17,
        "endLine": 47,
        "endChar": 21
      },
      "revId": "ec32bc5421573d56b8cc7443f570a4982d068a78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74a1ea84_259de1e6",
        "filename": "util/flat_map.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-25T01:11:25Z",
      "side": 1,
      "message": "Works for me.",
      "parentUuid": "62bf3573_15864078",
      "range": {
        "startLine": 47,
        "startChar": 17,
        "endLine": 47,
        "endChar": 21
      },
      "revId": "ec32bc5421573d56b8cc7443f570a4982d068a78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}