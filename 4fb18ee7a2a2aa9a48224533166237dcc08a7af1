{
  "comments": [
    {
      "key": {
        "uuid": "d7cb4d4a_24ba304b",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Why not call it CanonicalizePacketNacks or SortAndDedupePacketNacks?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e87940b7_c12ae33e",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "I assume the +1 is to force kAllPacketsLost (0xFFFF) to wrap to 0, but that\u0027s pretty subtle.  \n\nPerhaps if we made a helper function that was really explict, like ShiftPacketIdSoAllPacketsLostIsZero.\n\nOr just do the more obvious thing:\n\nif (a.packet_id \u003d\u003d kAllPacketsLost) {\n  return true;\n} else if (b.packet_id \u003d\u003d kAllPacketsLost) {\n  return false;\n} else {\n  return a \u003c b;\n}\n\nYeah, I think I like the obvious thing.",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e4d969e_2a1f6930",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Why can\u0027t use use std::unique?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d7e3731_bc78f28a",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Seems like different error codes, or at least logging, would be helpful here",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3da1bf1b_9a49cc12",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "payload?  The field is \"payload_size\" after all, right?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63f4127e_f625e364",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "We ignore all out of order RTCP packets?  That seems like it will be a frequent occurrence and we\u0027ll be throwing away a lot of data (like PLIs!).  Are we sure we want to do this?\n\nWould it make sense to toss out of order packets only by type (only get the latest PLI, or the latest receiver report, etc)?  It seems bad that an out-of-order receiver report would cause you to miss a PLI.",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "956fb473_c62d421c",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "An empty vector will basically do nothing in ScrubMissingPacketVector, so is it really worth checking empty twice?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04957f58_b701fc52",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "I think this might be more readable as:\n\nif (ConsumeField\u003cuint32_t\u003e(\u0026in) !\u003d session_-\u003ereceiver_ssrc()) {\n  // Ignore unmatched SSRC\n  return true;\n}\nreceiver_report_ \u003d RtcpReportBlock::ParseOne(...);\nreturn true;",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f7e2d0f_57ce16ec",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "This seems like a big of a footgun.  Should we make the max_feedback_frame_id a parameter of Parse() so that you can\u0027t forget to SetMaxFeedbackFrameId and have all your feedback fail?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d421ab_c112444e",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 220,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Maybe include a comment about how we only increase the checkout montonically, and that it\u0027s greater.",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41811a9a_7f1922db",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "What is this magic \"+ 2\"?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "190e4635_f8125a6c",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Can you dedupe this code with the other place that does nearly the exact same thing?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "022e0a9a_9b411605",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Would it make this slightly more readable to have a SkipField?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed9f63cb_d7603d7d",
        "filename": "streaming/cast/compound_rtcp_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 324,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Doesn\u0027t the shortcut of the \"\u0026\u0026\" operator screw this up?  If the first SSRC matches but not the second you won\u0027t be in the right position to read what comes next.\n\nShould you add a unit test for this?\n\nAlso, it seems like it would be more readable as:\n\nauto sender_ssrc \u003d ConsumeField\u003cuint32_t\u003e(\u0026in);\nauto receiver_ssrc \u003d ConsumeField\u003cuint32_t\u003e(\u0026in);\nif (sender_ssrc !\u003d session_-\u003esender_ssrc() ||\n    reciever_ssrc !\u003d session_receveiver_ssrc()) {\n  // Ignore if SSRCs don\u0027t match\n  return true;\n}\npicture_loss_indicator_ \u003d true;\nreturn true;",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73a83423_4d75e8cc",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "What does \"Advanced\" mean?  Why not just match the comment with \"OnReceiverReferenceTimeReport\"?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de65d0f9_b9b92102",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Should this be called OnPictureLossIndicator to match the builder/writer/spec?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e551bf9d_5cb3874d",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "On the builder/writer side these are treated as separate things.  Why are they treated as one thing here?  I don\u0027t see why acking frames and update of playout delay go together.",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f4aa20f_409d7fa0",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Would it make sense to use Error?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "224fa394_bd10ffe8",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Why not packet_nacks_?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63ce6480_14ba9586",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Why do they have to be members of the class instead of variables of the Parse method that are passed into the ParseXYZ method (by ref/pointer)?  That seems cleaner, and you can tell which methods use which things.",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4270b58_c4184511",
        "filename": "streaming/cast/compound_rtcp_parser.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-10T17:36:24Z",
      "side": 1,
      "message": "Does this need to be initialized?",
      "revId": "4fb18ee7a2a2aa9a48224533166237dcc08a7af1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}