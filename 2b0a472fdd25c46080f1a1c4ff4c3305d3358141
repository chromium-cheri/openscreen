{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9594b969_8230d87f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-05T04:08:21Z",
      "side": 1,
      "message": "PTAL.\n\nI intend to use this as part of refactoring all of my other messaging classes. It should allow use to get validation with really in-depth error messaging and make it easier to control versioning. Eventually we could use this to write a Rust (or other language) sender or receiver, which would be fun!",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbc0c652_23b9043b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-11-05T18:13:39Z",
      "side": 1,
      "message": "This is cool!  Here are a few thoughts on how we could organize these going forward.\n\n- Cast control messages are organized into namespaces.\n- Only the \"webrtc\" and \"remoting\" namespaces are specific to controlling streaming.\n- The other messages belong to the \"receiver\" namespace and relate to generic device/app control.\n- A full JSON message sent from device-to-device includes routing information and namespace.  I don\u0027t feel it\u0027s necessary to validate them for every message, but they are important to their meaning.\nLet\u0027s discuss whether we want the schema validator to consider those parts of the message as well.\n\nHere\u0027s one proposal:\n\ncast/protocol/castv2/streaming/... (for remoting/webrtc messages)\n                    /receiver/...\ncast/protocol/streaming/...  (in the future, if we want to formally define the media protocol) \n",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34796332_ff86cbda",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-05T19:49:30Z",
      "side": 1,
      "message": "To be more specific, these are the entirety of the UTF8_Payload associated with the cast message, e.g.:\n\n{source_id: 154d8823-fa49-40bf-a279-d57e5d9007d8, destination_id: *, namespace: urn:x-cast:com.google.cast.media, payload_utf8: {\"requestId\":0,\"status\":[{\"currentTime\":0.0,\"disableStreamGrouping\":true,\"media\":{\"contentId\":\"\",\"contentType\":\"video/webm\",\"metadata\":{\"metadataType\":0,\"title\":\"Chrome tab casting\"},\"streamType\":\"LIVE\"},\"mediaSessionId\":0,\"playbackRate\":1.0,\"playerState\":\"PLAYING\",\"supportedMediaCommands\":0,\"volume\":{\"level\":1.0,\"muted\":false}}],\"type\":\"MEDIA_STATUS\"}}\n\nThe actual cast message is NOT JSON (it\u0027s protobuf), so the source_id, destination_id, and namespace are not valid JSON fields and shouldn\u0027t be validated here.\n\nI\u0027ll move things around.",
      "parentUuid": "fbc0c652_23b9043b",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09f04741_9c75ed55",
        "filename": "cast/streaming/control_protocol/app_examples/app_availability.json",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-11-05T18:13:39Z",
      "side": 1,
      "message": "So this is a fragment of a full message payload, which includes the senderId/receiverId/namespace.\n\n\nCould we name the file after the message type?  E.g. get_app_availability_response.json",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25f06f84_60e33227",
        "filename": "cast/streaming/control_protocol/app_examples/app_availability.json",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-05T19:49:30Z",
      "side": 1,
      "message": "Renamed.",
      "parentUuid": "09f04741_9c75ed55",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8310bae_cf5b58ee",
        "filename": "cast/streaming/control_protocol/validate_examples.sh",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-11-05T18:23:00Z",
      "side": 1,
      "message": "Is there a path to being able to run this in the buildbots?",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7632486d_71bd7351",
        "filename": "cast/streaming/control_protocol/validate_examples.sh",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-05T19:49:30Z",
      "side": 1,
      "message": "Refactored to allow buildbot download and usage.",
      "parentUuid": "f8310bae_cf5b58ee",
      "revId": "2b0a472fdd25c46080f1a1c4ff4c3305d3358141",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}