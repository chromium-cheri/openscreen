{
  "comments": [
    {
      "key": {
        "uuid": "22ad0cea_88a3fd62",
        "filename": "discovery/dnssd/impl/service_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "After some thinking I don\u0027t think this is the best API for reporting the status of the mDNS service back to the client.\n\nI think there should be a proper client API with a callback that reports the state of the service, which could be:\n\nStarting\nRunning\nError\nStopped\n\nIf the service can\u0027t bind a socket, it should to into the error state.  The error callback can pass an error code and message to be more explicit to explain why mDNS got into an error state.\n\nSeparately, a feature of the library could be automatic retries to rebind the socket(s) at a later time if the underlying network interfaces get back into a good state.   If we do that, there aren\u0027t really \"fatal\" errors, just transient failures of the platform to provide usable sockets.\n\nBut for now, the client can handle the error callback above and attempt to restart the querier/publisher.\n\nMake sense?",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "642a371e_4680e010",
        "filename": "discovery/dnssd/impl/service_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-24T01:57:00Z",
      "side": 1,
      "message": "Sorry for not being clear - I would suggest removing the fatal error callback from this patch and landing it in a separate patch once we\u0027ve agreed on the design.",
      "parentUuid": "22ad0cea_88a3fd62",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a4edbf_85f3a78c",
        "filename": "discovery/dnssd/impl/service_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "Done\n\nThat sort of reporting callback sounds much clearer to me! Would you prefer I create a follow-up CL with the design as you suggest once this one is in, or would you prefer to discuss it more first?",
      "parentUuid": "642a371e_4680e010",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3434f315_7c06d8c6",
        "filename": "discovery/dnssd/public/dns_sd_service.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "What is kInvalidNetworkInterfaceIndex?   It looks like the socket will be configured for multicast with this value by default.",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc44027e_93eb4f34",
        "filename": "discovery/dnssd/public/dns_sd_service.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-24T01:55:47Z",
      "side": 1,
      "message": "Separately - I made a comment about passing a config object into the API to allow the client/embedder to configure the service. I think this makes sense, but let\u0027s figure out first what the right default behavior is.  Reasonable default behavior would be to attempt to bind/send on all active interfaces.\n\nThen the config object becomes optional and only needs to be set if the client wants to pick specific interfaces to bind.  It could be passed through a public API in mdns/public; need to figure out how to set this object *before* sockets are bound.\n\nTL;DR: I think the network_interfaces parameter can be removed to simplify this patch and custom interface configuration handled as a separate API/feature, assuming we can get demos/tests to work with default behavior.",
      "parentUuid": "3434f315_7c06d8c6",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba640aed_7fecc6d0",
        "filename": "discovery/dnssd/public/dns_sd_service.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "Unfortunately, the demo code doesn\u0027t seem to work without the NetworkInterface. The issue I\u0027m seeing is we need to call JoinMulticastGroup() in order for demo code to work, which requires a NetworkInterface parameter. This might involve a breaking platform change to get working without the network interface if we want to support running on all network interfaces.\n\nI agree that the configuration struct would be simpler (see previous CL-level comment). \n\nThe reason kInvalidNetworkInterfaceIndex is used as the default value here is because it is the only member of the NetworkInterfaceIndex enum, and it seemed to be a reasonable \u0027unset\u0027 value to me. Once the above issue is fixed, do you think it make more sense to add a new value for unset? (Until then, I think having the default be \u0027invalid\u0027 makes more sense).\n\nI\u0027d originally left the NetworkInterface as \u0027optional\u0027 since I had thought we wouldn\u0027t want to require it eventually as you mentioned, but since it will be swapped out for the configuration struct later on, I am updating it to be non-optional.",
      "parentUuid": "dc44027e_93eb4f34",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "482b5c77_b9d14e6f",
        "filename": "discovery/mdns/mdns_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "This should probably be renamed to SendMessage.  Otherwise it\u0027s confusing to see SendMulticast call SendUnicast since those actually mean different things.",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5569f62_95f6679e",
        "filename": "discovery/mdns/mdns_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "Will plan to make this as a follow-up CL once this one is in. It will touch a lot of files outside the scope of this CL",
      "parentUuid": "482b5c77_b9d14e6f",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e762046_fac4bdd5",
        "filename": "discovery/mdns/mdns_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "If a client is both a querier and publisher, do they use the same socket?  In that case, this could get invoked.",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96eb86fe_079710d6",
        "filename": "discovery/mdns/mdns_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "The UdpSocket::Client used for these sockets is the MdnsServideImpl class, which passes calls here. Removing the UdpSocket::Client interface from this class (and mdns_receiver for same reason) to make this clearer",
      "parentUuid": "4e762046_fac4bdd5",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bdf0bfa_c7caddb5",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "It looks like the client doesn\u0027t have the ability to configure mDNS for listener-only or publisher-only.  I think that\u0027s okay for now as long as the listener doesn\u0027t do anything if there are no queries, and the publisher doesn\u0027t do anything if no services are published.\n\n\nSome clients may want to guarantee that they never publish records, we can add that as a configuation parameter in the future and avoid instantiating the publisher/probe manager.",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcc01c8c_a5dc5c17",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "SGTM - you\u0027re correct that the Publisher and Listener don\u0027t do anything if the higher layers don\u0027t call them\n\nThis sounds like a good use for the configuration struct",
      "parentUuid": "7bdf0bfa_c7caddb5",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "857be4f9_5f7b9e31",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "If the interface doesn\u0027t have a v6 local address configured, this might or might not work.",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78448773_7387fd0e",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "Done. Good point\n\nI\u0027m adding support to NetworkInterface to check if a V4 or V6 endpoint is supported. This is only a few lines of code, but LMK if you\u0027d prefer me to pull it to a separate patch",
      "parentUuid": "857be4f9_5f7b9e31",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a60bac9d_8f3568b2",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-23T21:40:41Z",
      "side": 1,
      "message": "Remove trailing newline?\n\nDo you actually know that the sockets were bound successfully?  It looks like the only way to know what happened is through the OnError callback.",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0150ef9f_754119fc",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-24T22:49:44Z",
      "side": 1,
      "message": "Done\n\nLog statement removed. The state change callback mentioned in previous comments will provide this same information in a clearer way",
      "parentUuid": "a60bac9d_8f3568b2",
      "revId": "ee99814c7faf482abf0578e42af4a25d1e8afa22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}