{
  "comments": [
    {
      "key": {
        "uuid": "6ea334b2_28fbe793",
        "filename": "api/impl/internal_services.cc",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T00:39:40Z",
      "side": 1,
      "message": "Maybe this should be connection_server_port_ since publisher_port could correspond to mDNS or QUIC.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75566d07_a1df5381",
        "filename": "api/impl/internal_services.cc",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "I decided to just remove this since it can be used if either ScreenPublisher or ProtocolConnectionServer aren\u0027t our library implementation (which would apply to e.g. a chromium port).",
      "parentUuid": "6ea334b2_28fbe793",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8811a8ef_90af09dc",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "It seems like the API should be designed to only allow proper cancellation (via a watch_id or returning a Watch object), or this should just be an early return.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38641d73_e6b9673c",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8811a8ef_90af09dc",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cad7793_02a6560a",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Is this how |QuicStream| signals that there is no more data to read?\nMaybe add a comment noting this.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dcdaa5e_db96fea6",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Under normal operation, QuicStream calls OnClose then OnReceive with empty data (analogous to the fin bit in the spec).  I\u0027m not sure yet what happens if a stream is cancelled (via RST_STREAM).  I have a TODO here for this for now.",
      "parentUuid": "4cad7793_02a6560a",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1dc106e_ef790223",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Will this be called with size\u003d0 be called exactly once per stream_id?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d774423_5d30597e",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "\u003c\u003d 1, see earlier comment.",
      "parentUuid": "c1dc106e_ef790223",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec36ff7_d166c3ed",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Since we use uint8_t* elsewhere, should we change data to be consistent and make the caller do the cast?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63f170f5_0a0c6cb7",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ec36ff7_d166c3ed",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e59154d6_41bbfda4",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Do we know the size of the incoming message?  It seems like we should reserve an appropriately sized vector at least |size| in length the first time we see data from stream_id.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b1132d3_fd2c5ac8",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "If you mean call buffer.reserve(), I think that\u0027s handled by insert.  If you mean the actual first CBOR message size, we don\u0027t know that.",
      "parentUuid": "e59154d6_41bbfda4",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5c010f6_ec2351f6",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Nit: Instead of auto, consider declaring a typedef for the map entry.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c677858f_a134171f",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d5c010f6_ec2351f6",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d379e928_690ad1ea",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Is handled the same as else if?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e7e1214_4ba7d088",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "No.  An else-if would mean there are no callbacks registered for this endpoint, !handled means that OR none of the callbacks are for the message type.",
      "parentUuid": "d379e928_690ad1ea",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd7eef02_6124a9e3",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Rather than use a \"magic\" IPEndpoint value for fallback handling, I would prefer an explicit API like SetDefaultMessageCallback().",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d66d45b5_40100f5b",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd7eef02_6124a9e3",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3da0b9a5_f0b20d8a",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Nit: Consider a typedef for message_callbacks.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec7ea53f_ca330d16",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3da0b9a5_f0b20d8a",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a606cdd_fea99882",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Whoa.  Doesn\u0027t buffer[0] need to be bounds checked before this cast can be made?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "626c1ab1_b4f27d71",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "The only way an out-of-bounds value would have an impact is if someone also registers a callback for that out-of-bounds value.",
      "parentUuid": "7a606cdd_fea99882",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3ea1dff_c3293cd9",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Consider using a typedef instead of auto here.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af8cf629_af9426a5",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b3ea1dff_c3293cd9",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0643d01_d2a96958",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Woudn\u0027t it be safer to pass |buffer| or a const_iterator to buffer here?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa261456_dba27d2e",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "I don\u0027t see how those are safer and they would make OnStreamMessage specific to std::vector.",
      "parentUuid": "c0643d01_d2a96958",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15bca283_59bc5015",
        "filename": "api/impl/message_demuxer.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T17:51:24Z",
      "side": 1,
      "message": "Fair enough, SGTM.",
      "parentUuid": "fa261456_dba27d2e",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b09fc9d_5664bafe",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Some unit test coverage would be good for this class (can be done in a separate patch).",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca5d13c5_576f21ae",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b09fc9d_5664bafe",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7a95b2_b310173a",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "I\u0027m not sure IPEndpoint is the right way to identify the source of a message.  In a future we may have ICE that allows endpoints to change IP at will.  The message source should be tied to an identifier derived from the authentication handshake.\n\nFine to leave a TODO since we don\u0027t have a handshake identifier yet, and this is primarily about future proofing.  But would like to record this as a design issue to resolve.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "967675ee_45ef553f",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "For now I changed this to an opaque ID, but there\u0027s also a TODO in the QUIC code about how to consistently identify a connection.",
      "parentUuid": "2b7a95b2_b310173a",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "695913ca_a7916b4d",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "In the future we may want to be able to parse CBOR from non-QUIC streams.  So I\u0027d like to understand what details of QUIC are necessary to support through this API.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20696a39_5187c315",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "This was being passed to make responding easier.  It\u0027s removed now.",
      "parentUuid": "695913ca_a7916b4d",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f878f29_fe31a5c6",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "The API suggests that |buffer| will always contain a complete message?  Maybe |buffer| should be |message_data|?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8afc9116_859cca53",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "It could be a partial message, which will be buffered until we build up a complete message (i.e. parsing no longer fails with an EOF error).",
      "parentUuid": "8f878f29_fe31a5c6",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7896bd92_d4d3d719",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T17:51:24Z",
      "side": 1,
      "message": "SGTM - please add a comment noting that.",
      "parentUuid": "8afc9116_859cca53",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb61af5_f9d1f443",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-05T01:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7896bd92_d4d3d719",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25412a8c_2f42fc8e",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Nit: message_size or something that describes what is being measured",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea5d3800_37e6d521",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25412a8c_2f42fc8e",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fb80ebd_eccae10f",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Why does this need to be a singleton?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19bebaf0_9a44d14d",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "No longer a singleton.",
      "parentUuid": "6fb80ebd_eccae10f",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc258f32_4b69e356",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "What happens if there is more than one call to watch the same message_type?\n\nWho owns |callback|?\n\nWhat if a message is received before there\u0027s a callback for it?  Does the class retain the message and invoke the callback later?\n\nPlease add documentation here and below.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa3f3b4_aa1533a2",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Subsequent watches will fail.  The caller must ensure |callback| outlives the watch period.  Unwatched messages will be buffered (up to a size limit) and dispatched whenever a watch is registered.",
      "parentUuid": "dc258f32_4b69e356",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a8ec3ce_d8373081",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Is it important that StopWatching() corespond to a previous call to Watch()?\n\nIf so, consider returning a watch/registration ID that can be passed into StopWatching().\n\nThe slight advantage to this, is that as we add new watch mechanisms to the API, the stop watching API remains the same.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aaa768d_73f1e472",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Added RAII class for this.",
      "parentUuid": "1a8ec3ce_d8373081",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67346a85_5ddb5a5f",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T17:51:24Z",
      "side": 1,
      "message": "Better - Thanks!",
      "parentUuid": "2aaa768d_73f1e472",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59c35e6c_781f5937",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "data_size",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3124eb5_a630caba",
        "filename": "api/impl/message_demuxer.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59c35e6c_781f5937",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "968deee8_dbd59b00",
        "filename": "api/impl/network_service_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T00:39:40Z",
      "side": 1,
      "message": "Should this be done through the ProtocolConnectionClient/Server?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e49383d_d0917777",
        "filename": "api/impl/network_service_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "968deee8_dbd59b00",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3bdf62b_691e0c05",
        "filename": "api/impl/network_service_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T00:39:40Z",
      "side": 1,
      "message": "connection_client_-\u003eRunTasks()\nconnection_server_-\u003eRunTasks()",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "299c6a3a_df098cd8",
        "filename": "api/impl/network_service_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3bdf62b_691e0c05",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "540ae7d9_4d736064",
        "filename": "api/impl/network_service_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T00:39:40Z",
      "side": 1,
      "message": "It looks like this class owns message_demuxer_, but a pointer is being stored as as singleton in the MessageDemuxer class.\n\nWhat access pattern for message_demuxer_ is required?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68197b00_51aade3a",
        "filename": "api/impl/network_service_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "This has been changed and is now owned by the embedder and not stored as a singleton.",
      "parentUuid": "540ae7d9_4d736064",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bded4e2_bb503f00",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "data_size",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9ad0bca_64d49296",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bded4e2_bb503f00",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "442b9373_58b31b3b",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Can you check that these types for stream id / connection id match those in the underlying implementation/spec?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96d6c280_c531597b",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "In the current spec, both stream IDs are effectively a uint64_t, but our snapshot of QUIC is still using the older uint32_t.\n\nConnection IDs can be up to 18 bytes long, but our snapshot of QUIC only supports uint64_t (and it looks like the same is true upstream).  That being said, it also looks like Chromium QUIC is using no connection ID on the client side (meaning there can only be one open connection) and always the QUARTC API always uses 0 on the server side.",
      "parentUuid": "442b9373_58b31b3b",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7dec96_0abc317d",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T06:22:25Z",
      "side": 1,
      "message": "We will likely wan to add APIs in the future to expose the outcome of the handshake, like the public key fingerprint.  Probably not worth trying to design now until the spec is firmer.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bde30f44_9b755626",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T06:22:25Z",
      "side": 1,
      "message": "Style nit: std::unique_ptr is already move-only, and I think it\u0027s preferred to pass-by-value rather than require an rvalue reference.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4783b358_b9267b71",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-05T01:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bde30f44_9b755626",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a6637f9_617d9812",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T06:22:25Z",
      "side": 1,
      "message": "I assume this allows the delegate implementation to construct and return a new QuickStream:Delegate to pass to an incoming stream object.\n\nCan you document this method to clarify?  Documentation for the other methods of the delegate API wouldn\u0027t hurt either.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7242033d_c19f7fb0",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-05T01:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a6637f9_617d9812",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73096507_ff705c8b",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-12-03T06:22:25Z",
      "side": 1,
      "message": "Normally data is received on a stream unless it\u0027s part of the initial handshake?  Can you add documentation to clarify when this is called?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd4faea2_ae32e714",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-05T01:39:57Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the first question.  This is called to receive a network packet, which will be parsed by the QUIC implementation.  If there\u0027s stream data in the packet, it will be sent out to QuicStream::Delegates from there.  I added a comment for this.",
      "parentUuid": "73096507_ff705c8b",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1fab030_d7e3aa68",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "What does \"Outgoing\" mean in this context?  The delegate looks like it supports read and write.    Does it just mean that this endpoint is sending the first bytes on a new stream_id?\n\nIf so, how does the caller set the stream_id for the new stream?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1611cfa1_23419b5f",
        "filename": "api/impl/quic/quic_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Incoming and Outgoing in QUIC refer to the endpoint which initiates the stream, even if it\u0027s a bidirectional stream.  Similarly, we don\u0027t set the stream ID ourselves, because these are allocated by QUIC.  QUIC uses even stream IDs for client-initiated streams and odd stream IDs for server-initiated streams.  I think this is probably to avoid both sides thinking they initiated a given stream ID (even though I think whether it leads to a conflict is up to the application layer).",
      "parentUuid": "b1fab030_d7e3aa68",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65caa0aa_608b3ad9",
        "filename": "api/impl/quic/quic_connection_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Does this need to be a static singleton?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dd06709_e77a00c3",
        "filename": "api/impl/quic/quic_connection_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Not a singleton anymore.",
      "parentUuid": "65caa0aa_608b3ad9",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b89b690_73378fc3",
        "filename": "api/impl/quic/quic_connection_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Which interface(s) are used for the socket?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8974424e_2cbef408",
        "filename": "api/impl/quic/quic_connection_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "This is now a list of endpoints, which should correctly specify the interfaces in use.",
      "parentUuid": "7b89b690_73378fc3",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8215270e_a44accce",
        "filename": "api/impl/quic/quic_connection_factory_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Can we use timestamp_t from base:: where appropriate?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2785308_f2a6e2a3",
        "filename": "api/impl/quic/quic_connection_factory_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "There is no base::timestamp_t but if you meant our platform layer timestamp_t, this isn\u0027t using that.  This is using chromium base/ types.",
      "parentUuid": "8215270e_a44accce",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f96bb50f_8537d416",
        "filename": "api/impl/quic/quic_service.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T22:36:17Z",
      "side": 1,
      "message": "Does this need to be a static singleton?",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71623d67_2085b5aa",
        "filename": "api/impl/quic/quic_service.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "No longer a singleton.",
      "parentUuid": "f96bb50f_8537d416",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "142e4784_89495e5c",
        "filename": "api/public/mdns_screen_listener_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T00:39:40Z",
      "side": 1,
      "message": "It\u0027s probably okay to expose the implementation factories in public/.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e84546ef_0865cadc",
        "filename": "api/public/mdns_screen_listener_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "This relates back to point 1 in the commit message; this avoids build dependency cycles.",
      "parentUuid": "142e4784_89495e5c",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8f3ea18_d2ee275b",
        "filename": "base/ip_address.cc",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-11-21T00:39:40Z",
      "side": 1,
      "message": "Nit: Omit braces for single-line if.",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "169647b9_159b78a0",
        "filename": "base/ip_address.cc",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-12-01T00:05:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8f3ea18_d2ee275b",
      "revId": "f0fd90ec0a60d7f22adc647f525e25cb12fef758",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}