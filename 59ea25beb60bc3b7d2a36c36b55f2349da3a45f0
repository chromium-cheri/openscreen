{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f7b45c0e_7de709c7",
        "filename": "cast/streaming/sender_session.cc",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Is this to ensure destruction order? If so, consider just reordering the member variables to ensure order. Otherwise it will reset automatically right?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f850389f_96743010",
        "filename": "cast/streaming/sender_session.cc",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "You are right, this will reset automatically. I\u0027ve restored the default destructor",
      "parentUuid": "f7b45c0e_7de709c7",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3920fecb_2f1b241e",
        "filename": "cast/streaming/sender_session.cc",
        "patchSetId": 3
      },
      "lineNbr": 315,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: style guide suggests a newline before comments.\n\nhttps://google.github.io/styleguide/cppguide.html#Vertical_Whitespace",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da9f4e30_4fa967d9",
        "filename": "cast/streaming/sender_session.cc",
        "patchSetId": 3
      },
      "lineNbr": 315,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3920fecb_2f1b241e",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02aa406f_d3572732",
        "filename": "cast/streaming/sender_session.cc",
        "patchSetId": 3
      },
      "lineNbr": 321,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Should the statistics analyzer create and own the collector, or should the session own both and then plumb the collector into the environment and the analyzer?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a1a9164_c775cf43",
        "filename": "cast/streaming/sender_session.cc",
        "patchSetId": 3
      },
      "lineNbr": 321,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "I haven\u0027t changed this yet, but I don\u0027t feel strongly one way or another",
      "parentUuid": "02aa406f_d3572732",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60056605_d23b42b2",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: put these into an anonymous namespace below, after the variable declarations.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1caa3cd8_2ca8d173",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60056605_d23b42b2",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b78d451_b8bfd5e3",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: these should be in an unnamed namespace right?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9a0307e_2ef6f72a",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b78d451_b8bfd5e3",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dc26fcb_0535dfd3",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "And these can also be constexpr.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bb97921_deb93eeb",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dc26fcb_0535dfd3",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27160d21_fad0a683",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Is this destructor body necessary for destruction order or would the default constructor be enough?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c0c8ade_0f16bb27",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Default is enough",
      "parentUuid": "27160d21_fad0a683",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c03018d2_3e8684b7",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Hyped we are finally on C++17 :).",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c601d7ab_17d878df",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "const? and media_type can be const as well right?\n\nAlso consider just deleting these and using frame_event.type and frame_event.media_type directly, the same as frame_event.size and frame_event.delay_delta.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2272e2f7_67f06029",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "These aren\u0027t used that many places, so I will just use the values directly.",
      "parentUuid": "c601d7ab_17d878df",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "174604aa_71db9af7",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: can just do a named initialization like above.\n\n    FrameStatsAggregate stats {\n        .event_counter \u003d 1,\n        .sum_size \u003d frame_event.size,\n        .sum_delay \u003d frame_event.delay_delta\n    };\n\n    frame_stats_map-\u003einsert(std::make_pair(type, std::move(stats)));\n\n\nAlso consider `std::move`ing the stats into the `frame_stats_map` like above. You\u0027ll need to delete the FrameStatsAggregate constructor and destructors however to make it moveable, or add an explicit move constructor and operator\u003d.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b29e04dc_effaef36",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "174604aa_71db9af7",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e637bd4_6b6e55af",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Same as above, not sure the local variable aliases are necessary. If you want to keep them, make them const.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57366335_0e5f00f6",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e637bd4_6b6e55af",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81b2130d_95db570a",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Designated initializer list like above?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16fd150e_5cb300e2",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81b2130d_95db570a",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6208502b_3c9562c5",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Can we just skip the packet event if it\u0027s retransmitted, instead of erasing it after?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "095ffcf3_8d9e341a",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Hmm, not sure. This is the logic from the stat_event_subscriber in Chrome.\n\nI guess the fear is that if a packet is retransmitted, it will eventually be received and trigger a \"kPacketReceived\" event. Which means that as written, the code will see an abnormally long time between transmission and receipt, which would be an outlier that would skew the network latency stat.",
      "parentUuid": "6208502b_3c9562c5",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e02a70_f56baacf",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "const?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5def744_9e6f108f",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2e02a70_f56baacf",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5232b3ac_08cc0bf7",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "const",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08874013_1e890092",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5232b3ac_08cc0bf7",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da0fe952_403fa480",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 172,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Want to create a buganizer issue for this?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0440a5fa_9f67c0a2",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "const",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04cf7482_3c9b3641",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0440a5fa_9f67c0a2",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90dc112e_5e328a53",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 198,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: newline before comment.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "694238a5_af072849",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 198,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90dc112e_5e328a53",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56985cbc_9b110a6b",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "And I\u0027ll stop mentioning it for the rest of the patch, but this can be const 😊.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8189f5dd_77144687",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "I\u0027ve gone through and fixed all of these.",
      "parentUuid": "56985cbc_9b110a6b",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66228a6f_6cdc3769",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Use an initializer list here and std::move it into the std::make_pair?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af713da8_221482f6",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66228a6f_6cdc3769",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "647a3441_24e5a60c",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Consider: instead of using a bool match, just add an `else` clause here and just `return`. Has the added bonus of getting to remove the `if (match)` clause below.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05a314b6_f87cf627",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "647a3441_24e5a60c",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c84ec880_80aedde0",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 279,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: can remove if clause, since timestamp must be \u003e\u003d Clock::time_point::min(). Making this just:\n\n\n      session_stats-\u003elast_response_received_time \u003d\n          std::max(session_stats-\u003elast_response_received_time, timestamp);",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99811a7c_9151193a",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 279,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c84ec880_80aedde0",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4acd7455_7456aab0",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 286,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "should these properties (first_event_time, last_event_time) be defaulted to Clock::time_point::max() instead? Then you could just skip this check entirely.\n\n    session_stats-\u003efirst_event_time \u003d std::min(session_stats-\u003efirst_event_time, timestamp);",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20ee1b78_375a0fe7",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 286,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "You are right, by using max / min, I can avoid using these if statements. Done",
      "parentUuid": "4acd7455_7456aab0",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0777c51b_db3b8a48",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "initializer list.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdc9c849_6d75a553",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0777c51b_db3b8a48",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce657fd8_f80ebf6f",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Can you take the stats that need the capture time start and end, which we can\u0027t get in Open Screen and wouldn\u0027t be able to unless the embedder gives us the fields, and create a new buganizer issue with them? Then remove them from here, and maybe add a comment linked to the issue.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f8cca6a_774b2c26",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce657fd8_f80ebf6f",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "947922fd_c5c01440",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Unused? Add comment and TODO or delete?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "162e6cbb_9d6ace27",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "I think the only stat that would have used this is kNumFramesCaptured. But since that needs the frame event types that are not available, I have removed this function.",
      "parentUuid": "947922fd_c5c01440",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bcdd890_219a081b",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 522,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Could duration ever be zero? If so, then there\u0027s a risk of a divide by zero on line 524.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17025991_51c47bae",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 522,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "I don\u0027t **think** so, since stats are only sent after the 500 ms alarm, but it is a good idea to guard just in case.",
      "parentUuid": "9bcdd890_219a081b",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d8bfdd_842a9ca6",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 565,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Divide by zero concern? Same as above, here and below.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9301beee_969c631b",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 565,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Doesn\u0027t this need to be multiplied by 1000? As written, the units of this are in kilobytes per millisecond right?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31cfc987_27685ebf",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 565,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "sum_size (from FrameEvent.size) is in bytes, so we have bytes * 8 / milliseconds \u003d bits / milliseconds \u003d bits / (seconds / 1000) \u003d 1000 * bits / seconds \u003d kilobits / second.\n\nAlso, I pulled this directly from stats_event_subscriber in Chrome: https://osscs.corp.google.com/chromium/chromium/src/+/main:media/cast/logging/stats_event_subscriber.cc;l\u003d696",
      "parentUuid": "9301beee_969c631b",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59e07c2f_0207c7a3",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 565,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1d8bfdd_842a9ca6",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aaa083a_6782a396",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 588,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "\\* 1000?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69f94c88_5b4c0fcc",
        "filename": "cast/streaming/statistics_analyzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 588,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "See my comment above.",
      "parentUuid": "3aaa083a_6782a396",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12bedaa6_a4a7249a",
        "filename": "cast/streaming/statistics_analyzer.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "I couldn\u0027t find anything in the style guide about this, but I am generally a huge fan of the 3/5/0 rule or \"rule of five.\"\n\nhttps://en.cppreference.com/w/cpp/language/rule_of_three\n\nBy declaring a user-defined destructor, this prevents implicit definition of the move constructor and assignment operators.\n\nSince these are plain old data (POD) structs I would suggest just deleting the constructor and destructor for all of these structs, unless the presubmit rule whines about it (and it usually doesn\u0027t until you get to ten points of complexity:\nhttps://www.chromium.org/developers/coding-style/chromium-style-checker-errors/)",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0e0b51b_13bdc9a7",
        "filename": "cast/streaming/statistics_analyzer.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "I have deleted the constructors and destructors.",
      "parentUuid": "12bedaa6_a4a7249a",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b737721b_265ee65a",
        "filename": "cast/streaming/statistics_analyzer.h",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: prefer \"using\" statements over typedefs\n\nhttps://google.github.io/styleguide/cppguide.html#Aliases",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b48547f0_baa1fcf7",
        "filename": "cast/streaming/statistics_analyzer.h",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b737721b_265ee65a",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab0fef8_cef7b8dc",
        "filename": "cast/streaming/statistics_analyzer.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "This can be a \"SenderStatsClient* const\" right? Bummer we don\u0027t have raw_ptr or raw_ref.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "625c9198_f4fdd3b2",
        "filename": "cast/streaming/statistics_analyzer.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ab0fef8_cef7b8dc",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79b8d1c2_b1b69c55",
        "filename": "cast/streaming/statistics_analyzer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Nit: ExpectStatEq?",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9c8db64_6d280d78",
        "filename": "cast/streaming/statistics_analyzer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79b8d1c2_b1b69c55",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f03546ed_f6ac9592",
        "filename": "cast/streaming/statistics_analyzer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "constexpr int kNumEvents? here and below.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "756605df_4323b5ca",
        "filename": "cast/streaming/statistics_analyzer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f03546ed_f6ac9592",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb0ce418_56e13c81",
        "filename": "cast/streaming/statistics_analyzer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-08-29T20:08:19Z",
      "side": 1,
      "message": "Consider adding a `constexpr kDefaultFrameEvent` to the anonymous namespace above to avoid some of the boilerplate here.",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8ca6346_1bf22e28",
        "filename": "cast/streaming/statistics_analyzer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1509517
      },
      "writtenOn": "2023-08-30T16:39:51Z",
      "side": 1,
      "message": "I\u0027ve added a kDefaultFrameEvent and kDefaultPacketEvent to the anonymous namespace, along with some reused variables. This did indeed avoid a bunch of boilerplate.",
      "parentUuid": "eb0ce418_56e13c81",
      "revId": "59ea25beb60bc3b7d2a36c36b55f2349da3a45f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}