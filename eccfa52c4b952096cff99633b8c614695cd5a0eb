{
  "comments": [
    {
      "key": {
        "uuid": "1fb687d1_25a847b3",
        "filename": "discovery/mdns/mdns_probe.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "The patch description made me think this had the entire implementation; but it looks like it\u0027s only the probe lifecycle logic and not the implementation of an individual probe. \n\nCan you mention that there are parts yet to be implemented in the patch description?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fabef139_8f449120",
        "filename": "discovery/mdns/mdns_probe.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fb687d1_25a847b3",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee36d17f_ad53f404",
        "filename": "discovery/mdns/mdns_probe.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "It seems like the Observer declaration belongs in the MdnsProbe API; otherwise, someone holding that object won\u0027t have any way of finding out the probe results.",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a37669_420e8ef0",
        "filename": "discovery/mdns/mdns_probe.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee36d17f_ad53f404",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae74659d_1c83b9a3",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "This is already defined as 63 here?\n\nhttps://chromium.googlesource.com/openscreen/+/refs/heads/master/discovery/mdns/public/mdns_constants.h#180",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f88d889_dd9a7c6f",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done. Thank you for catching this typo! Would have been hard to find in testing later",
      "parentUuid": "ae74659d_1c83b9a3",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad1b9f6b_5bca8217",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "Since you are basically modifying label[0] in-place, can you use a mutable reference to simplify this code?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7b42021_8be663fc",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad1b9f6b_5bca8217",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0b6c524_8e2e456c",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "Just to clarify: a probe is only completed after the name is successfully claimed?\n\nMaybe this should call IsDomainClaimed()?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9973a41d_2b3ec68d",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0b6c524_8e2e456c",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a3f4c82_6477a988",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "Nit: maybe use a different error code for this case, just in case the client cares.",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c31097a1_313fdb5f",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a3f4c82_6477a988",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83db9ad6_9f77f38a",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "This is responding to a probe sent by a different mdns publisher, right?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f51da055_5e11bcd5",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Correct, updating documentation in .h to make this clearer.",
      "parentUuid": "83db9ad6_9f77f38a",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9cc8c0f_423af4c0",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "Is this finding the minimum among the authority_records according to the comparison operator?  Would std::min_element work?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "809bdfba_7e30cac1",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9cc8c0f_423af4c0",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "898d05b4_f8d796d5",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "There are a couple of checks for an ongoing probe in this file. Suggest factoring out a boolean function for this check.",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d32d496a_2b0d96e9",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "There\u0027s actually only 1 place that FindOngoingProbe() is used where the result of the lookup isn\u0027t needed later in the function call, which is line 64. I could change all of them (or just that one) to a boolean function call, but it would result in a lot of additional lookups. WDYT?",
      "parentUuid": "898d05b4_f8d796d5",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b17f53f1_6d576af9",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "Is it possible for there to be two simulaneous probes for the same name from the same publisher?  I think the check in StartProbe will prevent it from happening, so the second probe would never get here?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36cd27c5_d6ddca2b",
        "filename": "discovery/mdns/mdns_probe_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "The edge case I found was:\n1) Start Probe for Domain\n2) Probe fails, and it retries for Domain1\n3) Probe fails, and it retires for Domain 2\n4) Probe succeeds. Domain2 is claimed.\n5) Start Probe for Domain1\n6) Probe fails. Attempts to start probe for Domain2\n\n(Or if the user tries to probe for Domain1, it fails and claims Domain2, and then they probe for Domain1 again)\n\nTrying to claim the same domain multiple times from the same publisher is definitely an edge case I don\u0027t expect to ever come up in our use case, so IMHO it didn\u0027t seem worth keeping a map of already-tried-domain-names to resulting-domain-names. But this one was easy to check for with little extra cost, so I didn\u0027t see reason not to add it\n\nAs I\u0027m thinking more about it now, there are also other similar edge cases not accounted for (such as if the device owning Domain1 goes offline before step 5). Though they also shouldn\u0027t ever occur in our use case\n\nWDYT?",
      "parentUuid": "b17f53f1_6d576af9",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca59dcea_3d3206c8",
        "filename": "discovery/mdns/mdns_probe_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "Can you add a brief comment, like:\n\n\"Owns a MdnsProbe in progress.  Created when the probe is started and deleted when the probe has completed.  Will invoke |callback| exactly once with the outcome of the probe.\"\n \n\n Is this always deleted when the probe has completed?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c4a6e7_469712a5",
        "filename": "discovery/mdns/mdns_probe_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca59dcea_3d3206c8",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67a02f1b_f544e92c",
        "filename": "discovery/mdns/mdns_probe_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "It looks like this is counting completed attempts. Maybe num_probes_completed?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "029a7c50_ccc3a896",
        "filename": "discovery/mdns/mdns_probe_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "Done. Went with num_probes_failed to be more explicit",
      "parentUuid": "67a02f1b_f544e92c",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "708147eb_9ad6c0ec",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 2
      },
      "lineNbr": 456,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-11T00:39:19Z",
      "side": 1,
      "message": "This is accessing the raw bytes of the absl::variant pointed to by rdata() right?\nIs there a way you can do this without casting an object to raw bytes - for example by implementing operator\u003c on the rdata?",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d50143fd_749ed1da",
        "filename": "discovery/mdns/mdns_records.cc",
        "patchSetId": 2
      },
      "lineNbr": 456,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-01-13T17:01:28Z",
      "side": 1,
      "message": "As I was thinking about this and rereading the RFC, I realized that there was a bug in this implementation due to how the lower layer parses the rdata. Reworking it to fix the bug\n\nCasting to raw bytes needs to be done somewhere. The RFC actually specifies that the comparison has to be done as comparison of the raw binary data as uint8_t types, without looking at the rdata types themselves - the comment at the top is copied directly from there\n\nSee https://tools.ietf.org/html/rfc6762#section-8.2",
      "parentUuid": "708147eb_9ad6c0ec",
      "revId": "eccfa52c4b952096cff99633b8c614695cd5a0eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}