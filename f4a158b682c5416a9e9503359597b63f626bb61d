{
  "comments": [
    {
      "key": {
        "uuid": "62a16a59_73bec952",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "Suggest using an --enable-tracing command-line argument. Something like:\n\n  absl::optional\u003cTextTraceLoggingPlatform\u003e trace_logging_platform;\n  if (argc \u003e\u003d 2 \u0026\u0026 strcmp(argv[1], \"--enable-tracing\") \u003d\u003d 0) {\n    trace_logging_platform.emplace();\n  }\n\n...since some may not want the logging spam. :)",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 162,
        "endChar": 48
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "facbcd60_443d7855",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-04T18:38:44Z",
      "side": 1,
      "message": "Currently, we already support a command line argument for tracing :)\n\n--args\u003d\"enable_trace_logging\" defaults to false, and if it\u0027s false no trace logs are generated",
      "parentUuid": "62a16a59_73bec952",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 162,
        "endChar": 48
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cab9266c_1d429dcd",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "By default, TraceLogging is enabled as part of the build.\nTo disable TraceLogging, include flag `--args\u003d\"enable_trace_logging\u003dfalse\"`\nwhen calling `gn gen` as part of building this library.\n\nThis is still correct, right?\n\nWhere is the enable_trace_logging flag checked? I don\u0027t see any other references in our codebase...",
      "parentUuid": "facbcd60_443d7855",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 162,
        "endChar": 48
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95563c7e_7e68e3e4",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "Please move the method comment to the header file.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 56
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57ec874d_4a2de854",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95563c7e_7e68e3e4",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 56
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "954f32a8_45ad5f2f",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "1. Suggest passing EncodedFrame by const-ref since it only needs to be read-only.\n\n2. Only presentation_time is mutated in the PendingFrame struct, which means the 2nd argument should probably be \"Clock::time_point* presentation_time\". But, even better, this could just be a return value rather than mutate-via-pointer. So, I suggest, returning the computed presentation_time and let the caller set PendingFrame::presentation_time.\n\n3. This method has side-effects. I\u0027d suggest adjusting its name to at least hint at that.\n\nPutting it all together:\n\n  Clock::time_point ResyncAndDeterminePresentationTime(const EncodedFrame\u0026 frame);",
      "range": {
        "startLine": 71,
        "startChar": 46,
        "endLine": 72,
        "endChar": 73
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77eea34b_e5cdb68e",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "954f32a8_45ad5f2f",
      "range": {
        "startLine": 71,
        "startChar": 46,
        "endLine": 72,
        "endChar": 73
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19bd55e8_e14f3017",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "Probably not worth tracing this method, since it does a few quick math operations. Nothing meaty, like a memcpy() or decode().",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 73,
        "endChar": 56
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfbd93c5_cf4c8aab",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19bd55e8_e14f3017",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 73,
        "endChar": 56
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f312746f_b813ec62",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "Per above comment:\n\n  pending_frame.presentation_time \u003d ResyncAndDeterminePresentationTime(frame);",
      "range": {
        "startLine": 115,
        "startChar": 2,
        "endLine": 115,
        "endChar": 52
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edc9c1f7_ffdc921c",
        "filename": "cast/standalone_receiver/sdl_player_base.cc",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f312746f_b813ec62",
      "range": {
        "startLine": 115,
        "startChar": 2,
        "endLine": 115,
        "endChar": 52
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0166a002_3dd5cb6b",
        "filename": "cast/standalone_receiver/sdl_video_player.cc",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "Trace this method too?",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 163,
        "endChar": 31
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c92e80ef_708bb1b3",
        "filename": "cast/standalone_receiver/sdl_video_player.cc",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0166a002_3dd5cb6b",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 163,
        "endChar": 31
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c687a3a1_d94118f7",
        "filename": "cast/standalone_receiver/streaming_playback_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "Not this CL, but eventually we should add async tracing to ReceiverSession, Receiver, and other parts of the streaming impl. For example, here, it would be great to do async tracing to expose how long the OFFER/ANSWER and receiver start-up takes: start when offer received, end once negotiation is complete and the players have been constructed.",
      "range": {
        "startLine": 44,
        "startChar": 34,
        "endLine": 44,
        "endChar": 46
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "401e0480_56648de5",
        "filename": "cast/standalone_receiver/streaming_playback_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c687a3a1_d94118f7",
      "range": {
        "startLine": 44,
        "startChar": 34,
        "endLine": 44,
        "endChar": 46
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a91e527_c98756aa",
        "filename": "docs/trace_logging.md",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "When I saw \"THIS,\" I thought the tracing was somehow referencing |this| from the class method. Maybe call this TRACE_SCOPED_FUNC, or some such?",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 31
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af11e858_b8172847",
        "filename": "docs/trace_logging.md",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a91e527_c98756aa",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 31
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0698256_f9acf125",
        "filename": "docs/trace_logging.md",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "s/the function name is manually given/a custom name for the operation is given/",
      "range": {
        "startLine": 99,
        "startChar": 42,
        "endLine": 99,
        "endChar": 59
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1165222d_ff2d7acb",
        "filename": "docs/trace_logging.md",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0698256_f9acf125",
      "range": {
        "startLine": 99,
        "startChar": 42,
        "endLine": 99,
        "endChar": 59
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fcf762e_182228b0",
        "filename": "docs/trace_logging.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "It looks like this \"macro overload\" and the one below also work for TRACE_SCOPED_THIS(). Also, the documentation for each seems to have a lot of copy-and-paste (pre-existing documentation). Suggestion:\n\n  `TRACE_SCOPED(category, name)`\n  `TRACE_SCOPED(category, name, traceId, parentId, rootId)`\n  `TRACE_SCOPED(category, name, traceIdHierarchy)`\n  If logging is enabled for the provided |category|, trace the current scope. The scope\n  should encompass the operation described by |name|. The latter two uses of this macro are\n  for manually providing the trace ID hierarchy; the first auto-generates a new trace ID for\n  this scope and sets its parent trace ID to that of the encompassing scope (if any).\n\n  `TRACE_SCOPED_FUNC(category)`\n  `TRACE_SCOPED_FUNC(category, traceId, parentId, rootId)`\n  `TRACE_SCOPED_FUNC(category, traceIdHierarchy)`\n  Same as TRACE_SCOPED(), but use the current function/method signature as the operation\n  name.\n\n...might want to check that Gittiles renders this nicely (with reasonable format/whitespace/linespace/etc.), and try something else if not.",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 59
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23d8255c_4dbbb252",
        "filename": "docs/trace_logging.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fcf762e_182228b0",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 59
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29c04aef_ec4e991d",
        "filename": "util/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-04T18:38:44Z",
      "side": 1,
      "message": "I see why it needs to be a separate macro call from below, but I feel like TRACE_SCOPED_THIS is a bit confusing of a name. Maybe TRACE_SCOPED_DEFAULT/DEF or TRACE_UNNAMED_SCOPED/TRACE_SCOPED_UNNAMED. WDYT?\n\nIMHO putting the new word between TRACE and SCOPED is clearer in the context of the below names, but not a strong opinion",
      "range": {
        "startLine": 52,
        "startChar": 8,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "503c702d_4075af35",
        "filename": "util/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29c04aef_ec4e991d",
      "range": {
        "startLine": 52,
        "startChar": 8,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f55823a_35b5d43c",
        "filename": "util/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-04T18:38:44Z",
      "side": 1,
      "message": "IMHO it would be clearer to call TRACE_SCOPED(category, __PRETTY_FUNCTION__)",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 79
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "287cd23b_a3b4a717",
        "filename": "util/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f55823a_35b5d43c",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 79
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10160ca7_d6369804",
        "filename": "util/trace_logging/macro_support.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-03T23:07:52Z",
      "side": 1,
      "message": "I suspect you didn\u0027t mean to leave this \"pragmatic heuristic\" in-place?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 50,
        "endChar": 3
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24a48251_c212b6a4",
        "filename": "util/trace_logging/macro_support.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Yeah, you are good at suspecting.",
      "parentUuid": "10160ca7_d6369804",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 50,
        "endChar": 3
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11004477_ac6d4070",
        "filename": "util/trace_logging_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-04T18:38:44Z",
      "side": 1,
      "message": "I\u0027d personally prefer this test for TRACE_SCOPED_THIS as a separate UT just to be careful",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ad52052_c016108e",
        "filename": "util/trace_logging_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-04T21:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11004477_ac6d4070",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30041646_4c9b7c09",
        "filename": "util/trace_logging_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-04T18:38:44Z",
      "side": 1,
      "message": "Good catch!",
      "range": {
        "startLine": 237,
        "startChar": 23,
        "endLine": 237,
        "endChar": 53
      },
      "revId": "f4a158b682c5416a9e9503359597b63f626bb61d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}