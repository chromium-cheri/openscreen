{
  "comments": [
    {
      "key": {
        "uuid": "ad8a9676_75eaa784",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "%s/recieving/receiving/g",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63488518_f1213c80",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad8a9676_75eaa784",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48e2131b_e730d115",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Interrupt does not imply cancellation to me, just preemption. If the currently ran operations are reran afterwards, leave as interrupt and change the comment.\n\nConsider CancelRunningOperations(); or similar.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd8d2ed5_3d869cef",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48e2131b_e730d115",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "527aedde_fcdb0637",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Nit: no capitalization in parenthetical insert.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d25dd08c_fcab0f5c",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "527aedde_fcdb0637",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2a06362_53195afa",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Nit: period.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6e510a1_8f0b1c29",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2a06362_53195afa",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0152df4_743f6341",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "We do Equals here for std::pair, right? Lame, but I think it\u0027s the right approach.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f79618_aae0bc24",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "This is actually the same approach taken in the stl, for instance see std::unordered_map:\nhttps://en.cppreference.com/w/cpp/container/unordered_map",
      "parentUuid": "f0152df4_743f6341",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d5d975a_9e822b29",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "%/curent/current/g",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3ac8f70_86037181",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d5d975a_9e822b29",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d735c769_f5fa2b9f",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Would we ever want polymorphism on the subscriber type? E.g. NetworkSubscriber and MdnsSubscriber both implementing FooSubscriber and passed in here as FooSubscriber? Or no?",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39f029c2_f76d1b06",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "In practice, SubscriberType will be a pointer when polymorphism is needed (this is how we\u0027ve handled it in all existing and planned code). I\u0027ve added a UT to ensure pointers work as expected",
      "parentUuid": "d735c769_f5fa2b9f",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ea59447_95785a3a",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Just to double check the predicate:\n\ntemplate\u003c class Predicate \u003e\nvoid wait( std::unique_lock\u003cstd::mutex\u003e\u0026 lock, Predicate pred );\nwhich is equivalent to:\n\nwhile (!pred()) {\n     wait(lock);\n}\n\nSo, this is:\n\nwhile (!!this-\u003eIsSubscriberChangePending(subscriber)) {\n    wait(lock);\n}\n\nWhich looks right.\n\nhttps://stackoverflow.com/questions/22837254/predicate-for-condition-variable",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a79a401a_02c2ba3e",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4ea59447_95785a3a",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eef7437_35e3ce60",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "We want to block the primary thread until a subscriber subscribes? What thread are they added on?",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dee06015_a5e9f56a",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "In practice, the \u0027Primary\u0027 thread would be expected to be the networking thread. The goal here is to give the user a way to prevent a while loop from spinning and wasting CPU clocks while there is no work to be done because there are no subscribers yet\n\nFor an example of why this is useful, take a look at the CL here, where the same approach is used: https://chromium-review.googlesource.com/c/openscreen/+/1823647 (cc file, line 43)",
      "parentUuid": "1eef7437_35e3ce60",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "add37d58_967e2fbf",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Nit: consider replacing erase + push_back with swap in the case where it !\u003d end()\n\nAlternatively, both the kAdd and kRemove cases perform an erase call, so you could move that out of the switch.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "414d784c_f2e351d8",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done. Went with the second suggestion and removed the while loop",
      "parentUuid": "add37d58_967e2fbf",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}