{
  "comments": [
    {
      "key": {
        "uuid": "ad8a9676_75eaa784",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "%s/recieving/receiving/g",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63488518_f1213c80",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad8a9676_75eaa784",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48e2131b_e730d115",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Interrupt does not imply cancellation to me, just preemption. If the currently ran operations are reran afterwards, leave as interrupt and change the comment.\n\nConsider CancelRunningOperations(); or similar.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd8d2ed5_3d869cef",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48e2131b_e730d115",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "527aedde_fcdb0637",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Nit: no capitalization in parenthetical insert.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d25dd08c_fcab0f5c",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "527aedde_fcdb0637",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2a06362_53195afa",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Nit: period.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6e510a1_8f0b1c29",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2a06362_53195afa",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0152df4_743f6341",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "We do Equals here for std::pair, right? Lame, but I think it\u0027s the right approach.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f79618_aae0bc24",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "This is actually the same approach taken in the stl, for instance see std::unordered_map:\nhttps://en.cppreference.com/w/cpp/container/unordered_map",
      "parentUuid": "f0152df4_743f6341",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2f9be35_5e6ff21d",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "std::equal_to is a call to operator\u003d\u003d unless specialized.\nGoogle style guide prohibits specializing templates that are in std::\n\nMaybe just use operator\u003d\u003d instead of Equals in std;:find_if call?\nSubscriberType has to implement this parameter anyway and all standard types have it as well.",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 76
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37c2691e_6f7731ea",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "Discussed offline, and the current template parameter works. Template is needed over equality to support cases like the MapKeyEquals below",
      "parentUuid": "c2f9be35_5e6ff21d",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 76
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ca13b53_7de2258d",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-10-09T20:08:21Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "37c2691e_6f7731ea",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 76
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d5d975a_9e822b29",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "%/curent/current/g",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3ac8f70_86037181",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d5d975a_9e822b29",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d735c769_f5fa2b9f",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Would we ever want polymorphism on the subscriber type? E.g. NetworkSubscriber and MdnsSubscriber both implementing FooSubscriber and passed in here as FooSubscriber? Or no?",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39f029c2_f76d1b06",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "In practice, SubscriberType will be a pointer when polymorphism is needed (this is how we\u0027ve handled it in all existing and planned code). I\u0027ve added a UT to ensure pointers work as expected",
      "parentUuid": "d735c769_f5fa2b9f",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df03188b_a527db8d",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-10-09T20:08:21Z",
      "side": 1,
      "message": "I think this was a dumb question on my part. References do apply polymorphism, so we should probably just have as few pointers as possible, especially considering we are allowed non-const pointers.",
      "parentUuid": "39f029c2_f76d1b06",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eba67cc9_e2fae61d",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "UnsubscribeBlocking, UnsubscribeAndBlock sounds more like it will unsubscribe and block further work.",
      "range": {
        "startLine": 60,
        "startChar": 7,
        "endLine": 60,
        "endChar": 26
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "313b77c9_487dff67",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eba67cc9_e2fae61d",
      "range": {
        "startLine": 60,
        "startChar": 7,
        "endLine": 60,
        "endChar": 26
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12581f9f_14e22338",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "Do you want the lock for the entire method or just for the collection manipulation?",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 62,
        "endChar": 79
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15899020_b2444304",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "We want it for the whole operation\n\nWe need it locked for the cancellation_token call and unsubscribe_block_.wait(). Else, the cancellation operation may complete too quickly and ApplyPendingChanges() will get the lock, complete an call unsubscribe_block_.notify_all(), and we will have missed our chance to unblock the condition_variable",
      "parentUuid": "12581f9f_14e22338",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 62,
        "endChar": 79
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ea59447_95785a3a",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Just to double check the predicate:\n\ntemplate\u003c class Predicate \u003e\nvoid wait( std::unique_lock\u003cstd::mutex\u003e\u0026 lock, Predicate pred );\nwhich is equivalent to:\n\nwhile (!pred()) {\n     wait(lock);\n}\n\nSo, this is:\n\nwhile (!!this-\u003eIsSubscriberChangePending(subscriber)) {\n    wait(lock);\n}\n\nWhich looks right.\n\nhttps://stackoverflow.com/questions/22837254/predicate-for-condition-variable",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a79a401a_02c2ba3e",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4ea59447_95785a3a",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eef7437_35e3ce60",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "We want to block the primary thread until a subscriber subscribes? What thread are they added on?",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dee06015_a5e9f56a",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "In practice, the \u0027Primary\u0027 thread would be expected to be the networking thread. The goal here is to give the user a way to prevent a while loop from spinning and wasting CPU clocks while there is no work to be done because there are no subscribers yet\n\nFor an example of why this is useful, take a look at the CL here, where the same approach is used: https://chromium-review.googlesource.com/c/openscreen/+/1823647 (cc file, line 43)",
      "parentUuid": "1eef7437_35e3ce60",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38f82fde_79287b5a",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "Would be nice to add a way to ensure that",
      "range": {
        "startLine": 83,
        "startChar": 58,
        "endLine": 84,
        "endChar": 44
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dd7e8d2_a6eb978e",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "I can\u0027t think of a good way to do so (at least not without tying us to a specific threading implementation like std::thread, which seems not good to do in a util/ class)\n\nOpen to suggestions though",
      "parentUuid": "38f82fde_79287b5a",
      "range": {
        "startLine": 83,
        "startChar": 58,
        "endLine": 84,
        "endChar": 44
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36df3471_9d4e5b45",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-11T19:46:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6dd7e8d2_a6eb978e",
      "range": {
        "startLine": 83,
        "startChar": 58,
        "endLine": 84,
        "endChar": 44
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c918c6e_819e8add",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "You can lock the mutex, std::move subscriber_changes_ into a local variable (or swap with a local variable), unlock the mutex and then update subscribers not under the lock. Lower latency in theory :)",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 87,
        "endChar": 72
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3d5d768_36026430",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "Done. Good idea!",
      "parentUuid": "9c918c6e_819e8add",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 87,
        "endChar": 72
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "add37d58_967e2fbf",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-27T17:45:55Z",
      "side": 1,
      "message": "Nit: consider replacing erase + push_back with swap in the case where it !\u003d end()\n\nAlternatively, both the kAdd and kRemove cases perform an erase call, so you could move that out of the switch.",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "414d784c_f2e351d8",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T19:25:35Z",
      "side": 1,
      "message": "Done. Went with the second suggestion and removed the while loop",
      "parentUuid": "add37d58_967e2fbf",
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe54f66b_c487d1c1",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "Why are we erasing a subscriber that\u0027s already present?",
      "range": {
        "startLine": 95,
        "startChar": 10,
        "endLine": 97,
        "endChar": 11
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8460585f_939a5fb7",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "We want to replace any subscriber that is equal to the new one we are adding according to our Equals function, so they might be \u0027equal\u0027 but still not the same. So we remove the old one first and add the new one rather than just skipping the call if it\u0027s already present",
      "parentUuid": "fe54f66b_c487d1c1",
      "range": {
        "startLine": 95,
        "startChar": 10,
        "endLine": 97,
        "endChar": 11
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17863cc0_d1d19d67",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-11T19:46:14Z",
      "side": 1,
      "message": "In case of add with replace erase and push_back potentially might re-allocate the entire collection twice. Maybe something like this?\n\nif (operation.second \u003d\u003d SubscriberOperation::kAdd) {\n  if (it !\u003d subscribers_.end()) {\n    *it \u003d subscriber;\n  } else {\n    subscribers_.push_back(subscriber);\n  }\n} else {\n  if (it !\u003d subscribers_.end()) {\n    subscribers_.erase(it);\n  } \n}",
      "parentUuid": "8460585f_939a5fb7",
      "range": {
        "startLine": 95,
        "startChar": 10,
        "endLine": 97,
        "endChar": 11
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68f4d8ec_348b77e1",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "I think it\u0027s better to make the caller explicitly call ApplyPendingChanges to get the updated collection of subscribers",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 115,
        "endChar": 73
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "550db6b2_192b1665",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68f4d8ec_348b77e1",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 115,
        "endChar": 73
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "122b1e0e_d4b36a56",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-27T21:08:47Z",
      "side": 1,
      "message": "mutex is re-entrant on the same thread, you can put a lock here and drop this expectation.",
      "range": {
        "startLine": 122,
        "startChar": 70,
        "endLine": 122,
        "endChar": 76
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e80f244_2262fb64",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-27T22:01:25Z",
      "side": 1,
      "message": "I actually found during unit tests that this isn\u0027t true. Adding a std::unique_lock or std::lock_guard below causes UnitTests to deadlock\n\nAccording to std::mutex::lock documentation: \"If the mutex is currently locked by the same thread calling this function, it produces a deadlock (with undefined behavior). See recursive_mutex for a mutex type that allows multiple locks from the same thread.\"",
      "parentUuid": "122b1e0e_d4b36a56",
      "range": {
        "startLine": 122,
        "startChar": 70,
        "endLine": 122,
        "endChar": 76
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5adec61f_f467cae4",
        "filename": "util/subscriber_model.h",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-11T19:46:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9e80f244_2262fb64",
      "range": {
        "startLine": 122,
        "startChar": 70,
        "endLine": 122,
        "endChar": 76
      },
      "revId": "9d615bdebd182ade8bb1d0e9ae20dc4f515c9b7a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}