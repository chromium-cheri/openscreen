{
  "comments": [
    {
      "key": {
        "uuid": "9d580905_4ab7ae5f",
        "filename": "cast/common/mdns/mdns_parsing.cc",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "Bounds check for label_index?",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75aec925_8814dc8b",
        "filename": "cast/common/mdns/mdns_parsing.cc",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-03T17:43:05Z",
      "side": 1,
      "message": "Would it make sense to make a copy of (this) that\u0027s a tentative reader so that instead of doing manual \"position +\u003d X\" below you can just use tentative.Read(\u0026label_type) or tentative.ReadBytes(label_length, \u0026label), etc, down below?  It might simplify some of the code where you have to basically duplicate the code from BigEndianReader.",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef71df2c_a4cd6a04",
        "filename": "cast/common/mdns/mdns_parsing.cc",
        "patchSetId": 12
      },
      "lineNbr": 153,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-03T17:43:05Z",
      "side": 1,
      "message": "How did you end up picking this?  It looks like the original code was using (ultimately) third_party/superfasthash/superfasthash.c.  \n\nI guess it doesn\u0027t matter that much...",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c42ca06f_5e4c4e5d",
        "filename": "cast/common/mdns/mdns_parsing.cc",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-03T17:43:05Z",
      "side": 1,
      "message": "Would it make sense to make a copy of (this) that\u0027s a tentative writer so that instead of doing manual \"position +\u003d X\" below you can just use tentative.Write(find_result-\u003esecond) or tentative.Write(direct_label), etc, down below?  It might simplify some of the code where you have to basically duplicate the code from BigEndianWriter.",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe9c1849_afaffca8",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "Fix copyright date here and in other files",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7873d2c_623f4678",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 5,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "Nit: mdns_parser.h would be more consistent with the names of similar files elsewhere in Chromium.  I don\u0027t feel strongly however.",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06009411_a649e2fc",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "Note that DEPS means this will be internal to cast/common.  If it is going to be used outside of cast/common, you\u0027ll need to check in an API to cast/common/public.",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfbda14f_4e13e2bd",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "We have a similar class in osp/.  Maybe we can move this to osp_base and eliminate the other one if we like this one better.",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "209704cb_d5b75a26",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-03T17:43:05Z",
      "side": 1,
      "message": "Do you mean https://cs.chromium.org/chromium/src/third_party/openscreen/src/osp/impl/discovery/mdns/domain_name.h?g\u003d0\n\n?\n\nThat sounds like an interesting idea.   But if we are successful in using this mDNS code, we won\u0027t need mDNSResponder, which means we won\u0027t need the other DomainName class and we can just delete it.  \n\nThe other alternative is to use that DomainName here and not write a new one, but I\u0027m not sure it does everything this code needs.",
      "parentUuid": "dfbda14f_4e13e2bd",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0659d68e_3b2f9204",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "1/Please document the return value.\n2/What happens if the caller constructs an invalid name (too long, empty label, bad characters, etc.)?",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "491d0755_62952fff",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 38,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-03T17:43:05Z",
      "side": 1,
      "message": "Should document what happens when the index is out of range.",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffbc9260_70e4f5df",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 54,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-03T17:43:05Z",
      "side": 1,
      "message": "Why not clear to 1 and then just have max_wire_size() be wire_size?",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbe10f8c_31330ac2",
        "filename": "cast/common/mdns/mdns_parsing.h",
        "patchSetId": 12
      },
      "lineNbr": 79,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T00:19:29Z",
      "side": 1,
      "message": "Shouldn\u0027t the value be a size_t to match the writer API?",
      "revId": "7e0b7b7bba3993ae1cfa7bd73114dea66efb833f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}