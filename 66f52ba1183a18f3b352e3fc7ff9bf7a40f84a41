{
  "comments": [
    {
      "key": {
        "uuid": "c5cde628_8598260a",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "I would suggest taking absl::string_view for the string validation methods, which is more flexible and efficient.",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74dd4242_f5c0cb8f",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T18:08:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5cde628_8598260a",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b52bc62b_7a4f242e",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "You need to check that you\u0027re not advancing beyond string.end() when looking ahead.\nI would just use operator[] with a numeric index, to make the bounds checks simple.",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac5adb56_fd454631",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T18:08:09Z",
      "side": 1,
      "message": "Done. Good catch",
      "parentUuid": "b52bc62b_7a4f242e",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c4660ba_dd25dad1",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "I usually prefer boolean methods to covey a positive sense for what they are testing.\nSo this would be, HasControlCharacters",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a92a6ac_1f294d3b",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T18:08:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c4660ba_dd25dad1",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9df573c_38b7a16b",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "Suggest s/string_char/ch/ for brevity.\nNormally abbreviations are discouraged, but char is a reserved word.",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44c03711_93f3f59b",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T18:08:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9df573c_38b7a16b",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68911de2_fe92b703",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "const std::string\u0026 for ctor arguments (the ctor is going to take a copy anyway)",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef486f99_5eefe5da",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T18:08:09Z",
      "side": 1,
      "message": "Done\n\nUpdated all ctor parameters in this way for the same reason",
      "parentUuid": "68911de2_fe92b703",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af5f3eef_3cd513cf",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-24T18:20:19Z",
      "side": 1,
      "message": "It\u0027s better to accept by value in the constructor as accepting by value is potentially a zero-copy, while accepting by const reference is always at least one copy into the member field.\n\nConsider the following example:\n\nclass Foo {\npublic:\n  // can move, no copy\n  Foo(std::string foo) : foo_(std::move(foo)) {}\nprivate:\n  std::string foo_;\n};\n\n// temporary is moved into the constructor\nFoo f1(std::string(\"blah\"));\n// inevitable copy here\nstd::string s(\"ugh\");\nFoo f2(s);\n// no copy here, moved by hand\nFoo f3(std::move(s));\n\nclass Bar {\npublic:\n  // can\u0027t move from const reference, always copy\n  Bar(const std::string\u0026 bar) : bar_(bar) {}\nprivate:\n  std::string bar_;\n};\n\n// results in a copy, worse than Foo\nBar b1(std::string(\"blah\"));\n// inevitable copy here\nstd::string s(\"ugh\");\nBar b2(s);\n// results in a copy, worse than Foo\nBar b3(std::move(s));",
      "parentUuid": "ef486f99_5eefe5da",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cd9b075_56aeb3e8",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "Would absl::StrSplit() be simpler?",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca5c10a0_275742b7",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T18:08:09Z",
      "side": 1,
      "message": "It would, but I actually hit a compilation error when using absl::StrSplit - it looks like one of the internal absl files isn\u0027t linked correctly\n\nAfter hitting that issue, I realized that this approach should be better perf-wise so I didn\u0027t fight with abseil to make it work. If you prefer, I can try to go back to that approach",
      "parentUuid": "1cd9b075_56aeb3e8",
      "revId": "66f52ba1183a18f3b352e3fc7ff9bf7a40f84a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}