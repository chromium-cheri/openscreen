{
  "comments": [
    {
      "key": {
        "uuid": "abb17332_e6505a6e",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-19T20:53:21Z",
      "side": 1,
      "message": "Do we want to disallow the use of this function in non-DCHECK code?",
      "range": {
        "startLine": 53,
        "startChar": 15,
        "endLine": 53,
        "endChar": 36
      },
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02be8e64_4644b90c",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-19T21:19:18Z",
      "side": 1,
      "message": "It allows to do certain things, e.g. to check if the function is running on task runner, and if it isn\u0027t schedule the call to itself on the task runner. However, I think we should discourage that and only keep this debug-only.",
      "parentUuid": "abb17332_e6505a6e",
      "range": {
        "startLine": 53,
        "startChar": 15,
        "endLine": 53,
        "endChar": 36
      },
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac7d84d9_dfc85ef9",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-09-20T05:12:51Z",
      "side": 1,
      "message": "I\u0027m not sure this belongs in the platform API. It is only useful to call inside implementations.  I would suggest moving this to TaskRunnerImpl.  Note that TaskRunnerImpl has the only real implementation in this patch.",
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d56e17ec_d693ebcc",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-19T20:42:47Z",
      "side": 1,
      "message": "Use std::thread::id instead, for portability?\n\nhttps://en.cppreference.com/w/cpp/thread/thread/get_id",
      "range": {
        "startLine": 160,
        "startChar": 17,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5ba55a6_65b0f6ce",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-19T20:53:21Z",
      "side": 1,
      "message": "So far we have kept std::thread use out of TaskRunnerImpl (ie: task_runner_thread is separate from TaskRunnerImpl) - do we want to tie them together here?\n\nIt might make more sense to have a GetThreadId macro/function we expect the embedder to define",
      "parentUuid": "d56e17ec_d693ebcc",
      "range": {
        "startLine": 160,
        "startChar": 17,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "887723e3_1f5cc735",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-19T21:19:18Z",
      "side": 1,
      "message": "Do we expect the default implementation of task runner to be cross-platform?",
      "parentUuid": "e5ba55a6_65b0f6ce",
      "range": {
        "startLine": 160,
        "startChar": 17,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "425de4f6_1842400d",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-09-20T17:54:23Z",
      "side": 1,
      "message": "If we eventually want to support Windows in the Open Screen default implementation, then probably? That\u0027s definitely a Mark/Peter question, I\u0027d be happy to never support windows in standalone but I\"m not sure how much that impacts our goals.\n\nAs far as std::thread, we don\u0027 t have to tie them together still. We can replace the pthread_self() call in task_runner.cc with std::this_thread::get_id\n\nhttp://www.cplusplus.com/reference/thread/this_thread/",
      "parentUuid": "887723e3_1f5cc735",
      "range": {
        "startLine": 160,
        "startChar": 17,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "c62dee5fd3001aa56fc219ccfa817bcca24e95b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}