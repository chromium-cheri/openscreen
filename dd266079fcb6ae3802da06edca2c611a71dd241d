{
  "comments": [
    {
      "key": {
        "uuid": "8ca858a5_353c9d5a",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 20
      },
      "lineNbr": 420,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "Up to you whether to keep, but FYI controller and receiver never run together in this demo.",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0430776c_26aa5d69",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 20
      },
      "lineNbr": 420,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "I prefer to have them be independent sequences even if they will not output to the same file",
      "parentUuid": "8ca858a5_353c9d5a",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfa8707e_e4b801cf",
        "filename": "osp_base/error.cc",
        "patchSetId": 20
      },
      "lineNbr": 33,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "Error::Code itself is an integer and doesn\u0027t warrant being passed by reference.",
      "range": {
        "startLine": 33,
        "startChar": 43,
        "endLine": 33,
        "endChar": 61
      },
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bc31674_b89cc227",
        "filename": "osp_base/error.cc",
        "patchSetId": 20
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "This causes compilation failure: \"use of overloaded operator \u0027\u003c\u003c\u0027 is ambiguous (with operand types \u0027std::ostream\u0027 (aka \u0027basic_ostream\u003cchar\u003e\u0027) and \u0027openscreen::Error::Code\u0027)\"\n\nThoughts?",
      "parentUuid": "cfa8707e_e4b801cf",
      "range": {
        "startLine": 33,
        "startChar": 43,
        "endLine": 33,
        "endChar": 61
      },
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a63c7e4_85047464",
        "filename": "osp_base/error.cc",
        "patchSetId": 20
      },
      "lineNbr": 33,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-17T03:34:23Z",
      "side": 1,
      "message": "Hm, I think because Error can be implicitly constructed from Error::Code, the compiler _could_ also call the below operator\u003c\u003c().  I\u0027m not positive why this doesn\u0027t confuse it, something about precedence I guess.  Fine to leave it then.",
      "parentUuid": "6bc31674_b89cc227",
      "range": {
        "startLine": 33,
        "startChar": 43,
        "endLine": 33,
        "endChar": 61
      },
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eac813ef_f730394b",
        "filename": "platform/api/internal/trace_logging_internal.cc",
        "patchSetId": 20
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "Indeed, it\u0027s not expensive, but again, what does running these destructors buy us?  What would be the harm in leaking these as raw pointers instead?",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00cd5f20_d9764d39",
        "filename": "platform/api/internal/trace_logging_internal.cc",
        "patchSetId": 20
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "We currently do not support safely leaking any pointers in OSP\nDoing so causes failures in our buildbots, so this is the only option until we fully support safely leaking pointers in a way supported by the Leak Sanitizer\n\nI\u0027ve added a TODO for myself to remove this once support is added though",
      "parentUuid": "eac813ef_f730394b",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08fc08b1_8e64f4c4",
        "filename": "platform/api/internal/trace_logging_internal.cc",
        "patchSetId": 20
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-17T04:28:19Z",
      "side": 1,
      "message": "We don\u0027t check for leaks on the bots.",
      "parentUuid": "00cd5f20_d9764d39",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53d576a6_d82a73c4",
        "filename": "platform/api/internal/trace_logging_internal.cc",
        "patchSetId": 20
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-17T16:53:12Z",
      "side": 1,
      "message": "We do on our linux64_debug build, though I haven\u0027t seen these failures on other bots\n\nSee Iteration 14 \u003e linux64_debug bot \u003e \"Run Unit Tests\" stdout for an example of this failure",
      "parentUuid": "08fc08b1_8e64f4c4",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a9e6db3_bfefbed2",
        "filename": "platform/api/internal/trace_logging_internal.cc",
        "patchSetId": 20
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-18T00:03:29Z",
      "side": 1,
      "message": "That\u0027s interesting since we don\u0027t set ASAN_OPTIONS\u003ddetect_leaks\u003d1 and we don\u0027t explicitly add -fsanitize\u003dleak.  Clang documentation implies you need one or the other.  It\u0027s also weird that I can\u0027t repro this locally.  Oh well.",
      "parentUuid": "53d576a6_d82a73c4",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f667bba_e93adf8f",
        "filename": "platform/api/internal/trace_logging_internal.cc",
        "patchSetId": 20
      },
      "lineNbr": 39,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-18T00:20:37Z",
      "side": 1,
      "message": "IIRC, yes, we do check for leaks: ASAN is [supposed to be] turned on in the Linux Clang debug build.\n\nWe shouldn\u0027t use static initializers if we don\u0027t have to. I\u0027ve proposed a simple solution to all this that would let the global TraceStack be auto-created/destroyed by the first/last ScopedTraceOperation. Then, all of the issues here go away completely.",
      "parentUuid": "53d576a6_d82a73c4",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98d1a7a3_ddebe8cf",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 20
      },
      "lineNbr": 32,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "This should just be a free function IMHO, but maybe if the macro using it below is fixed there\u0027ll be a reason for it to stay.",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a829f85_2892e95b",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 20
      },
      "lineNbr": 32,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "The static keyword was removed somewhere during the refactoring. This has been corrected and a UT to validate its functioning added\n\nI prefer a static function to free function for personal style reasons, unless there is any perf benefit to a free function",
      "parentUuid": "98d1a7a3_ddebe8cf",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce4fb4a4_ca1e2d06",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 20
      },
      "lineNbr": 85,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "TraceIdHierarchy here and in arguments?",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d7cabb9_f8051beb",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 20
      },
      "lineNbr": 85,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "TraceIdHierarchy is not used internally to the TraceLogging (only as a way to provide parameters) because adding ht extra layer of indirection only adds complexity without actually providing any benefit",
      "parentUuid": "ce4fb4a4_ca1e2d06",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5cb6b6a_38a4b942",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 20
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "AFAIK this shouldn\u0027t work, and it appears to be unused/untested which supports that theory.",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a417072_8c440a52",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 20
      },
      "lineNbr": 61,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "I\u0027ve updated the platform layer and the UTs based on a suggestion from Yuri, and included UTs for this section as-well. PTAL again",
      "parentUuid": "c5cb6b6a_38a4b942",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bc66f30_4547fc9e",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 20
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "This wouldn\u0027t have to return bool if you just wrote `... ? (TraceAsyncEnd(...), true) : false`, but maybe you knew that and the comment about making the macro cleaner refers to this getting messy with line wraps?",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0527f681_28ae7b8a",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 20
      },
      "lineNbr": 62,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "I\u0027m attempting to avoid the syntax provided there (Yuri suggested similar). It is possible to avoid returning a bool, but the trade off in readability doesn\u0027t seem worth it\n\nAccording to the C++ spec it\u0027s actually possible to use the ternary operator with void return values as-well, but I\u0027m avoiding that as well - both approaches wouldn\u0027t be clear to me if I ran across it in someone else\u0027s code",
      "parentUuid": "9bc66f30_4547fc9e",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18fe50fe_3eb60cee",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 20
      },
      "lineNbr": 62,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-18T00:20:37Z",
      "side": 1,
      "message": "Just to give this some closure: It seems that this is an issue of personal style. While I made the same suggestion, I\u0027m perfectly happy with the way Ryan has it as well. In C++, there are so many very-different ways of doing the same thing; so, there\u0027s bound to be lots of variations in solutions.",
      "parentUuid": "0527f681_28ae7b8a",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f541ffc1_08f90f09",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 20
      },
      "lineNbr": 12,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "Is this for \u0027#ifndef\u0027 indentation?  IMHO not necessary if so.",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "125becea_264a0d65",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 20
      },
      "lineNbr": 12,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "I will remove it then :)",
      "parentUuid": "f541ffc1_08f90f09",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b3df6d7_acc2d23b",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 20
      },
      "lineNbr": 16,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-08T23:44:52Z",
      "side": 1,
      "message": "You already have TraceCategory::Value::Any.",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36c30510_57d0e9a7",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 20
      },
      "lineNbr": 16,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-16T23:38:57Z",
      "side": 1,
      "message": "I am purposely not using TraceCategory::Value::Any here. I don\u0027t want to tie this function to a TraceCategory value intended to be used in a slightly different way",
      "parentUuid": "7b3df6d7_acc2d23b",
      "revId": "dd266079fcb6ae3802da06edca2c611a71dd241d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}