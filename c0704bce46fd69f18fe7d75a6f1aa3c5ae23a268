{
  "comments": [
    {
      "key": {
        "uuid": "65af3731_55693b94",
        "filename": "cast/common/public/service_info.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "Add coverage for invalid record?",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a5f604f_2500bf84",
        "filename": "cast/common/public/service_info.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "This is actually an invalid state. Updating to DCHECK",
      "parentUuid": "65af3731_55693b94",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84ac9fba_d9d437db",
        "filename": "cast/common/public/service_info_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "what is zero? make a constant if possible, otherwise comment.",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02d651e4_5933a994",
        "filename": "cast/common/public/service_info_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84ac9fba_d9d437db",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4780ae2f_ef5006f1",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "You could mess around with copy_if and stuff here if you are interested.\n\nhttps://stackoverflow.com/questions/40901615/how-to-replicate-map-filter-and-reduce-behaviors-in-c-using-stl",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71a12f90_47a4cf83",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "I feel like that\u0027s clever (and will keep it in mind for future - didn\u0027t even know it existed), but IMHO less readable\nIf you\u0027d like I can go that route, but I think this approach improves readability (at least in this specific case)\n\nWDYT?",
      "parentUuid": "4780ae2f_ef5006f1",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cc9f9d7_3ab46bc9",
        "filename": "discovery/dnssd/impl/dns_data.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-10T03:08:25Z",
      "side": 1,
      "message": "NOTE: Duplicate code between this class and dns_data_graph is expected (and same for their tests)\n\nDnsDataGraph is a replacement for DnsData (to fix an open bug), and a CL to make this replacement happen will be up soon. At that point, DnsData will be deleted entirely",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b882fce_facf05ec",
        "filename": "discovery/dnssd/impl/dns_data.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "6cc9f9d7_3ab46bc9",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a1b2529_7e2089d7",
        "filename": "discovery/dnssd/impl/dns_data_graph_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "Could you ever have two IPv4 addresses?",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0afd3a91_811a3bf0",
        "filename": "discovery/dnssd/impl/dns_data_graph_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "Current code, no. Future code, yes. Until that change, there is no reason to overcomplicate these tests.\n\nSee task b/158532090",
      "parentUuid": "6a1b2529_7e2089d7",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4376f4e1_50718e9d",
        "filename": "discovery/dnssd/public/dns_sd_instance.h",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-10T03:08:25Z",
      "side": 1,
      "message": "I know coverage is missing for this method. UTs for this method will come in a follow-up CL. The next one will be touching this file, so I plan to wait until then to make these changes",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 63,
        "endChar": 67
      },
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ece067f2_ed415f05",
        "filename": "discovery/dnssd/public/dns_sd_instance_endpoint.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-10T03:08:25Z",
      "side": 1,
      "message": "The name here intentionally deviates from the guidance for naming\nThis is a public API (exposed to embedders, and they may be interacting with it)\n\nI think that a common-sense and consistent API here (where addresses() and endpoints() are the same) makes more sense to embedders than an arbitrary difference (endpoints() vs GetAddresses()). WDYT?",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 50
      },
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8004aff3_820ad69b",
        "filename": "discovery/dnssd/public/dns_sd_instance_endpoint.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "The purpose of the naming difference in the style guide, IIRC, is that addresses() is trivial and GetAddresses() is non-trivial, e.g. involves creating a new struct, etc.\n\nSince addresses() is not inline in the header, it implies something similarly. Since you aren\u0027t just retrieving the value of an addresses_ vector then I would encourage you to name it GetAddresses().",
      "parentUuid": "ece067f2_ed415f05",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 50
      },
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9280ef7e_7f93a1cb",
        "filename": "discovery/dnssd/public/dns_sd_instance_endpoint.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "Updating the ctor to populate addresses because we already need to iterate through them all, eliminating lazy initialization, and moving the getter entirely to the header.\n\nI think it\u0027s worth a separate team-level discussion about if lazy-initialized variables can be inlined in the header - with branch prediction for the ternary, they should be no slower than normal getters.",
      "parentUuid": "8004aff3_820ad69b",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 50
      },
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa0001cc_e927aecf",
        "filename": "discovery/dnssd/public/dns_sd_instance_endpoint.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "I see these bugs a lot, we should definitely YAGNI comparators.",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79dd16cf_83c22c3b",
        "filename": "discovery/dnssd/public/dns_sd_instance_endpoint.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "That change is outside the scope of this CL\nBut agree. Plus a macro for when we do need multiple would also be useful",
      "parentUuid": "fa0001cc_e927aecf",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cdeee3e_574e2095",
        "filename": "discovery/public/dns_sd_service_watcher_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "add comment for what 0 is? I still don\u0027t know from the call site here.",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fce2d7f_be37f9d0",
        "filename": "discovery/public/dns_sd_service_watcher_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0cdeee3e_574e2095",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8ee80dd_cbe9d53b",
        "filename": "discovery/public/dns_sd_service_watcher_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-12T00:09:13Z",
      "side": 1,
      "message": "Same here.",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c8d4954_593aa7e6",
        "filename": "discovery/public/dns_sd_service_watcher_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-12T00:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8ee80dd_cbe9d53b",
      "revId": "c0704bce46fd69f18fe7d75a6f1aa3c5ae23a268",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}