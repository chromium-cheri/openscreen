{
  "comments": [
    {
      "key": {
        "uuid": "f4d31396_727502c2",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "Instead of client-side code having to manually call Create() and ShutDown(), how about just making the instance a local, scoped variable:\n\n  PlatformClientPosix platform_client(microseconds(50), microseconds(50));\n\n...then, no matter how the method returns, the dtor will be called automatically.\n\nThis also means getting rid of the PlatformClientPosix::Create() and Shutdown() methods, and then making the ctor/dtor public. Simpler! :)",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 72
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64396bf4_c2976015",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "50 microseconds is a pretty short for the timeouts. Seems like that\u0027d spin the CPU quite a bit. And, these only affect shutdown latency, correct? Consider something much larger, like 100ms maybe?\n\nIt\u0027d be good if we could revisit the design choices that led to \"busy/spin waits\" soon.",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18488866_3d8ea982",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T21:37:22Z",
      "side": 1,
      "message": "That change is outside the scope of this CL",
      "parentUuid": "f4d31396_727502c2",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 72
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcd915bd_8756c76d",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T21:37:22Z",
      "side": 1,
      "message": "The timeout is the max time that an individual networking operation can execute (either sending/recieving TLS data or reading from UDP sockets)\nThe min execution time is the minimum time that will pass between iterations. This isn\u0027t done with a busy loop though - it uses a condition_variable::wait_for(...)\n\nSince the demo is only run on a multi-core processor, I\u0027d expect that each thread will have its own core (One for networking, which these variables apply to, one for task runner, and one for the embedder) - so we could reasonable put min_execution_time \u003d 0.",
      "parentUuid": "64396bf4_c2976015",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a9f898_e4adb49c",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T16:59:28Z",
      "side": 1,
      "message": "Will update to 100 ms if you still think the change is relevant following the further details provided :)",
      "parentUuid": "dcd915bd_8756c76d",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e56a69f5_1ebec4da",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-28T23:10:43Z",
      "side": 1,
      "message": "\u003e This isn\u0027t done with a busy loop though - it uses a condition_variable::wait_for(...)\n\nI guess \"busy\" is subjective here. What I meant is that this is controlling a thread that unconditionally runs some \"operations\" every 50 usec, even if no work is being done. Instead of that, why don\u0027t we let the operations post delayed tasks to a task runner, and only if there is some trigger that suggests there is actually work to do?\n\nThe problem is that the current design is forcing us into a position to guess at \"tunable configuration,\" and none of us knows (nor *could* know) what will work best for all use cases. 100 ms might be fine for most things, but that would definitely cripple Cast Streaming\u0027s use cases.",
      "parentUuid": "b9a9f898_e4adb49c",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b1047dd_7e82cb44",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-28T23:10:43Z",
      "side": 1,
      "message": "Respectfully, I disagree. In this change, all the demo apps are being modified to create and destroy a PlatformClientPosix; so, it very much seems to be in-scope.\n\nIf not in this CL, that change should be made before this CL, and not afterwards.",
      "parentUuid": "18488866_3d8ea982",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 72
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff9c0bff_5673d5d0",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T23:18:07Z",
      "side": 1,
      "message": "I still believe it to be outside the scope of this CL, but am happy to create a new one with that change, to go in before this one :) I\u0027d like to get Mark\u0027s comments on that approach before making this design change",
      "parentUuid": "2b1047dd_7e82cb44",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 72
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b639a80_4767b159",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T23:31:39Z",
      "side": 1,
      "message": "Parallel CL created: https://chromium-review.googlesource.com/c/openscreen/+/1885376",
      "parentUuid": "ff9c0bff_5673d5d0",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 72
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abc6d1b7_f894ebe9",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T23:51:18Z",
      "side": 1,
      "message": "I\u0027m going to loop Mark in for this question\n\nI like the idea of using a separate TaskRunner for Networking operations, but that sounds like it would introduce its own issues too (ie: running too often on devices with only one core, knowing how frequently to wake-up and check for readable data, etc). Would it be reasonable to leave this as a TODO?",
      "parentUuid": "e56a69f5_1ebec4da",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c977c34_d7acf4d8",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-29T17:46:01Z",
      "side": 1,
      "message": "The standalone platform is not intended to accommodate all hardware and performance scenarios.  Rather it\u0027s to bootstrap development of functionality.\n\nBefore complexifying the current implementation, I\u0027d like to first tune it through the current interface; the recevier demo can use a tighter loop to reduce latency (keeping in mind it takes at ~100us for a datagram to traverse WiFi).\n\nIf that proves inadequate, we can either customize the networking event loop, or adopt libevent, which I see as the long term solution for both standalone processes and receiver embedders.",
      "parentUuid": "abc6d1b7_f894ebe9",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05aa484d_a143f680",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-29T20:24:20Z",
      "side": 1,
      "message": "Closing this comment as the current solution will suffice for now",
      "parentUuid": "5c977c34_d7acf4d8",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 49
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6170519d_15410d09",
        "filename": "osp/demo/osp_demo.cc",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-29T20:24:20Z",
      "side": 1,
      "message": "@Yuri, See Mark\u0027s response on that CL. This change may not be advisable\n\nClosing this comment as it is being addressed in a parallel CL",
      "parentUuid": "6b639a80_4767b159",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 613,
        "endChar": 72
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67ce5a9f_71c57982",
        "filename": "platform/impl/platform_client_posix.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "Why are the std::threads being heap-allocated now? Seems like you should not make any of these changes.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daeeb9a1_72c1c8be",
        "filename": "platform/impl/platform_client_posix.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T21:37:22Z",
      "side": 1,
      "message": "I was hitting a race condition when I created the std::thread as part of the member initialization list rather than in the body of the ctor. If the std::thread is stored as a member variable, it needs to be initialized inline there, so this was the best fix I could come up with\n\nIn a previous CL I had been told not to use absl::optional for member variables, but I can\u0027t find any documentation online to support that conclusion, so it might be the best approach",
      "parentUuid": "67ce5a9f_71c57982",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e34b2ff7_3ebd53d5",
        "filename": "platform/impl/platform_client_posix.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T16:59:28Z",
      "side": 1,
      "message": "Updated to use absl::optional per previous comment",
      "parentUuid": "daeeb9a1_72c1c8be",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdaad960_dbe2387a",
        "filename": "platform/impl/platform_client_posix.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-28T23:10:43Z",
      "side": 1,
      "message": "\u003e I was hitting a race condition when I created the std::thread as part of the member initialization list rather than in the body of the ctor.\n\nIs that because there is a dependency on the other data members of this class? If so, you could just put the std::thread members last, to ensure the other ones are constructed/initialized before the threads are constructed/started; and aren\u0027t destroyed until after the std::threads are stopped/destroyed.\n\n\u003e In a previous CL I had been told not to use absl::optional for member variables...\n\nAFAIK, there\u0027s no reason why one shouldn\u0027t use absl::optional like this, when inline allocation (but later construction) is desired. However, needing to do this may indicate other structural/design issues, like functionality that should be encapsulated differently. So, this is only something you\u0027d want do when it makes sense in the bigger picture.",
      "parentUuid": "e34b2ff7_3ebd53d5",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7ecd1d4_549200c3",
        "filename": "platform/impl/platform_client_posix.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "Per other comment: Make this public, and move to above the dtor.",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 60,
        "endChar": 21
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c81898c0_8c45e0f7",
        "filename": "platform/impl/platform_client_posix.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T21:37:22Z",
      "side": 1,
      "message": "That is outside the scope of this CL.",
      "parentUuid": "c7ecd1d4_549200c3",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 60,
        "endChar": 21
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c781d7b_df8bedc5",
        "filename": "platform/impl/udp_socket_posix.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "Comment needs to be updated here.",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 81,
        "endChar": 64
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bb5a566_86aa89fb",
        "filename": "platform/impl/udp_socket_posix.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T16:59:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c781d7b_df8bedc5",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 81,
        "endChar": 64
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617c3adf_a3dc0564",
        "filename": "platform/impl/udp_socket_reader_posix.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "Just noticed this: Since the dtor is an override, it should be (per Google C++ style):\n\n  ~UdpSocketReaderPosix() override;\n\nWe should add some kind of PRESUBMIT, like Chromium has to auto-detect this for us, at some point...I filed a bug for tracking that.",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 34
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a972454f_76bd0491",
        "filename": "platform/impl/udp_socket_reader_posix.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T16:59:28Z",
      "side": 1,
      "message": "Done. Good catch",
      "parentUuid": "617c3adf_a3dc0564",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 34
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8ae9bf1_50053b84",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-24T20:59:37Z",
      "side": 1,
      "message": "Instead of a subclass, how about just providing a second ctor in PlatformClientPosix that takes a TaskRunner and doesn\u0027t start the task_runner_thread_:\n\nPlatformClientPosix::PlatformClientPosix(\n    TaskRunner* task_runner,\n    Clock::duration networking_operation_timeout,\n    Clock::duration networking_loop_interval)\n    : networking_loop_(networking_operations(),\n                       networking_operation_timeout,\n                       networking_loop_interval),\n      task_runner_(task_runner),\n      networking_loop_thread_(\u0026OperationLoop::RunUntilStopped,\n                              \u0026networking_loop_) {}\n\nThis would mean that the existing task_runner_ member needs to be renamed to something like owned_task_runner_ and wrapped with absl::optional\u003cTaskRunnerImpl\u003e. Then, task_runner_ would just be a pointer to the internal or external one, depending on which ctor was used.\n\nThe reason for merging this all into the same class is that we have an \"either-or\" situation: We don\u0027t want an extra thread and task runner spawned if it isn\u0027t going to be used. It\u0027s best for the \"either-or\" decision to be encapsulated in the same place, rather than across files.\n\nAlso, ~PlatformClientPosix() would have to check if the thread is running before trying to join on it:\n\n  if (task_runner_thread_.joinable()) {\n    task_runner_thread_.join();\n  }",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 90,
        "endChar": 2
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff24dea_ebc982ca",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-28T16:59:28Z",
      "side": 1,
      "message": "Done\n\nIn previous discussion with Mark, we had mentioned that a user-provided TaskRunner could be handled through a different implementation of PlatformClient - I think you\u0027re right that we shouldn\u0027t go that route here though",
      "parentUuid": "d8ae9bf1_50053b84",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 90,
        "endChar": 2
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d40eb11_1e2d39dd",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-28T23:10:43Z",
      "side": 1,
      "message": "Ok, so now we can delete this class, right?",
      "parentUuid": "bff24dea_ebc982ca",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 90,
        "endChar": 2
      },
      "revId": "8449caf58368708906adeefe4bc5702081686a94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}