{
  "comments": [
    {
      "key": {
        "uuid": "4499b86b_67fc653f",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 5,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "This shouldn\u0027t go into util: 1) It\u0027s only used by the standalone platform/impl code. 2) It introduces multithreading, etc., which no part of OpenScreen outside the networking code in platform/impl should have to worry about.",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 13
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af5605d7_8188199b",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "Seems like all Unsubscribes should be blocking. Meaning, is there a use case where we would want the caller to never be certain when its callback method won\u0027t be run? Such an object would have to live forever. :)",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 50,
        "endChar": 3
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f45de951_dd3baaaa",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-11T19:46:14Z",
      "side": 1,
      "message": "I don\u0027t quite see how it gets unblocked. Shouldn\u0027t it call ApplyPendingChanges?",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 26
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8cac61c_d252b21f",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "Instead of waiting for another thread to come around and call ApplyPendingChanges(), how about the other thread just hold the lock while it needs the references to the subscribers to remain valid? Then, we don\u0027t even need this condvar wait/notify mechanism.\n\nSure, the Subscribe() and Unsubscribe() calls may have to wait for a while for the consumer thread to do its work and release the lock, but that\u0027s perfectly okay. These are not \"needs to be as non-blocking and fast as possible\" operations: Instead, they are one-time startup/shutdown operations, and it\u0027s reasonable for those to be sequenced around the work happening on the consumer thread.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 7
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df5a06c3_240884aa",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "This functionality feels like private/internal logic to this class. Maybe this method should be private?",
      "range": {
        "startLine": 65,
        "startChar": 58,
        "endLine": 66,
        "endChar": 45
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca1a3c4a_21457bd5",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "1. If we\u0027re doing this, we\u0027re holding it wrong.\n\n2. In the current patch set, it doesn\u0027t seem that either Subscribe() or Unsubscribe() will ever block.",
      "range": {
        "startLine": 69,
        "startChar": 54,
        "endLine": 71,
        "endChar": 44
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50858f8a_f6e410f7",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "This will copy unless SubscriberType is a pointer. Maybe the template param should be just the class type, and the SubscriberModel code pass pointers or const-refs as appropriate?",
      "range": {
        "startLine": 83,
        "startChar": 49,
        "endLine": 83,
        "endChar": 63
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce312ef9_3eebf224",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "Suggestion: Instead of making the consumer call ApplyPendingChanges() manually, how about merging that method with this one?  Something like:\n\n  const std::vector\u003cSubscriberType\u003e\u0026 GetCurrentSubscribers() {\n    // ApplyPendingChanges code here.\n    return subscribers_;\n  }\n\nThough, per prior comments, I\u0027m not suggesting we proceed with this design. IMHO, a better way to do it is either:\n\n1. Have the consumer call a \"foreach\" method:\n\n  void ForEachSubscriber(std::function\u003cbool(SubscriberType*)\u003e op) {\n    std::lock_guard\u003cstd::mutex\u003e lock(mutex_);\n    for (SubscriberType subscriber : subscribers_) {\n      const bool should_continue \u003d op(subscriber);\n      if (!should_continue) {\n        break;\n      }\n    }\n  }\n\n2. Have the consumer hold the lock while doing an operation (e.g., select() call) on multiple subscribers at once:\n\n  std::lock_guard\u003cstd::mutex\u003e StartConsumerTransaction() {\n    return std::lock_guard\u003cstd::mutex\u003e lock(mutex_);\n  }\n\n  const std::vector\u003cSubscriberType\u003e\u0026 GetCurrentSubscribers() { ...as above... }",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 75
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff534a5d_8e975e23",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 133,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "This appears to be unused. Can we remove it?",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 133,
        "endChar": 51
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7680c095_275ad0f1",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 141,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "template \u003ctypename Key, typename Value, typename KeyEquals \u003d std::equal_to\u003cKey\u003e\u003e\n\n...and similar changes for the other templated class...",
      "range": {
        "startLine": 141,
        "startChar": 10,
        "endLine": 141,
        "endChar": 15
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fd1c70d_2ac1cbb9",
        "filename": "util/subscriber_model.h",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-11T22:05:51Z",
      "side": 1,
      "message": "OOC, do we need this separate MapSubscriberModel? Can it just be merged into SubscriberModel? Why is one or the other needed?",
      "range": {
        "startLine": 155,
        "startChar": 6,
        "endLine": 155,
        "endChar": 24
      },
      "revId": "5c97c37be6dc85acf72fe3cf8ea060d32edd237d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}