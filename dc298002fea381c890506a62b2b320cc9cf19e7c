{
  "comments": [
    {
      "key": {
        "uuid": "dec50634_b3ab7b50",
        "filename": "base/error.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "Add kCborParsing case.",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dac44e68_2b2c714e",
        "filename": "base/error.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dec50634_b3ab7b50",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d75e171_66ae7745",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "Is kNone needed once we start using ErrorOr?  (Actually, I see it\u0027s needed for is_error(), so see the discriminated union comment instead).",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ac45b6a_e9b77c06",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Need a default value for error_.",
      "parentUuid": "7d75e171_66ae7745",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9013b665_03ad9425",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "nit: Here and below, copy and move constructors aren\u0027t usually explicit.",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 10
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44026b09_fc9560f6",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9013b665_03ad9425",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 10
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0100241d_c21650c9",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "Is there a strong reason to inline these but not the corresponding constructors?",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08734d31_8ceebcd8",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0100241d_c21650c9",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47b92380_18a8a2c5",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "No const for value return.",
      "range": {
        "startLine": 40,
        "startChar": 9,
        "endLine": 40,
        "endChar": 14
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85899f18_2ba88828",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47b92380_18a8a2c5",
      "range": {
        "startLine": 40,
        "startChar": 9,
        "endLine": 40,
        "endChar": 14
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60c9eeb2_3362d2db",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "::",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f374de8d_f461c675",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60c9eeb2_3362d2db",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6312388_01c10a2b",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "nit: Allowing these to be implicit might make things like function return statements cleaner (e.g. the class comment above), but no strong opinion as it\u0027s arguably a readability trade-off.",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ca385f4_3c94604a",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "The other constructors for std::unique_ptr are mostly for handling non-default deleters, which doesn\u0027t seem like a common use case.  The calling code can always create a unique_ptr with a deleter and move it.",
      "parentUuid": "c6312388_01c10a2b",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce0d3c72_77d1947e",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "std::move(message), otherwise it\u0027s actually a copy.",
      "range": {
        "startLine": 77,
        "startChar": 66,
        "endLine": 77,
        "endChar": 73
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6084c459_a14e1128",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "message is already an rvalue reference, so this should move message to the Error ctor.",
      "parentUuid": "ce0d3c72_77d1947e",
      "range": {
        "startLine": 77,
        "startChar": 66,
        "endLine": 77,
        "endChar": 73
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f3c4ecf_decdd333",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "nit: together, these could be ErrorOr(Error::Code code, std::string message) : error_(code, std::move(message)) {}. The same goes for ErrorOr(Error) and Error(Code, std::string).",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5667ee7_0b506c69",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Sorry didn\u0027t quite follow.  A const reference can\u0027t be moved, so this passes message as a copy.",
      "parentUuid": "4f3c4ecf_decdd333",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcc39c5f_e8e6dc10",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "DISALLOW_COPY_AND_ASSIGN",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f6dd9aa_5dc6a15f",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcc39c5f_e8e6dc10",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf111466_0e65cbbd",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "Double space.",
      "range": {
        "startLine": 92,
        "startChar": 17,
        "endLine": 92,
        "endChar": 19
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca9a62b5_07d9fc3f",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf111466_0e65cbbd",
      "range": {
        "startLine": 92,
        "startChar": 17,
        "endLine": 92,
        "endChar": 19
      },
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4098c6af_75e4ce40",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "Method can be const.",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1f7bbc8_76a164a2",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4098c6af_75e4ce40",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "238a2a4a_2e883a52",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "nit: I\u0027d prefer consistent naming between the non-const rvalue-ref-returning error() and MoveValue().  Note that since you aren\u0027t returning by value, this could safely just be value() and it will continue to be valid until someone moves from it.",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0707d5a2_24adc6fc",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "238a2a4a_2e883a52",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34b4ac22_dcd8cfcf",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-25T23:55:39Z",
      "side": 1,
      "message": "Discriminated union?  Not much space saving but removes the need for Error::Code::kNone.  May enable holding some results by-value later as well, but that\u0027s just a guess.",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e3a169d_7f91f35a",
        "filename": "base/error.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-09-26T23:01:55Z",
      "side": 1,
      "message": "Could be a useful optimization, but would rather do in a separate patch.  Added a NOTE.",
      "parentUuid": "34b4ac22_dcd8cfcf",
      "revId": "dc298002fea381c890506a62b2b320cc9cf19e7c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}