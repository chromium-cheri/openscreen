{
  "comments": [
    {
      "key": {
        "uuid": "8d0b6e50_27fa2f43",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "The comment is a bit misleading, AdvanceNextFrame only updates last_frame_consumed_ in case it drops frames, otherwise, the value is unchanged",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 136,
        "endChar": 72
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05f141a1_79765ec8",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "Updated language a bit: s/should have set ___/ensures that ___ is set/",
      "parentUuid": "8d0b6e50_27fa2f43",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 136,
        "endChar": 72
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b4d9cf0_09109ba7",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "Maybe |current| or |frame_id|?",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 21
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "422d770c_e988423c",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b4d9cf0_09109ba7",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 21
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d0da02f_d3052a62",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 349,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "Maybe like this?\nreturn *GetMutableQueueEntry(frame_id);",
      "range": {
        "startLine": 348,
        "startChar": 3,
        "endLine": 349,
        "endChar": 49
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5106f323_dc4254f2",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 349,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "The problem is there is no way to de-dupe the code here without using const_cast.\n\nI used const_cast to ask the compiler to invoke the non-const method to get the const result, to avoid undefined behavior. (It\u0027s UB to do it the other way around: A const object cannot be cast to non-const and then written to.)",
      "parentUuid": "0d0da02f_d3052a62",
      "range": {
        "startLine": 348,
        "startChar": 3,
        "endLine": 349,
        "endChar": 49
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2400b43d_a6c7a9b2",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 363,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "Maybe std::upper_bound since you keep the array sorted?",
      "range": {
        "startLine": 363,
        "startChar": 25,
        "endLine": 363,
        "endChar": 37
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f70b6e08_8974c533",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 363,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "Linear search much better than binary search here; small # elements.\n\nAlso, I don\u0027t want the comparator to look at the 2nd of the tuple\u0027s components.",
      "parentUuid": "2400b43d_a6c7a9b2",
      "range": {
        "startLine": 363,
        "startChar": 25,
        "endLine": 363,
        "endChar": 37
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57347e64_144f2d2e",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "Would it make sense to prune before insertion? And to compare IDs of as_of_frame and next_frame to figure out if insertion is needed?",
      "range": {
        "startLine": 372,
        "startChar": 2,
        "endLine": 372,
        "endChar": 54
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3662c615_6a885170",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "Done (prune before insert).\n\nNote that the insertion is always required because it is always for a FrameId that would come after any that would be pruned-out. The inserted FrameId is for a frame being received (not yet consumed), while we only prune-out records needed for frames that have been consumed.",
      "parentUuid": "57347e64_144f2d2e",
      "range": {
        "startLine": 372,
        "startChar": 2,
        "endLine": 372,
        "endChar": 54
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5066b1ce_9b82633d",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "Ditto",
      "range": {
        "startLine": 373,
        "startChar": 34,
        "endLine": 373,
        "endChar": 46
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7a3d32e_cc91fff1",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5066b1ce_9b82633d",
      "range": {
        "startLine": 373,
        "startChar": 34,
        "endLine": 373,
        "endChar": 46
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a373790d_c8339a41",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 394,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "Ditto",
      "range": {
        "startLine": 394,
        "startChar": 23,
        "endLine": 394,
        "endChar": 30
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd214535_372d09e8",
        "filename": "streaming/cast/receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 394,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a373790d_c8339a41",
      "range": {
        "startLine": 394,
        "startChar": 23,
        "endLine": 394,
        "endChar": 30
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf1f4093_82831961",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-30T20:47:01Z",
      "side": 1,
      "message": "const qualifier on the function is sufficient for overload, you can have these with the same name if you want to.",
      "range": {
        "startLine": 234,
        "startChar": 0,
        "endLine": 235,
        "endChar": 55
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8389f71_4903c5e8",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-10-08T23:14:18Z",
      "side": 1,
      "message": "I only did it because I used a pointer return type instead of a reference return type. In other words, the methods seemed different enough to warrant the naming difference.\n\nI once thought the style guide said that return types cannot be non-const references. However, it seems things have changed over 9+ years. :) The problem is the new style guide discussion doesn\u0027t really address this issue any more than \"references have value syntax but pointer semantics,\" which casts caution on using them even though it doesn\u0027t seem like a solid ban.\n\nI\u0027ve asked a C++ readability expert for clarification and he said to name them the same and return a non-const reference for the mutable one.",
      "parentUuid": "bf1f4093_82831961",
      "range": {
        "startLine": 234,
        "startChar": 0,
        "endLine": 235,
        "endChar": 55
      },
      "revId": "1d6bf1e5f301352f9c9352edf45e49a169ede353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}