{
  "comments": [
    {
      "key": {
        "uuid": "5dd7b953_951affa6",
        "filename": "platform/api/power_save_blocker.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-13T20:53:52Z",
      "side": 1,
      "message": "Nit: Wrap at 80 cols",
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a873be49_97347867",
        "filename": "platform/api/power_save_blocker.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-13T20:53:52Z",
      "side": 1,
      "message": "The name I\u0027ve heard for this kind of capability on other platforms is \"WakeLock\":\n\nhttps://developer.android.com/reference/android/os/PowerManager.WakeLock\n\nhttps://developers.google.com/web/updates/2018/12/wakelock\n\nWDYT?",
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e402b8_89ddbdfa",
        "filename": "platform/api/power_save_blocker.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-06-18T22:47:22Z",
      "side": 1,
      "message": "Suggestion: Add \"Scoped\" as a prefix, to reflect the lock/unlock behavior being bound to the scope of the object (common Chromium naming thing).",
      "parentUuid": "a873be49_97347867",
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f18032a_479b9a61",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-13T20:53:52Z",
      "side": 1,
      "message": "Complex initialization is not allowed for static variables.",
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43673bc6_65181271",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-06-18T22:47:22Z",
      "side": 1,
      "message": "style: Globals should have \"g_\" prefix (and not \"_\" suffix).  ...unless you make them class static members...\n\nAlso, suggest putting these in an anonymous namespace.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 54
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc7a15a1_e39ae56a",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-13T20:53:52Z",
      "side": 1,
      "message": "Is this to run a destructor at process exit time?\nI\u0027m not sure what guarantees can be made that they will execute.",
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "040f9fce_468ebb75",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T21:25:34Z",
      "side": 1,
      "message": "Is that why? Please add a comment to state as much - I was not fully clear why just a simple unique_ptr\u003c...\u003e wasn\u0027t used",
      "parentUuid": "dc7a15a1_e39ae56a",
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7bf4b7c_540e3649",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T21:25:34Z",
      "side": 1,
      "message": "I\u0027d prefer explicitly `!NullObserver.load()` - the meaning of `!` is not 100% clear on non-primitive types",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 23
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85265adb_12ccca52",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T21:25:34Z",
      "side": 1,
      "message": "This is a race condition - 2 callers at the same time could check !wake_lock_count then create the unique_ptr\n\nNot sure this is worth adding a mutex since it doesn\u0027t actually hurt anything though. Thoughts?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 3
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f3aa454_be45bcbf",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-06-18T22:47:22Z",
      "side": 1,
      "message": "Since we\u0027re dealing with globals anyway, how about just make them private static members of PowerSaveBlocker?\n\nSide note: It may be best to have the ref-counting handled by the standalone/embedder impls, and not have a PowerManager at all. In Chromium, I think it does its own internal ref-counting to de-dupe multiple of the same \"power save blocks\" from the various product features.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 21
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a69eba94_07bbf685",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T21:25:34Z",
      "side": 1,
      "message": "Regarding the side note: what about making this a platform/api class? Then the embedder could implement it themselves if they want",
      "parentUuid": "5f3aa454_be45bcbf",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 21
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec8fd875_7a15a0bf",
        "filename": "platform/base/power_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T21:25:34Z",
      "side": 1,
      "message": "wake_lock.release()?\n\nAlso, this is the same race condition as above",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 29,
        "endChar": 14
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94b090c9_3c9e611d",
        "filename": "platform/base/power_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-06-18T22:47:22Z",
      "side": 1,
      "message": "Do we need these at all? Seems like client code should just own the PowerSaveBlocker, creating/destroying it at the right times.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 32
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddf4a547_e6c03273",
        "filename": "platform/posix/power_save_blocker.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-26T21:25:34Z",
      "side": 1,
      "message": "Same comment as in your other CL:\nLeaving PowerSaveBlocker an interface and adding:\n\n`class PowerSaveBlockerPosix : public PowerSaveBlocker {}`\n\nrather than defining PowerSaveBlocker here directly will greatly simplicy UnitTests at higher levels (since they can just define their own PowerSaveBlockerForTesting), plus potentially simplify the code here too (none of the tricks like we use in UdpSocketPosix)",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 52
      },
      "revId": "695f2392a6806b02e6c6323193b14fdec73e4552",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}