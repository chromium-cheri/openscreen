{
  "comments": [
    {
      "key": {
        "uuid": "7d9806c9_1d59c4f8",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "In unit tests, it\u0027s common to import names from testing:: with using to make statements like these shorter and more readable.\n\nAlso, I think WithArgs here is redundant, as Invoke will already get called with the arguments to the mock.",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1bb749f_d21db367",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "Agreed. Added using statement.",
      "parentUuid": "7d9806c9_1d59c4f8",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a021461f_d8d97248",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "Usually anonymous namespaces go at the top of the file.",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27957677_36045382",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "Yeah. I wrapped it here since it needs MockMessageCallback to be declared, and Yuri suggested that this go in an anonymous namespace to avoid polluting.\n\nI\u0027m going to side step the issue by making it a member method of MockMessageCallback.",
      "parentUuid": "a021461f_d8d97248",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c24f34e9_0d5fd4cb",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 140,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "Where does this return value go?",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afa7b646_c7b19708",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 140,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "This return value is primarily necessary because the lambda must have the same signature as OnStreamMessage. It is returned to the class that ends up fulfilling this mock call, which I believe is MessageDemuxer::HandleStreamBuffer. This class uses the return value to determine if there was an error or not, so this return actually does make a major difference.\n\nPlus, if you don\u0027t return it, you get:\n\n../../third_party/googletest/src/googlemock/include/gmock/gmock-generated-actions.h:164:19: error: no viable conversion from returned value of type \u0027void\u0027 to function return type \u0027openscreen::ErrorOr\u003cunsigned long\u003e\u0027",
      "parentUuid": "c24f34e9_0d5fd4cb",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "998ef267_739dfc65",
        "filename": "api/impl/presentation/url_availability_requester_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 140,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-09T00:18:18Z",
      "side": 1,
      "message": "Ah, that makes sense.  Thanks for the explanation.",
      "parentUuid": "afa7b646_c7b19708",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1391c27_6300e7b3",
        "filename": "api/impl/quic/quic_server_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "Similar comment about WithArgs (I could be wrong on this though)",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ff1cabd_edc2193c",
        "filename": "api/impl/quic/quic_server_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "You are right--it\u0027s just a bad practice from the example code I used :).",
      "parentUuid": "c1391c27_6300e7b3",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c66577df_cd85b3be",
        "filename": "api/impl/quic/quic_service_common.cc",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "Can you be more specific?  Is the leak that the connection was not closed before this dtor was called, or is there a potential to leak a QuicProtocolConnection and not have it closed/destroyed at all?",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8fb5b71_0db4da6c",
        "filename": "api/impl/quic/quic_service_common.cc",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "I was just taking ownership of the todo. I fixed the leaking issue using the address sanitizer output, so I believe this is resolved now.",
      "parentUuid": "c66577df_cd85b3be",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a09d801_2fd926aa",
        "filename": "api/impl/quic/testing/fake_quic_connection_factory.cc",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "s/connectee/remote_connection/g perhaps?",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2d84cef_55b59e2c",
        "filename": "api/impl/quic/testing/fake_quic_connection_factory.cc",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "0a09d801_2fd926aa",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3a8ec5_f979e5ee",
        "filename": "api/impl/quic/testing/quic_test_support.cc",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-08T06:33:08Z",
      "side": 1,
      "message": "Is it important that the controller and receiver have separate instances of FakeClock?\n\nIf so, can you give them distinct variable names?  (Reusing variable names is somewhat discouraged.)",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d594ce8_7c46d844",
        "filename": "api/impl/quic/testing/quic_test_support.cc",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-08T23:03:00Z",
      "side": 1,
      "message": "No, it isn\u0027t. Cleaning up.",
      "parentUuid": "df3a8ec5_f979e5ee",
      "revId": "9e000aa94cd8fae08e22535a0a394c99f3742e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}