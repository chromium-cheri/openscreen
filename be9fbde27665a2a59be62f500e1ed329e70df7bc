{
  "comments": [
    {
      "key": {
        "uuid": "ff87f7f8_148992ce",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "\u0027mdns_records\u0027 or \u0027mdns_data\u0027 are little more obvious names for these files for folks who aren\u0027t as familiar with DNS jargon.\n\nAlso, strictly speaking, this code is not specific to mDNS.  It\u0027s implementing DNS RFCs.  So maybe \u0027dns_records.cc\u0027?\n\nI don\u0027t feel strongly about this though.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51570269_8141368a",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "I\u0027m not sure yet where mdns record/question/message types will go. If I put them in this file, I\u0027ll rename it to mdns_data or mdns_records in the next PR.",
      "parentUuid": "ff87f7f8_148992ce",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ee23ba7_efa56b6a",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-07T23:34:41Z",
      "side": 1,
      "message": "I like \"mdns_records\", or maybe just mdns/records.cc or keep it as mdns_parsing?\n\nI\u0027d be fine with any of those.",
      "parentUuid": "ff87f7f8_148992ce",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5494235c_4c7058a3",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-11T19:28:01Z",
      "side": 1,
      "message": "Fine to rename in a different patch once we see what the final contents look like.",
      "parentUuid": "9ee23ba7_efa56b6a",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd178bd4_e78356f0",
        "filename": "cast/common/mdns/mdns_rdata.cc",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Consider using std::all_of here:\n\nhttp://www.cplusplus.com/reference/algorithm/all_of/",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7002473_0b14365a",
        "filename": "cast/common/mdns/mdns_rdata.cc",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "std::all_of passes const std::string\u0026 to the predicate, which makes it very inconvenient to compare the object to an object at the same index in another collection.\nstd::equal does the trick",
      "parentUuid": "dd178bd4_e78356f0",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4746e2e9_2c58bafe",
        "filename": "cast/common/mdns/mdns_rdata.cc",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Consider adding a std::array\u003cuint16_t, 5\u003e kRawRecordTypes, then you can do\n\nfor (auto record_type : kRawRecordTypes) {\n    OSP_DCHECK_NE(type, record_type);\n}\n\nI would generally vote to separate data (in this case, record types) from algorithms (in this case, just dchecking).",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2144b1c_713effe1",
        "filename": "cast/common/mdns/mdns_rdata.cc",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Done with std::none_of to not leave an empty loop as a homework to the compiler.",
      "parentUuid": "4746e2e9_2c58bafe",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7ae653a_ad15a836",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "Please update.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "610aca14_09bcee29",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7ae653a_ad15a836",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cfe8035_81e45a42",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "If these are all default, and just standard constructors/assigners, do you actually need them at all?\n\nhttps://en.cppreference.com/w/cpp/language/move_constructor\n\nIf no user-defined move constructors are provided for a class type (struct, class, or union), and all of the following is true:\n\nthere are no user-declared copy constructors;\nthere are no user-declared copy assignment operators;\nthere are no user-declared move assignment operators;\nthere are no user-declared destructors;\nthe implicitly-declared move function Object() { [native code] } is not defined as deleted due to conditions detailed in the next section,\n(until C++14)\nthen the compiler will declare a move function Object() { [native code] } as a non-explicit inline public member of its class with the signature T::T(T\u0026\u0026).",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "886422b6_7e2313ba",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Here and below we absolutely do not need these, as this is the default behavior in C++, same as if nothing is declared. However, our style guide insists:\n\n\"A class\u0027s public API should make explicit whether the class is copyable, move-only, or neither copyable nor movable. Support copying and/or moving if these operations are clear and meaningful for your type.\"\n\n\"Every class\u0027s public interface should make explicit which copy and move operations the class supports. This should usually take the form of explicitly declaring and/or deleting the appropriate operations in the public section of the declaration.\"",
      "parentUuid": "8cfe8035_81e45a42",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d674c68_80baaba0",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Prefer absl::string_view, esp. since you just dump to a stream (which absl::string_view does just fine).",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "093cd06d_10a9b035",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d674c68_80baaba0",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17079c31_a2624319",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "This seems to be a longer way of saying:\n\nstruct RData {\n  uint16_t type;\n  std::vector\u003cuint8_t\u003e rdata;\n}\n\nDoes this need to be a class?\n\nSimilar comments for the other record classes defined here that have trivial getters, setters, ctors and no vtable.\n\nhttps://google.github.io/styleguide/cppguide.html#Structs_vs._Classes\n\nBut if you would end up with a mix of structs and classes, prefer classes for all, so callers don\u0027t have to remember which is which.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "061cd3c9_54bd1d95",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "I\u0027ll explore a bit if it looks nicer as structs. Some things, like max_wire_size() and comparison operators are not supposed to be in structs as per style guide. Another thing I could do to make the code a bit smaller is to have proper non-default constructors and get rid of all the setters. This way if we have an object, it\u0027s a properly valid one, so we\u0027d be able to do fewer checks in other places. Thoughts?",
      "parentUuid": "17079c31_a2624319",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80102f96_dfaec2c6",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-07T23:34:41Z",
      "side": 1,
      "message": "+1\n\nThe only thing left is max_wire_size(), but that could be replaced with a MaxWireSize function.",
      "parentUuid": "17079c31_a2624319",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ddc373b_17bae7e8",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-11T19:28:01Z",
      "side": 1,
      "message": "I\u0027m in favor of leaving them as classes with proper constructors, const data members and setters removed",
      "parentUuid": "80102f96_dfaec2c6",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a842d48_6fc00ae5",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-12T19:28:22Z",
      "side": 1,
      "message": "Left as classes with non trivial constructor and no setters. Making members const makes classes non-movable and non-copy-assignable.",
      "parentUuid": "7ddc373b_17bae7e8",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c455e8b6_e4939c48",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Maybe not necessary, but consider adding an abstract interface that exposes a method:\n\nstruct RecordData {\nvirtual size_t max_wire_size() const \u003d 0;\n}\n\nThen any serializing library could calculate sizes without needing to know the specific record type.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "748d2a99_0febfca9",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Not needed right now, but I\u0027ll add it if necessary.",
      "parentUuid": "c455e8b6_e4939c48",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5a783c0_594aabd1",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "ipv4_address_",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158f7436_3d5791bc",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5a783c0_594aabd1",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecf922fd_8ee08de6",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 169,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "You could CHECK() that the ip_address is the correct type here.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b5372a4_945e3366",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 169,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecf922fd_8ee08de6",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c02ca38_e1d7d2c0",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "ipv6_address_",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a048177f_d49bc985",
        "filename": "cast/common/mdns/mdns_rdata.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c02ca38_e1d7d2c0",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53ad5ffc_c25027ae",
        "filename": "cast/common/mdns/mdns_rdata_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Nit: test name is vague. Looks like you are checking that the labels work properly?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02b945ba_3388806d",
        "filename": "cast/common/mdns/mdns_rdata_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53ad5ffc_c25027ae",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02fa09a7_387315e2",
        "filename": "cast/common/mdns/mdns_rdata_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 269,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Uncomment and fix, or delete please.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90162158_8cbfd1b6",
        "filename": "cast/common/mdns/mdns_rdata_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 269,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02fa09a7_387315e2",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49bc4cdb_ad7fb1e5",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "Consider adding methods to the reader class to improve readability and reduce repetition:\n\nvoid Mark()\nbool Check(size_t offset) // returns true if offset bytes were read since Mark()\nvoid Done()   // clears Mark()\nvoid Revert() // resets current to Mark()\n\nFor bonus points, declare an object with this API that will assert if it goes out of scope without Done() or Revert() being called.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d02e5c6b_22071fce",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Mark/Done/Revert would have to maintain a stack for nested calls to Read*/Write*, current examples are DomainName and CharacterString, and all of the RDATA classes here will be part of bigger data entries as well.\n\nWhat do you think about the following approach:\n\nAdd a transaction class that accept the pointer to the MdnsReader and stores current() on construction. When transaction object goes out of scope (e.g. we return false because we failed to read something) it rolls back MdnsReader. We call Commit() on the transaction before returning true to make it not roll back MdnsReader.\n\nThere\u0027s only one \"return true\" for success, but many early outs for failures, so this will simplify the code somewhat, but not much.\n\nMdnsReader::Transaction ta(this);\n\nif (Read() \u0026\u0026 Read() \u0026\u0026 Read()) {\n  ta.Commit();\n  return true;\n}\n\nreturn false;",
      "parentUuid": "49bc4cdb_ad7fb1e5",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549e81bf_6984e97f",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-11T19:28:01Z",
      "side": 1,
      "message": "Yeah, that sounds pretty good, although I believe \"transaction\" has a specific meaning for DNS. So maybe call the object ReadPosition or something like that.",
      "parentUuid": "d02e5c6b_22071fce",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf0c953_1bd9adc5",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-12T19:28:22Z",
      "side": 1,
      "message": "Merged Cursor change in and updated all of the PR to use it",
      "parentUuid": "549e81bf_6984e97f",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f2d4c83_093e3ee5",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "!bytes_consumed\n\n?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40a857e3_89d72acc",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "!bytes_consumed probably better expresses \"not previously set\" in this case. Done here and in the second spot.",
      "parentUuid": "1f2d4c83_093e3ee5",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "990d9370_55d852ca",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Nit: doesn\u0027t need to be else, since the if returns. I would vote for removing the else and adding a new line... this method is super dense.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aacd813a_2c6a3130",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "In the else statement based on previous feedback to accentuate that we return false in case label_type \u0026 kLabelMask is neither a pointer label nor a direct label.",
      "parentUuid": "990d9370_55d852ca",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cde4af1d_02a84c4b",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "So, we AND the label_type with the label mask to get the actual label, and then take the inverse of the label mask and AND it with label_type to get the length of the label?\n\nCan you add a comment explaining why this works? I\u0027m assuming it\u0027s part of the spec, but here it\u0027s just black bitwise magic.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3df51c31_3c7ea083",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Moved all of bit manipulation to mdns_constants, right were the explanation of what bits mean is.",
      "parentUuid": "cde4af1d_02a84c4b",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15e5e55b_6612ef8f",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Nit: OSP_DCHECK_GE",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d3541a_6ee6883d",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "label_length is unsigned, so the check is for a value greater than 0, I think you meant OSP_DCHECK_GT, not OSP_DCHECK_GT. Done.",
      "parentUuid": "15e5e55b_6612ef8f",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7d9ac8d_14313791",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 149,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Seems like a lot of boilerplate. Can you streamline it down a little bit?\n\nEven if you just added a method that did something like this:\n\ntemplate\u003ctypename T\u003e\nbool MdnsReader::ReadData(T* out, std::function\u003cvoid(T*, uint16_t)\u003e reader) {\n    OSP_DCHECK(out);\n    const uint8_t* const rollback_position \u003d current();\n    uint16_t record_length;\n    bool succeeded \u003d false;\n    if (Read\u003cuint16_t\u003e(\u0026record_length)) {\n        succeeded \u003d reader(out, record_length);\n    }\n    \n    if (!succeeded) {\n        set_current(rollback_position);\n    }\n\n    return succeeded;\n}\n\nAnd wrote reader methods for each type, I would love to see less copypasta.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1452b4ef_ccc00c73",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 149,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "This somewhat depends on if we decide to go with struct vs class and a decision on how we do rollback, leaving this for later.",
      "parentUuid": "d7d9ac8d_14313791",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56ca57f9_ff2b71f0",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 149,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-11T19:28:01Z",
      "side": 1,
      "message": "Let\u0027s see what it looks like with the transaction object and decide if we need additional simplification.  I\u0027m not generally a fan of templates just to reduce code duplication unless you are actually using them for type polymorphism.",
      "parentUuid": "1452b4ef_ccc00c73",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40a673dd_5dca84be",
        "filename": "cast/common/mdns/mdns_reader.cc",
        "patchSetId": 6
      },
      "lineNbr": 149,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-12T19:28:22Z",
      "side": 1,
      "message": "I extracted reading and writing IPAddress into a function that\u0027s used in both A and AAAA records.",
      "parentUuid": "56ca57f9_ff2b71f0",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d566d1_919f27db",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Update includes... just pushed up a change so this should be the following:\n\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62df2e7e_9b07fd25",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d566d1_919f27db",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35594ab7_ae1b41ef",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "constexpr?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b93b7270_44e9bebc",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Yes, done here and for all other occurrences across test cases.",
      "parentUuid": "35594ab7_ae1b41ef",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8175e21_6bbd96aa",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Nit: remove unnecessary newline",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "169319bf_a9c531a0",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Added intentionally to separate the comment from the test directly below it, as the comment applies to all tests that cover failure cases. Clarified the comment to explicitly mention multiple tests below.",
      "parentUuid": "f8175e21_6bbd96aa",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c6c2351_0083725c",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "What does the 0x03 mean, just the size of the domain name? Is this documented anywhere?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "766616e6_7989e62f",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "0x03 is longer that the available data intentionally. We expect a failure here. Added a comment.",
      "parentUuid": "5c6c2351_0083725c",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8299ff54_9938657d",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Why is clang-format off here and on for kMessage above?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f77ac528_98c5249a",
        "filename": "cast/common/mdns/mdns_reader_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Unfortunately, clang-format insists on a less-readable representation of test data here and in a few other places. Only sprinkled it in a couple places were results of clang-format were undesirable.",
      "parentUuid": "8299ff54_9938657d",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da1bd7d8_8c6e1b5e",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Can you do something less explicit here, like expose the std::vector of Labels on DomainName and do something like:\n\nHashState::combine(H, const Args\u0026...): Combines an arbitrary number of values into a hash state, returning the updated state. Each of the Args types must be hashable.\n\nhttps://abseil.io/docs/cpp/guides/hash\n\n?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c371ad8_859d8738",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Yeah, I wanted to use that one, but it doesn\u0027t do what I need.\nIf I wanted to have a hashable DomainName, that would be the way to go. Compression algorithm uses hashes of each subname to look-up how much can be compressed. This is not expressible through public absl hash API right now as far as I can tell.",
      "parentUuid": "da1bd7d8_8c6e1b5e",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f16181f2_bdaf4fed",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "The only type passed is uint16_t.  Does this need a template parameter?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30e10b56_8cddf707",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done. We do not need a template right now.",
      "parentUuid": "f16181f2_bdaf4fed",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3385434e_7fd2d29e",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-06-07T20:42:14Z",
      "side": 1,
      "message": "Nit: dense bitwise magic. Can you explain or split up into multiple lines?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a70bd9fd_609ff193",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T23:21:31Z",
      "side": 1,
      "message": "Moved bit manipulation to mdns_constants.h where the explanation and the constants live.",
      "parentUuid": "3385434e_7fd2d29e",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89e5d04c_cd8ae6b9",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "Can we update the writer API to take a size_t and do the assertion/conversions internally?\n\nI.e. WriteAsUint16(size_t value)",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3070780c_a5301175",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "I don\u0027t want to promote every integer we write to size_t to only do an immediate narrowing conversion after that, I think it\u0027s better to enforce size of rdata in the RawRecordRdata itself. What\u0027s your opinion on this?",
      "parentUuid": "89e5d04c_cd8ae6b9",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b616d24_7425e670",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-11T19:28:01Z",
      "side": 1,
      "message": "What about having rdata.size() return a uint16_t since it can never exceed that size anyway?",
      "parentUuid": "3070780c_a5301175",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a311531d_c1cfa08e",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-12T19:28:22Z",
      "side": 1,
      "message": "That\u0027s a great suggestion. Done.",
      "parentUuid": "0b616d24_7425e670",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46b0451b_9e30e191",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 203,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "I think this would be clearer as a range loop with an early return if any of WriteCharacterString() fail.",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86d35825_d6ae93e7",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 203,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done. I had it as loop before going with all_of, couldn\u0027t decide which one I like more.",
      "parentUuid": "46b0451b_9e30e191",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40b0bda3_7a1077b8",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 207,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "Typo in length",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe5903bf_a9262b79",
        "filename": "cast/common/mdns/mdns_writer.cc",
        "patchSetId": 6
      },
      "lineNbr": 207,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40b0bda3_7a1077b8",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be55d7d1_5e8049c6",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "absl::string_view to handle const char* as well?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4127661c_24cb2cdf",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be55d7d1_5e8049c6",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd879825_29b68be9",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-06T23:51:39Z",
      "side": 1,
      "message": "Presumably libcast will be generating the data to be written into this API; if we\u0027re unable to serialize it into DNS records, there is a serious problem earlier in the code.\n\nI haven\u0027t seen the code calling this, but I wonder how it could handle an error writing a record?",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50d5466e_fc338664",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-07T20:20:43Z",
      "side": 1,
      "message": "I don\u0027t know yet what calling code does on failure because I haven\u0027t written it yet. Previous implementation simply logged the error. If we keep RDATA as classes, add proper constructors instead of setters and add more checks, that would help pinpoint the issue in the calling code compared to a single point of failure in Write*. This would also leave a single major reason for Write* to fail, an insufficient buffer. Then on failure calling code can try to allocate a bigger buffer and try writing again. Thoughts?",
      "parentUuid": "bd879825_29b68be9",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a583bd35_f21a65db",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-11T19:28:01Z",
      "side": 1,
      "message": "Let\u0027s see what the code looks like with the rdata class checks in place. If buffer size is the only failure point, then the caller can reject the operation or CHECK-fail depending on how strict it is.  If there are additional failure modes, let\u0027s return an Error enum.   Sound good?",
      "parentUuid": "50d5466e_fc338664",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e68e1a_70525aa0",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-12T19:28:22Z",
      "side": 1,
      "message": "If we decide to change the interface for reader to return Error instead of bool and for writer to return ErrorOr\u003cT\u003e instead of bool, I\u0027d like to do this as a separate PR.",
      "parentUuid": "a583bd35_f21a65db",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26e972a7_ae468a11",
        "filename": "cast/common/mdns/mdns_writer.h",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-13T20:57:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "83e68e1a_70525aa0",
      "revId": "be9fbde27665a2a59be62f500e1ed329e70df7bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}