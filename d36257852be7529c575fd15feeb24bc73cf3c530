{
  "comments": [
    {
      "key": {
        "uuid": "e09422ec_b8234709",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Is there a place that maps each message type and the namespace it belongs to?  (See the namespace constants at L15-L29.)\n\nThat mapping would help when constructing messages, or validating incoming messages.\n\nNo changes requested - just curious.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2a65297_73973de8",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "For the most part, the type+namespace are typically bundled in Create*() functions that return a complete CastMessage structure from only a few relevant variables.  There\u0027s nothing that currently adds validation to incoming messages.",
      "parentUuid": "e09422ec_b8234709",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a10ab93_45b8c75f",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Ok, I think validation of incoming messages would be a useful enhancement to add to the backlog.  At that point we should consider having a data structure to hold the mapping, versus hard coding it in two places.\n\nDo you mind filing a enhancement issue and linking it as a TODO here?",
      "parentUuid": "e2a65297_73973de8",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8c3cdb5_dc3dc8e6",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a10ab93_45b8c75f",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ebe50b3_6c500a15",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Super nit: consistency with trailing periods",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f54eaa_47dfd042",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ebe50b3_6c500a15",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58b0b309_8f0587d8",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Error",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5077a53d_a4d9e30c",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58b0b309_8f0587d8",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "908375ce_36f2f60b",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "jrw@ wrote a helper class in Chromium called EnumTable to simplify string-to-enum mappings.\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:components/cast_channel/enum_table.h\n\nWould something like that be useful here?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95648f66_17f35a70",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Yes, we can also port that.  It\u0027s most useful for the string-\u003eenum conversion though, which isn\u0027t done in this CL.  Added a TODO for that.",
      "parentUuid": "908375ce_36f2f60b",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d99ed181_2e64fa62",
        "filename": "cast/common/channel/testing/fake_cast_socket.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "local_endpoint / remote_endpoint ?\n\nAlso, can you document the local_id/remote_id parameters?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a8a1c1f_58b11ee5",
        "filename": "cast/common/channel/testing/fake_cast_socket.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d99ed181_2e64fa62",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d03edb_7e0f9c34",
        "filename": "cast/common/channel/testing/fake_cast_socket.h",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "local_endpoint / remote_endpoint",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6586704e_5304b2db",
        "filename": "cast/common/channel/testing/fake_cast_socket.h",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4d03edb_7e0f9c34",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e7bf6ca_b9bae7f5",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2020-02-06T01:05:51Z",
      "side": 1,
      "message": "Bikeshedding: IIUC we\u0027re using \"sinks\", \"devices\", and \"services\" (and maybe \"receivers\" too?) to mean the same thing in different contexts. I personally find \"services\" the most confusing and if it were up to me I think we\u0027d just use \"sinks\" everywhere, but maybe \"services\" makes sense from the service discovery perspective.\n\nAre we going to be making a distinction that a sink is a MR concept and a device is a libcast concept?",
      "range": {
        "startLine": 35,
        "startChar": 43,
        "endLine": 35,
        "endChar": 50
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01026525_de47c94f",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T00:38:44Z",
      "side": 1,
      "message": "My contributions to painting the bike shed:\n\nCast terminology is oriented around \"sender\" and \"receiver\" and they are also used somewhat in OSP, so for OSL library code I would prefer those by default.\n\n\"sinks\"/\"sources\" are used by the Media Router for its generic APIs across all types of features/screens/targets.  I haven\u0027t seen them used in the OSL yet and I\u0027d rather keep it that way. \n\nCastMediaSource isn\u0027t part of this patch, but we might want to take a look at renaming it.\n\n\"device ID\" is another Cast term and I\u0027m fine with saying a Cast receiver has a device ID.",
      "parentUuid": "8e7bf6ca_b9bae7f5",
      "range": {
        "startLine": 35,
        "startChar": 43,
        "endLine": 35,
        "endChar": 50
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7923aedb_991e2eb2",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "\u003e Are we going to be making a distinction that a sink is a MR concept and a device is a libcast concept?\n\nThat\u0027s my preference but I don\u0027t feel strongly about any of these naming questions (other than I agree about \"services\" being limited to DNS-SD, so ServiceInfo might warrant a rename).",
      "parentUuid": "01026525_de47c94f",
      "range": {
        "startLine": 35,
        "startChar": 43,
        "endLine": 35,
        "endChar": 50
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1359b22e_0e8db2fb",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Current code looks OK except I would substitute \"receiver\" for device, while saying a receiver has a \"device ID.\"\n\nAgree that ServiceInfo should be renamed to e.g. CastReceiverInfo",
      "parentUuid": "7923aedb_991e2eb2",
      "range": {
        "startLine": 35,
        "startChar": 43,
        "endLine": 35,
        "endChar": 50
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d672de6d_e426c198",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "If we have a cached empty list, does that mean that all known receivers are kUnavailable or that some might be kUnknown?\n\nIf the former, it should be safe to return a cached empty list as we are certain that no receivers have the app available.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fe2934b_2e69880e",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "It\u0027s the latter; this may be empty if some devices are unknown.",
      "parentUuid": "d672de6d_e426c198",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fab2371_b893f8f9",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Ok, then delaying the callback seems fine.",
      "parentUuid": "8fe2934b_2e69880e",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae275ced_4bc5f6d3",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "Even if it won\u0027t matter because the app availablity response is async, I would slightly prefer that callback registration happens before we send off new queries (just in case there is a synchronous path possible in the future).",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef88b4c0_90d9fecc",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ae275ced_4bc5f6d3",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efe6b5cb_1d1468c9",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "I didn\u0027t quite follow this.  If we are removing a device why do we need to update its queries? Don\u0027t we just cancel any queries in progress?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f80670e1_2dcfaa83",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "For example, if that device was the last one available for a particular source, we need to report that source as unavailable.",
      "parentUuid": "efe6b5cb_1d1468c9",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04cb0083_804b7c1a",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Got it.  My confusion was that UpdateAvailabilityQueries is not actually modifying the queries, it\u0027s firing the callbacks associated with existing queries.  Maybe it could use a better name?",
      "parentUuid": "f80670e1_2dcfaa83",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84ceea9e_c950f7e2",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2020-02-06T01:05:51Z",
      "side": 1,
      "message": "In the original Chromium code, we use a weakptr here. Should we not do so here as well? Or are we enforcing some destruction ordering?",
      "range": {
        "startLine": 100,
        "startChar": 9,
        "endLine": 100,
        "endChar": 14
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ba4a48b_140cdb44",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "I should\u0027ve left a TODO because you\u0027re right, _this_ one needs a weakptr.  It\u0027s currently hidden in //platform/impl though so I was hoping to move it as a separate CL.  I added a TODO and I\u0027ll put that CL ASAP in the meantime.",
      "parentUuid": "84ceea9e_c950f7e2",
      "range": {
        "startLine": 100,
        "startChar": 9,
        "endLine": 100,
        "endChar": 14
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3470fd98_ddccb219",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "WeakPtr support added.",
      "parentUuid": "0ba4a48b_140cdb44",
      "range": {
        "startLine": 100,
        "startChar": 9,
        "endLine": 100,
        "endChar": 14
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec799eef_5e40bc66",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "ISTM that the AvailabilityTracker could have its own clock instance to timestamp entries, but I don\u0027t feel strongly about it.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0981730_f0ab26d6",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "I feel it\u0027s not any clearer and it\u0027s just an extra copy of the function pointer.",
      "parentUuid": "ec799eef_5e40bc66",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e589efb_40dd7bd1",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "How does AvailabilityTracker cache results?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "002917cf_52f4d2f8",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "UpdateAppAvailability above calls the tracker\u0027s UpdateAppAvailability, where it then stuffs that info into a map.  This persists until new availability info is received or the device is removed.",
      "parentUuid": "2e589efb_40dd7bd1",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb79f155_f1f3dd0e",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "Is this logic borrowed from Chrome?  There is probably some room for slight improvement by using an exponential backoff; some freshly booted devices respond with unavailable right away, then will respond with available 10-30 seconds later after they\u0027ve talked to DCS.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a89bb841_6f0f3d32",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Yes, basically copy-paste from Chrome.  I\u0027ll add a TODO to consider exponential backoff in the future.",
      "parentUuid": "fb79f155_f1f3dd0e",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fe778bf_736fe55c",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "Is there a background task to re-query Unknown/Unavailable entries or do we rely on the client calling Refresh()?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3f7e347_8b90033a",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "There\u0027s no background task but AFAICT there isn\u0027t an automatic refresh in Chrome either?  I will keep looking + touch base with Takumi.",
      "parentUuid": "3fe778bf_736fe55c",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0fbc863_84367e91",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Feel free to add a TODO/NOTE.  In general we want to make sure that unknown/unavailable responses get checked periodically so that transient states don\u0027t make a receiver permanently unavailable.",
      "parentUuid": "f3f7e347_8b90033a",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0163520_1158f846",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0fbc863_84367e91",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "910bc95c_2b84fa4a",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "In general, we shouldn\u0027t use the lack of callbacks to erase any knowledge about availability.  We *could* use this opportunity to purge kUnknown entries but that seems like a premature optimization.\n\nHowever a zero-callback entry should not generate any new queries (either via refresh, or periodic background task).",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8839fa4_7a8d050a",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "This doesn\u0027t purge availability knowledge.  UnregisterSource just prevents the tracker from ever _returning_ sources we\u0027re not interested in (e.g. your last point).",
      "parentUuid": "910bc95c_2b84fa4a",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1447394_9abdcedb",
        "filename": "cast/sender/cast_app_discovery_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "a8839fa4_7a8d050a",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28cb28af_67bd9fba",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-07T01:11:13Z",
      "side": 1,
      "message": "If we get a definite kUnavailable response, then that\u0027s unlikely to change for some time (it  requires a device reboot or poll of its configuration data).",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c184fe8_8928bed4",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "The caller doesn\u0027t know which it was, and this is both an existing API and existing behavior.  Do you want that added to the comment?",
      "parentUuid": "28cb28af_67bd9fba",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9637912_46a74893",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "On further thought, I think the current behavior is fine.  Unavailable responses are not the common case so it should be fine to re-query them by default.",
      "parentUuid": "2c184fe8_8928bed4",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d68efd1f_58254bf2",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Is |this| registered as an observer through some interface, or are these just called directly by the object\u0027s owner?\n\nIt doesn\u0027t matter much either way, but usually I see \"OnFoo\" methods have a level of indirection.\n\nWhile direct calls would be named AddOrUpdateDevice(), RemoveDevice().",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "987e9d75_c8554099",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "There\u0027s no observer interface.  Renamed imperatively.",
      "parentUuid": "d68efd1f_58254bf2",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7836abde_1a1eb1de",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Nit: |socket| isn\u0027t a param.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "019ce238_86c039df",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7836abde_1a1eb1de",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87422e15_5073bc7d",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "What are the keys here?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d97a1a04_a67c228d",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Source IDs, added to comment.",
      "parentUuid": "87422e15_5073bc7d",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67e3b900_09e55938",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "source_id is from the CastMediaSource right?  Maybe \"media source ID\" to be more specific.",
      "parentUuid": "d97a1a04_a67c228d",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5986434_6480c8d7",
        "filename": "cast/sender/cast_app_discovery_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67e3b900_09e55938",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67690df1_30de7f71",
        "filename": "cast/sender/cast_platform_handler.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2020-02-06T01:05:51Z",
      "side": 1,
      "message": "Does this not need to be a weak ptr?",
      "range": {
        "startLine": 75,
        "startChar": 7,
        "endLine": 75,
        "endChar": 11
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef365f8d_c62f3976",
        "filename": "cast/sender/cast_platform_handler.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "No.  If |this| were destroyed, that would include destroying the Alarm (via |pending_requests|) which cancels the task.",
      "parentUuid": "67690df1_30de7f71",
      "range": {
        "startLine": 75,
        "startChar": 7,
        "endLine": 75,
        "endChar": 11
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "472daff1_f26fe514",
        "filename": "cast/sender/cast_platform_handler.h",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-30T01:15:14Z",
      "side": 1,
      "message": "This _could_ be in a separate CL but leaving it here for context for now.  LMK if you\u0027d prefer it to be split off.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79de9569_142b4997",
        "filename": "cast/sender/cast_platform_handler.h",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "I\u0027m always a fan of smaller CLs to review, so yes I\u0027d prefer to split it off.",
      "parentUuid": "472daff1_f26fe514",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9560f7d4_5c886e47",
        "filename": "cast/sender/channel/message_util.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Is this possible in normal usage?  I suppose the app_id could be non-serializable?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a86f486_b17800a6",
        "filename": "cast/sender/channel/message_util.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "No I don\u0027t see how this would happen normally.",
      "parentUuid": "9560f7d4_5c886e47",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10a93f36_e19a5a0c",
        "filename": "cast/sender/public/DEPS",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-01-30T01:15:14Z",
      "side": 1,
      "message": "This is for Cast\u0027s ServiceInfo struct.  Should that be in public/ or should there be an adapting struct in the middle?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92b4bf9a_07410d9e",
        "filename": "cast/sender/public/DEPS",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Let\u0027s move it to cast/common/public.",
      "parentUuid": "10a93f36_e19a5a0c",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2859b4e_bb46bf8e",
        "filename": "cast/sender/public/DEPS",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92b4bf9a_07410d9e",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5020cab4_fc191ae1",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Is this used (other than inside the definition of DeviceQueryCallback?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a94252e8_9e7bc780",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "No, removed.",
      "parentUuid": "5020cab4_fc191ae1",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ded6f455_e0ca760f",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "AvailabilityCallback?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "702708da_1f30da5f",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ded6f455_e0ca760f",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6907fbc3_01f6a298",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "ISTM that only implementations of CastAppDiscoveryService need to use this ctor; maybe make it private and have them friend Subscription?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87070d6f_1c99607e",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "I don\u0027t think this has much potential for (accidental) misuse, and moving it down would still require a private forward declaration above, which is unusual.",
      "parentUuid": "6907fbc3_01f6a298",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ecd552_c68d18cd",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "I don\u0027t think a private constructor requires a forward declaration?",
      "parentUuid": "87070d6f_1c99607e",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "791d1082_c44d4cb9",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "Ah, I see.  I thought you were suggesting moving the whole class down.  In retrospect, that doesn\u0027t even make sense for other reasons.  Done but it does require jumping through more hoops.",
      "parentUuid": "61ecd552_c68d18cd",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84aa393f_5f12cc07",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2020-02-06T01:05:51Z",
      "side": 1,
      "message": "Nit: const?",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6f6ebf8_c8d6290b",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84aa393f_5f12cc07",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75f8f443_2411b3c0",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "If the CADS is destroyed with any outstanding Subscriptions, then there will be a UAF.  Since the caller owns the Subscriptions, best you can do is keep a counter and CHECK-fail?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fc7f86b_4715820c",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "If we keep unique_ptr\u003cSubscription\u003e, each one will have a stable address so we can keep raw pointers in DCHECK cases.  Then we could print all the IDs that are outstanding, or even the source\u0027s with which they\u0027re associated.\n\nFor now, I just added a CHECK that the queries are empty.",
      "parentUuid": "75f8f443_2411b3c0",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e7e60d_5cbbf477",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5fc7f86b_4715820c",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06ab2a22_2f82561d",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "A few points that could be clarified in the comments:\n\n1. Is there any guarantee about when the callback will be invoked first (i.e. with a cached list)?\n2. Will the callback ever be invoked with an empty list?\n3. Will the device list always be different with each invocation?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c392d15_f1aa79bf",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "1. Already addressed?\n2. Done.\n3. Done.",
      "parentUuid": "06ab2a22_2f82561d",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d621a89d_1249b113",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "1. StartObservingAvailability() ?\n\n2. If |Subscription| is move-only, does it need to be returned by unique_ptr?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cbebfa1_40b93726",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "1. Done.\n2. Subscription is immutable, not move-only.  It _could_ be move-only to avoid unique_ptr.  Preference?",
      "parentUuid": "d621a89d_1249b113",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebc1857_051e100c",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Preference for move-only unless there\u0027s a need for stable pointers or passing a null unique_ptr.",
      "parentUuid": "7cbebfa1_40b93726",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7688e993_cdc9ad15",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ebc1857_051e100c",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebe31996_37435f6c",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2020-02-06T01:05:51Z",
      "side": 1,
      "message": "Nit: simply RemoveDeviceQuery()?",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d20b56d3_334276a3",
        "filename": "cast/sender/public/cast_app_discovery_service.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "RemoveAvailabilityCallback for consistency with other rename.",
      "parentUuid": "ebe31996_37435f6c",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "509ba23d_81acf396",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "expected_app_id ?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ace95f2_848ec970",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "509ba23d_81acf396",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b85f86eb_1bfe87b5",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "request_id_out\nsender_id_out",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebc2873d_a0da3805",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b85f86eb_1bfe87b5",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c35a826e_8ebc8df0",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Is the JSON::Value(\"\") argument throwaway?",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9221bb5_8c1f2fe7",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Yes, it\u0027s the \"default\" if there is no 0th element, but we already checked size \u003d\u003d 1.",
      "parentUuid": "c35a826e_8ebc8df0",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e4ec536_4006ce75",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "This seems like extra work to coerce a JSON value to std::string.  Can it be put into a utility function in json_value.h?  (Low priority unless this is used repeatedly.)",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7973b2c3_08fdb046",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "6e4ec536_4006ce75",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47474d2c_b007cf02",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-06T00:56:03Z",
      "side": 1,
      "message": "Can this go in message_util.h?  We will need it anyway for the receiver implementation.",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c018785_11b199da",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:26:48Z",
      "side": 1,
      "message": "Done, although it _does_ create the _beginnings_ of a circular dependency between sender\u003c-\u003ereceiver (test-only).  I don\u0027t think it\u0027ll be a problem though (i.e. compile order should still be independent).",
      "parentUuid": "47474d2c_b007cf02",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "938d3696_47dc5fc0",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-02-11T21:03:45Z",
      "side": 1,
      "message": "Ok, but it looks like message_util.h ended up in cast/common/channel and message_util.cc ended up in cast/sender/channel.  Preferably they would both be in cast/common/channel?",
      "parentUuid": "0c018785_11b199da",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a8867ad_7501b343",
        "filename": "cast/sender/testing/test_helpers.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-14T01:04:49Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean?  common, receiver, and sender each have their own message_util.{h,cc} files.  This went into //cast/receiver/channel/message_util.{h,cc} because it\u0027s a receiver-generated message.  Do you mean that you just want everything in common?",
      "parentUuid": "938d3696_47dc5fc0",
      "revId": "d36257852be7529c575fd15feeb24bc73cf3c530",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}