{
  "comments": [
    {
      "key": {
        "uuid": "15f0d7e9_8977ee03",
        "filename": "platform/README.md",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I wonder if this could be posix/ (since Linux implements POSIX, mostly).  There are some minor differences and we probably not worth maintaining separate POSIX and Linux implementations.\n\nIf there are any relevant differences in the socket APIs, I would just stick with Linux here.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3574cab3_02a7a3a4",
        "filename": "platform/README.md",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "I moved the things I believe to be posix-compliant to posix/, but left socket.cc and network_interface.cc (to be reviewed later) in linux/ as I think those are still linux-specific.",
      "parentUuid": "15f0d7e9_8977ee03",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be30bba1_f98c5f08",
        "filename": "platform/api/error.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Most platforms also have an error number from the last library/system call.\nOn *NIX and darwin it\u0027s held in a global variable, e.g.http://man7.org/linux/man-pages/man3/errno.3.html\n\nWin32 might have a slightly different convention.\n\nIt might be useful to expose this from the platform as well - although you could also suggest that the string returned here include the errno.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6dd84e6_78729972",
        "filename": "platform/api/error.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done.  Win32 has a similar convention so this is fine.",
      "parentUuid": "be30bba1_f98c5f08",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "736448e9_185f1463",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Can you document more fully when this event struct is created/sent?  Will it have exactly one of the event types below or possibly a mix of all three?\n\nI assume that this is a struct that is populated by the platform implementation and sent through the EventWaiter API.  Can you document its lifetime?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f776d069_8f6df120",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "736448e9_185f1463",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be94c88d_1736b077",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "The Chromium network service doesn\u0027t directly expose the readable status of the socket it\u0027s wrapping.  It\u0027s implemented as a pull model.  It\u0027s possible we could emulate this with polling through ReceiveMore().\n\nhttps://cs.chromium.org/chromium/src/services/network/public/mojom/udp_socket.mojom\n\nWhat are your thoughts about implementing this platform API on Chromium?  Or will we be using higher level services in Chromium and not require platform sockets?\n\nWe should probably talk through the platform design a bit.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6610a2b9_a1b3ef4a",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "My understanding from our discussions is that this API will still work in Chromium and we\u0027ll still use udp_socket.mojom.  My plan is to queue reads from OnReceived (which will happen on the Mojo task runner) and simply check the queue in WaitForEvents() (like a userspace select()).",
      "parentUuid": "be94c88d_1736b077",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9093f2cd_3116fbaf",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "I don\u0027t think we should have separate APIs for IPv4 and IPv6 sockets.  The distinction matters when you are binding the socket to an address, but it shouldn\u0027t matter for event handling.  Can there be a generic UdpSocketPtr that holds either address type?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "079a5d7d_afa13c1d",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "We discussed in person but to reiterate here, send and receive also depend on the type since we get the source address and original destination address.  However, since Chromium and other libraries don\u0027t maintain this distinction, I\u0027m not opposed to merging them into one UdpSocketPtr.  I\u0027m not sure where we landed on this in-person though.  Do you still agree with using a single type?",
      "parentUuid": "9093f2cd_3116fbaf",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fff03c5_1fc461bb",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-07-25T21:30:02Z",
      "side": 1,
      "message": "I don\u0027t feel strongly enough to make a decision now.  I think the concern is, how much upstream code needs to care about this - i.e. will we need to have two versions of QUIC or mDNSResponder for the two socket types.  I think when we have upstream code landed the issue will be come clearer.",
      "parentUuid": "079a5d7d_afa13c1d",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "102c9449_1f2316d3",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Can you document what these fields mean?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd77eb02_5413df10",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "102c9449_1f2316d3",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7cf9402_6caea801",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Can you document this?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73822fd2_a0dfa987",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7cf9402_6caea801",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce5ea4a4_4fdbbc54",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "I\u0027m not sure this data structure design matches the underlying model.\n\nA single physical interface can map onto at least one IPv4 network and possibly multiple IPv6 networks.  So maybe it should be:\n\nInterfaceInfo {\n  \u003cinterface data\u003e\n  IPv4Addresses;\n  IPv6Addresses;\n}\n\nSee for comparison, the Open Network Configuration spec that is used by chrome.networkingPrivate to provide a common data model across platforms.\n\nhttps://chromium.googlesource.com/chromium/src.git/+/master/components/onc/docs/onc_spec.md#Network-Configuration\n\nI don\u0027t think we need to replicate all (!) of that, but keeping the same general organization might be a good approach.  WDYT?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a73dbc38_903c5ce0",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce5ea4a4_4fdbbc54",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b53b9ef6_890590a2",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "nit: IPv4_addresses and IPv6_addresses for consistency",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "755dc8dc_a6a4ed00",
        "filename": "platform/api/network_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b53b9ef6_890590a2",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "665b7964_9aa57b08",
        "filename": "platform/api/time.cc",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Maybe we could just have using TimeDelta \u003d uint64_t, until we need for specific operations not defined on uint64_t.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceeef7bf_3d781c99",
        "filename": "platform/api/time.cc",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "I\u0027m mostly concerned about making seconds vs. milliseconds vs. microseconds readable/clear so I\u0027d rather not just use uint64_t.  Defined TimeDelta per the .h comment.",
      "parentUuid": "665b7964_9aa57b08",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9369f5c5_1e170929",
        "filename": "platform/api/time.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Do we need both Milliseconds and Microseconds?  We could end up with Seconds, too.\n\nFor simplicity, would a single TimeDelta type, representing a time span in microseconds, suffice?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0abebcb8_449b54e3",
        "filename": "platform/api/time.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "TimeDelta works fine.  Done.",
      "parentUuid": "9369f5c5_1e170929",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7440b30d_88e3eb6e",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "It seems like we should make this the maximum size of a UDP datagram, which is 64k.\n(There are references to IPv6 \"jumbograms\" that can exceed this size, but it\u0027s unclear if they are actually used in practice).",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3df9d46_843a9d7b",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7440b30d_88e3eb6e",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "067d3f51_a39324e5",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Where is this defined?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c129de2_7780b532",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "067d3f51_a39324e5",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06221e29_0a9f1cad",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Can we avoid a copy here?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad1f608d_36f639f9",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06221e29_0a9f1cad",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "817b671d_234e4296",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "Add a TODO?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee6031a_bcbe912c",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "or NOTREACHED()?",
      "parentUuid": "817b671d_234e4296",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260bba0a_139c3ed0",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ee6031a_bcbe912c",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7df27fe9_e7d40992",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "See later comment about not needing to pass multiple waiters.  Does that apply here?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13379c7f_58281c46",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7df27fe9_e7d40992",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4553929e_b4e1a7cf",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "What does this entail?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9efda291_ac3df9ab",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I\u0027ll assume this means that the timeout passed with no events occurring on the file descriptors in |waiter|.",
      "parentUuid": "4553929e_b4e1a7cf",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9a9884_0599c362",
        "filename": "platform/base/event_loop.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Added comments to WaitForEvents on return value in addition to the return value change.",
      "parentUuid": "9efda291_ac3df9ab",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c177828e_62313ea9",
        "filename": "platform/base/event_loop.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I think this should be the maximum datagram size (64k) and a length field used to indicate how many bytes were read by the last recvfrom()/recvmsg().  I don\u0027t think a dynamically sized vector  is necessary here.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ecbe274_8a68f2b4",
        "filename": "platform/base/event_loop.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "It does hurt move operations (and therefore its use in std::vector) but done.",
      "parentUuid": "c177828e_62313ea9",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a3e367e_773f57ed",
        "filename": "platform/base/event_loop.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "I\u0027m not entirely sure I follow the design here. A socket is bound to an IPv4 address or an IPv6 address, not both at once.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a98f8110_25699f84",
        "filename": "platform/base/event_loop.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I see that this can be used to collect data from a waiter that has both v4 and v6 sockets.",
      "parentUuid": "4a3e367e_773f57ed",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b876b3b_a65c74c7",
        "filename": "platform/base/event_loop.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-13T00:30:04Z",
      "side": 1,
      "message": "If a layer above wants to support IPv4 and IPv6 sockets, does it need to call both of these functions?  Or are these implementation details of the network event loop?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8908773d_b1b6e4f4",
        "filename": "platform/base/event_loop.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I see these are used inside the event loop to fetch data after the waiter has been triggered.",
      "parentUuid": "4b876b3b_a65c74c7",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "402997fb_206a14ae",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Does this need to be defined in plaform/linux?  Its contents don\u0027t seem to be Linux-specific.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59f0a0d5_7f65d9ba",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "It depends on the definition of UdpSocket*Private, which can at least be moved to posix/, even if socket.cc isn\u0027t.",
      "parentUuid": "402997fb_206a14ae",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54d10868_5e566419",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I wonder if we should have a DCHECK/CHECK distinction in the OSP library.  It seems like only Chromium has the ability to enforce additional assertions in some builds but not others.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbc6b084_710d0cf2",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean by \"only Chromium\" but I don\u0027t really care either way.",
      "parentUuid": "54d10868_5e566419",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7577706_775b25f7",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-07-25T21:30:02Z",
      "side": 1,
      "message": "Thinking about it, it does makes sense to have test-only assertions and to be able to enable extra assertions for debugging, so no objections to having both CHECK and DCHECK.",
      "parentUuid": "fbc6b084_710d0cf2",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e62a1e57_abed06c2",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "If either waiter or socket are nullptr, the following code will crash immediately, so these don\u0027t add a ton of value.  Generally I don\u0027t add DCHECKs on pointers where the value is immediately used.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f1ec1a6_682c2910",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e62a1e57_abed06c2",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6e31ef2_c0326ef5",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I would slightly prefer a for loop here because:\n1. It should be fewer lines of code\n2. If there is a nullptr, the crash will point to the line number more precisely.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e78642a_28cfb2f8",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6e31ef2_c0326ef5",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "650c2f8e_2f82b04c",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "This could maybe be simplified with some template metaprogramming, since this code looks identical to the IPv4 case except for the field access. But, I don\u0027t think it\u0027s worth it at this juncture.  I would need to review some template programming techniques before forming a full opinion on this.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "623845ae_77f3cde4",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Not metaprogramming, but simplified.",
      "parentUuid": "650c2f8e_2f82b04c",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a58a18f6_0d377dfc",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Is this not necessary to implement for Linux or do you intend to implement it later?\nIf so, maybe add a TODO() with an issue filed in our issue tracker.\nSame comment applies to the other unimplemented functions below.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3d6ff78_6b2d326a",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a58a18f6_0d377dfc",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e41d5aa_cdb977bc",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Consider defining a NOTREACHED() macro.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9034f7c3_804edd04",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Added an UNIMPLEMENTED() macro and TODOs here.",
      "parentUuid": "3e41d5aa_cdb977bc",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc89ad1f_f87f79b4",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Do we need to pass in multiple waiters at once?  Is there a use case for having multiple waiters for the same socket?  If we just need a set of file decriptors, maybe the API could be simpler:\n\nint WaitForEvents(EventWaiterPtr waiter, Milliseconds timeout, SocketMap readable_map)\n\nWhere SocketMap is a std::map of int (fd) to UdpSocket*Ptr",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb80bd75_8656de94",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "I originally changed from 1-\u003emany because I imagined e.g. quic and mdns each using their own EventWaiterPtr for their sockets.  However, since there\u0027s only one OSP event loop anyway, I guess we might as well force them to use the same EventWaiterPtr and simplify this.",
      "parentUuid": "cc89ad1f_f87f79b4",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c3b24d_56e71a88",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "See comment above about DCHECK immediately before use.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bce6854_cedf525d",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12c3b24d_56e71a88",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "680559b5_29ffb08d",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "nit: std::max",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1623186e_5ee392d1",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "680559b5_29ffb08d",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcfeb68d_f0a6a11b",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "See above",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d1e6a24_cdf5ae50",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcfeb68d_f0a6a11b",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3baaaa83_c55f53b1",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Do we really want to pass a non-zero timeout to select()?  Won\u0027t that block the calling thread?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bf9afbb_0f94fece",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "The caller is free to call with a |timeout| of 0, but yes we could just remove |timeout| and always pass 0.  I don\u0027t feel strongly either way.",
      "parentUuid": "3baaaa83_c55f53b1",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83fd017d_c9876c17",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-07-25T21:30:02Z",
      "side": 1,
      "message": "I think enforcing non-blocking is more predictable here.  We can always add a parameter later if there\u0027s a use case for blocking calls.",
      "parentUuid": "1bf9afbb_0f94fece",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0892e169_5c6c92ad",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Do we care about monitoring writability for send(), so we don\u0027t overflow the socket\u0027s send buffer?\n\nI found this page helpful for understanding POSIX I/O APIs:\nhttps://notes.shichao.io/unp/ch6/",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9c2ce19_2e2dee7f",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "That\u0027s a good point.  Done.",
      "parentUuid": "0892e169_5c6c92ad",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "541f8a22_470c0154",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Should we just return rv, so that the caller can decide whether to retry later?  Or is the idea that the caller will always run in a loop?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ae5b57_c9382a01",
        "filename": "platform/linux/event_waiter.cc",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "I don\u0027t know if we can do anything meaningful with a select() error, but I\u0027m also not opposed to returning more information than bool.  Done.",
      "parentUuid": "541f8a22_470c0154",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99430dc0_31703555",
        "filename": "platform/linux/network_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Would it be okay to put the network interface API and implementation into a different patch to review separately?  I will need some additional time to study this code.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fd43433_1a85ade4",
        "filename": "platform/linux/network_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99430dc0_31703555",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a4fe079_e20db8a8",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I don\u0027t think we want blocking sockets, as that would require a dedicated thread per socket.\nCan we assume nonblocking sockets throughout?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88f7d053_653d6ab2",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a4fe079_e20db8a8",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "238095f5_2614f0c8",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "I would name this CloseUdpSocket(), with a comment that it also deletes |socket|, as the caller is not expected to close() the socket before passing it in.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1565f95_102b9747",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Why might callers be confused about close()ing a socket first?  |socket| is an opaque type to callers.\n\nnit: I\u0027d prefer to also rename Create* to Open* if we rename this to CloseUdpSocket.",
      "parentUuid": "238095f5_2614f0c8",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b35be63_cb79fd74",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-07-25T21:30:02Z",
      "side": 1,
      "message": "I think I was arguing for consistency with the underlying POSIX socket API.  I don\u0027t feel strongly though.  I do think this should comment that it close()s the socket before destroying it.",
      "parentUuid": "a1565f95_102b9747",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8ee154e_043e7bd3",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "return bind() !\u003d -1",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f99c1c_35f5669b",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8ee154e_043e7bd3",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b14e23d_52ec6306",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "See above",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "368ac0db_5adbb7ec",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b14e23d_52ec6306",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6ef43c9_36e7a935",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "How do you know that |socket| is bound on an interface corresponding to |ifindex|?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e58a6ca_1e38776f",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "We don\u0027t, but I don\u0027t think it\u0027s trivial to know that here.  I see two main possibilities (both require some integration with the network interface API/types):\n\n1. Don\u0027t allow bind() on any endpoint, and instead specify a specific interface up front.\n2. getsockname() + matching against interface addresses (possibly only as a DCHECK since that would be expensive).\n\nLastly, although we may want to verify/sanity-check this for our API, Linux doesn\u0027t care if |socket| is bound to another interface/address.  This property is specific to sending UDP multicast traffic whereas bind() is specific to receiving traffic.  I verified this by bind()ing all sockets to an IP with no cast devices, but setting everything else as normal.",
      "parentUuid": "f6ef43c9_36e7a935",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa0eaa6_f22a63ce",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-07-25T21:30:02Z",
      "side": 1,
      "message": "I think (1) is slightly safer; and I could forsee an embedder wanting to have control over which interfaces are used by the library.\n\nAlthough, I wonder if the ifindex argument matters at all given your comment.\n\nI don\u0027t think any changes are warranted here in either case.",
      "parentUuid": "1e58a6ca_1e38776f",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37a1e15a_9e7859fd",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Can you sanity check ifindex?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb72f60_4ff480d0",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "As in |ifindex| \u003e 0 or |ifindex| in \"set of available interfaces\"?",
      "parentUuid": "37a1e15a_9e7859fd",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "356df3b8_f95543cc",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-07-25T21:30:02Z",
      "side": 1,
      "message": "\u003e0, similar to the other DCHECKs above.\n\nHowever, it sounds like any valid ifindex value works for the setsockopt call?",
      "parentUuid": "4eb72f60_4ff480d0",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9916e7ba_40f54b04",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Please use a more descriptive name than \u0027mr\u0027 here and below.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd7b9dd4_1c0b5b46",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9916e7ba_40f54b04",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c9000e6_ea314e30",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Please document what this value means.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d7cac16_b708817a",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c9000e6_ea314e30",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60730601_fac5d964",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Please use a descriptive name for this and/or document what the value represents.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d50ef9a2_5211e23c",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60730601_fac5d964",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "100301ae_5ebb6fc5",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "Is there any system header that defines this value?  I poked around man pages and it wasn\u0027t clear at all how one allocates this buffer with the correct size and alignment.",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba18f28e_3bf6510d",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "As discussed offline, the value here (1024) isn\u0027t specified anywhere and I haven\u0027t found a way to find this before calling recvmsg.  There is a flag set (MSG_CTRUNC) if this is insufficient but CMSG_NXTHDR prevents buffer overflow under the covers.  I believe all cmsg data is opt-in though (via setsockopt), so for now we only receive the destination address.\n\nThe alignment should probably be the same as for cmsghdr, since that is what will be placed at the start of the buffer.",
      "parentUuid": "100301ae_5ebb6fc5",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8483b315_f24c8570",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-20T05:24:03Z",
      "side": 1,
      "message": "The use of recvmsg seems unnecessary because you are just using the cmsg to get the source address, which should be available in recvfrom(2)?",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be06858c_7be08eb7",
        "filename": "platform/linux/socket.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-07-16T21:27:09Z",
      "side": 1,
      "message": "As discussed offline, this is the proper destination address of the packet (e.g. may be multicast address or our (unicast) address) which is required by mDNSResponder.  I added a comment about this.",
      "parentUuid": "8483b315_f24c8570",
      "revId": "8b19977532e6a3a291d7b6d9aa4ec5db30427972",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}