{
  "comments": [
    {
      "key": {
        "uuid": "7474f586_d9b6505d",
        "filename": "cast/streaming/sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "%s/existance/existence",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "340d3a0e_be799263",
        "filename": "cast/streaming/sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "Why 7?",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34d0cbb7_1f6b51d1",
        "filename": "cast/streaming/sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 451,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "%s/Ingoring/Ignoring",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0d6011b_e1f6c9f0",
        "filename": "cast/streaming/sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 509,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "%s/agressive/aggressive/g",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "641b186d_0b25d973",
        "filename": "cast/streaming/sender.h",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "Would it be easier for the embedder if we had this be a callback a la OnNeedsKeyFrame?",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0fdb0e9_43a0bb73",
        "filename": "cast/streaming/sender.h",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "Is a fully received frame canceled, or is it deleted or resolved? E.g. RemoveCompletedFrame",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "634fd123_6693b894",
        "filename": "cast/streaming/sender.h",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "Comments holding type information always scare me. IMHO, either (1) it\u0027s a serious enough problem that int should be replaced with RtpTimebase, or (2) it isn\u0027t and the comment should be deleted.",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "586dc4b9_0b236610",
        "filename": "cast/streaming/sender.h",
        "patchSetId": 2
      },
      "lineNbr": 251,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "FrameId::first() - 1 appears to be a special value that is used frequently to represent the zeroth or \"none\" frame. Consider adding a method a la FrameId::never() or FrameId::none() to make your intention more clear here, or just in the sender kInvalidFrameId or similar.",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15aebf68_f53555e3",
        "filename": "cast/streaming/sender.h",
        "patchSetId": 2
      },
      "lineNbr": 282,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "Why 32?",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91cf05c2_b9ca90c5",
        "filename": "cast/streaming/sender.h",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "Nit: awkward phrasing, maybe: \"These control when the Sender decides it needs to send a key frame to the Receiver\"",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deff56d8_5a0efb64",
        "filename": "cast/streaming/sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "%s/equeue/enqueue/g",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b99a4baf_942d11a5",
        "filename": "cast/streaming/sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 779,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-02-24T16:58:47Z",
      "side": 1,
      "message": "%s/geting/getting",
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bdfda0f_d8bc554c",
        "filename": "platform/base/trivial_clock_traits.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-02-25T00:41:22Z",
      "side": 1,
      "message": "IIRC we are not supposed to put anything into standard namespaces.\nEssentially same thing should work if you put it into openscreen namespace.\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 out, const std::chrono::hours\u0026);",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 58,
        "endChar": 18
      },
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42d5efe3_1e75cbe6",
        "filename": "platform/base/trivial_clock_traits.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-02-26T02:35:10Z",
      "side": 1,
      "message": "Done, since it\u0027s a style guide rule (and good general practice). However, C++\u0027s ADL rule makes it far less intuitive to use in code. Now I have to (in sender.cc):\n\n  namespace openscreen {\n  namespace cast {\n\n  using openscreen::operator\u003c\u003c;  // For std::chrono::duration logging.\n\n  ...\n\nOtherwise, this code:\n\n  OSP_LOG_WARN \u003c\u003c target_playout_delay_;\n\nwon\u0027t match the operator overload in the parent namespace.",
      "parentUuid": "3bdfda0f_d8bc554c",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 58,
        "endChar": 18
      },
      "revId": "900d821feb05213bac5ebb9442627bd0faa761fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}