{
  "comments": [
    {
      "key": {
        "uuid": "e0f6d61f_ce153f09",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "Witchcraft.",
      "range": {
        "startLine": 33,
        "startChar": 12,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44c80be2_5bec5b08",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "I ❤️ Unicode.",
      "parentUuid": "e0f6d61f_ce153f09",
      "range": {
        "startLine": 33,
        "startChar": 12,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c1f39f_82792992",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "OnFramesComplete?",
      "range": {
        "startLine": 100,
        "startChar": 17,
        "endLine": 100,
        "endChar": 37
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e541bdf_17c27c43",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21c1f39f_82792992",
      "range": {
        "startLine": 100,
        "startChar": 17,
        "endLine": 100,
        "endChar": 37
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac53eac_103996e6",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "platform::Clock::duration?",
      "range": {
        "startLine": 108,
        "startChar": 11,
        "endLine": 108,
        "endChar": 36
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0548db6_b99e2af5",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-26T23:39:45Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "7ac53eac_103996e6",
      "range": {
        "startLine": 108,
        "startChar": 11,
        "endLine": 108,
        "endChar": 36
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85e1f1e4_a650d5dc",
        "filename": "streaming/cast/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "This is the correct data type: It needs to be milliseconds because this is a configuration parameter that the Cast Streaming spec only handles as whole milliseconds. It\u0027s not something used for scheduling delayed tasks or handling local events.",
      "parentUuid": "a0548db6_b99e2af5",
      "range": {
        "startLine": 108,
        "startChar": 11,
        "endLine": 108,
        "endChar": 36
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e3c056_5f5e3650",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-26T23:39:45Z",
      "side": 1,
      "message": "You will also need a NetworkRunner (to be replaced by just the NetworkReader very soon) so that you can do UdpSocket receives in standalone",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63371ec1_3e7cf03f",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Ok. I\u0027ll add that when I do the TODOs in environment.cc to connect-up the UDP receives.",
      "parentUuid": "09e3c056_5f5e3650",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "602db870_2cd9a17a",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-26T23:39:45Z",
      "side": 1,
      "message": "Rebase onto master. This method signature has changed",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 94,
        "endChar": 3
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f26daaba_045b1373",
        "filename": "streaming/cast/receiver_demo/main.cc",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "602db870_2cd9a17a",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 94,
        "endChar": 3
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68544793_50c74dea",
        "filename": "streaming/cast/receiver_transport.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-26T23:39:45Z",
      "side": 1,
      "message": "This looks very similar to UdpSocket::Client::OnRead (where this data is mostly inside the UdpPacket object). Is that not what you want here or, if not, maybe the method signatures should be closer to keep consistency",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 40
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "540b030d_bcacfbbd",
        "filename": "streaming/cast/receiver_transport.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Yes. But, I\u0027ll be putting the \"glue\" for that in the Environment class, which will be shared by both the sender- and receiver-side code. Coming in a later CL. :)",
      "parentUuid": "68544793_50c74dea",
      "range": {
        "startLine": 61,
        "startChar": 24,
        "endLine": 61,
        "endChar": 40
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c547b211_0b245f7f",
        "filename": "streaming/cast/receiver_transport.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "Given this might take a bit run a callback, do you think it makes sense to put it on the TaskRunner or is it too time critical?",
      "range": {
        "startLine": 88,
        "startChar": 4,
        "endLine": 93,
        "endChar": 3
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15856193_0362d58a",
        "filename": "streaming/cast/receiver_transport.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Hmm...It would all run on the same TaskRunner anyway. It\u0027s a bit time-critical, since packet ACKs should get sent back to a Sender ASAP.\n\nThe thing I\u0027d be mainly worried about is whether the processing of one RTP or RTCP packet is taking so long that it should be split-up as multiple tasks, to give other things a chance to run. That said, I\u0027m not too worried about the execution time here. Let\u0027s see if tracing measurements indicate the need for that before we do anything more complex. Also, if we were to need this, we might also then be considering having a multithreaded impl, or a TaskRunner with cooperative multitasking scheduling (to avoid starvation), or some such.",
      "parentUuid": "c547b211_0b245f7f",
      "range": {
        "startLine": 88,
        "startChar": 4,
        "endLine": 93,
        "endChar": 3
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fc67643_87fb9839",
        "filename": "streaming/cast/receiver_transport.cc",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "Maybe use std::find or std::find_if? It returns an iterator that you can use to erase the element if it\u0027s found in Deregister",
      "range": {
        "startLine": 96,
        "startChar": 46,
        "endLine": 96,
        "endChar": 56
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "081b79a4_09b743c3",
        "filename": "streaming/cast/receiver_transport.cc",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fc67643_87fb9839",
      "range": {
        "startLine": 96,
        "startChar": 46,
        "endLine": 96,
        "endChar": 56
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f2ad6eb_1e11f4ee",
        "filename": "streaming/cast/receiver_transport.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "It\u0027s more of a PacketRouter than a ReceiverTransport",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 24,
        "endChar": 23
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e0f9012_b3df2eda",
        "filename": "streaming/cast/receiver_transport.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Good point. I was using similar naming to something I was doing on the sender side. However, for the receiver, the behavior really is just a packet router. :)\n\nDone.",
      "parentUuid": "8f2ad6eb_1e11f4ee",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 24,
        "endChar": 23
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edcd2ec0_6db0f42e",
        "filename": "streaming/cast/receiver_transport.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "Do you expect all client registerations/deregistrations to not overlap with OnReceivedPacket?\nAsking, because you have ResumeIncomingPackets in Register and SuspendIncomingPackets in Deregister\n\nAlso, maybe just AddClient and RemoveClient?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 35
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccd149e3_04421874",
        "filename": "streaming/cast/receiver_transport.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "No re-entrancy here.\n\nI thought about your questions and realized you\u0027re probably asking them because there\u0027s this Client interface that looks like it might be called from event handlers, or in delayed tasks, or other such wiggly things.\n\nInstead, I meant for ReceiverTransport^H^H^H^H^H^H^H^H^HPacketRouter to be a light-weight dispatcher/router that lets multiple Receivers share one UDPSocket without stepping on each other. It\u0027s not meant to be a general-purpose thing used by multiple classes. So, I made a couple of major changes here:\n\n1. Renamed RegisterClient/DeregisterClient to OnReceiverCreated/OnReceiverDestroyed, which better reflects that these methods will be called very near a Receiver ctor/dtor. They are actually called from within the Receiver ctor/dtor. This ensures the packet router registrations are synchronized with the lifetime of Receiver instances, with no worries about dangling pointers, etc.\n\n2. I got rid of the \"Client\" interface class. The ReceiverPacketRouter is only used by Receivers and nothing else. So, no need to separately define an interface, take the virtual method call hits, and all the boilerplate around this.\n\n3. Both ReceiverPacketRouter and Receiver have methods that *only* the other class is allowed to call. To make the \"no other external call points\" aspect clear, I added \"protected\" sections to each class with comments specifying only the friend class can call them. This should also make it more clear that the two classes are very tightly coupled, so issues like re-entrancy aren\u0027t a problem.",
      "parentUuid": "edcd2ec0_6db0f42e",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 35
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43c7335c_b7c0ab1d",
        "filename": "streaming/cast/receiver_transport.h",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T22:47:55Z",
      "side": 1,
      "message": "Preferring vector here instead of an unordered_map due to a small expected collection size?",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 67,
        "endChar": 39
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d66562a5_fe18eb60",
        "filename": "streaming/cast/receiver_transport.h",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T01:14:02Z",
      "side": 1,
      "message": "Yep. One or two, typically. I suppose I could have even used a fixed array, but then that puts an upper-bound on the max allowed number of clients.",
      "parentUuid": "43c7335c_b7c0ab1d",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 67,
        "endChar": 39
      },
      "revId": "4c759a66718fe6f663983068c9aa27a420acb8a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}