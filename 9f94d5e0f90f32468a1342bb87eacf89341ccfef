{
  "comments": [
    {
      "key": {
        "uuid": "f983388e_cc6cb0f8",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-07T18:15:23Z",
      "side": 1,
      "message": "[Out of scope, but this line is green... so gonna ask]: Whoa, what is this cast directory? It\u0027s not openscreen/cast, I didn\u0027t realize we have a separate cast repo. Is this on purpose?",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dad0a876_bbb5ac17",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-07T19:05:29Z",
      "side": 1,
      "message": "Yeah - this is a access-controlled repository, in case there was something we needed to use that couldn\u0027t be open sourced, at least for now.  I believe it\u0027s empty at the moment.",
      "parentUuid": "f983388e_cc6cb0f8",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbec8e01_684173c4",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-07T23:43:47Z",
      "side": 1,
      "message": "I\u0027ll remove it since we shouldn\u0027t be adding things until we\u0027re using them. Also, I think the preferred way is to add internal repos to the .gclient file, instead of in DEPS?",
      "parentUuid": "dad0a876_bbb5ac17",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1811a86b_63e28926",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-08T23:52:54Z",
      "side": 1,
      "message": "Removing SGTM.",
      "parentUuid": "bbec8e01_684173c4",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "064fffde_95babc17",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-07T18:15:23Z",
      "side": 1,
      "message": "Can we have a recurring quarterly task or something to track this, other than relying on one of us just being bored? It\u0027s definitely part of a meta problem of keeping things updated when it\u0027s no one\u0027s job in particular.",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce9186c4_927a5fb0",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-07T19:05:29Z",
      "side": 1,
      "message": "I think the meta-task is to set up an auto-roller for most of our DEPS, so that no manual intervention is required by default.\n\nI can find no documentation on how to do it, so some researching is required.  Some teams have a fancy webapp to manage rolling.   This is skia\u0027s roller into Chromium: \n\nhttps://autoroll.skia.org/r/angle-chromium-autoroll?tab\u003dstatus\n\nThe tradeoff is that you don\u0027t get to be as choose when to deal with upstream breakages; if the autoroller fails you need a sheriff to clean up the mess.",
      "parentUuid": "064fffde_95babc17",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91f2697b_1966584d",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-07T23:43:47Z",
      "side": 1,
      "message": "This *can* be automated by specifying \"master\" instead of the hash here. However, that would break things any time we want to check-out/build something from the past (e.g., to debug a problem with a specific version of the library).\n\ncrashpad and other projects seem to manage it manually.\n\nNote that our Chromium-build trybots will not use this for their buildtools. They will always use the latest found in Chromium (that we want to be sync\u0027ed against). So, if anything breaks, we\u0027ll be aware before the next commit to the openscreen repo; and can bump this forward.\n\nAnother thing we could do is write a PRESUBMIT warning check that fetches the ToT revision from the git server and compare it to what\u0027s in our DEPS. This would highly encourage a developer to roll it forward whenever uploading a CL.",
      "parentUuid": "ce9186c4_927a5fb0",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97104631_9ec4a2cc",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-08T23:52:54Z",
      "side": 1,
      "message": "A PRESUBMIT to check the git hash would be okay, if the commit rate to buildtools/ is infrequent enough so that it\u0027s not a nag-bot.  Say, once a week or so.\n\nOtherwise, I would prefer automation via a deps roller so that we get consistent snapshots with a given revision of our repository.",
      "parentUuid": "91f2697b_1966584d",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c5929f5_0925475f",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-01-07T18:15:23Z",
      "side": 1,
      "message": "I like the hooks approach.",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3df60344_d57e2761",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-07T18:12:24Z",
      "side": 1,
      "message": "The --no-auth doesn\u0027t require the user to get a login token, right?  I would like to avoid jumping through that hoop.",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32511d4c_6fa0710d",
        "filename": "DEPS",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-07T23:43:47Z",
      "side": 1,
      "message": "Correct. The target is in a public bucket.",
      "parentUuid": "3df60344_d57e2761",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "650eeed2_f075e2b7",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-07T18:12:24Z",
      "side": 1,
      "message": "Can you say:\n\n`clang` (installed by default) or `gcc` (installed by you)",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2f54e65_5c80a3e9",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-07T23:43:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "650eeed2_f075e2b7",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0b8a021_1eb6e017",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-07T18:12:24Z",
      "side": 1,
      "message": "This is confusing in light of the fact we don\u0027t install the gcc toolchain.  Also I don\u0027t think we install the clang toolchain (libc/libstdc++) for you.",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa1276a1_24267633",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-07T23:43:47Z",
      "side": 1,
      "message": "clang is auto-downloaded from an exec_script() target in build/config/BUILDCONFIG.gn.\n\nHowever, now that we bring this up, that\u0027s a bit of \"voodoo\" since it\u0027s the only tool we download during the build (instead of from gclient). Chromium uses gclient hooks. So, I\u0027ve added a gclient hook for it in our DEPS file.\n\nAlso, the tools/clang/scripts/update.py was copied from Chromium, but it will never auto-update. AND, that script hard-codes the revision of clang to use. So, instead, I\u0027ve added a gclient hook to download the latest script and then run it. This is all according to the documentation for how subprojects should use the clang update script.\n\nAll in all, clang will now be auto-downloaded via `gclient sync` now, and we will be using the exact same version as found in Chromium. :)",
      "parentUuid": "c0b8a021_1eb6e017",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47b2c753_86fa1ca6",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-08T23:52:54Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "aa1276a1_24267633",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77f41ca5_b72a07ae",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-07T18:12:24Z",
      "side": 1,
      "message": "Do we use clang from XCode or just link against its frameworks?",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c66003ca_b8a1dcc7",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-07T23:43:47Z",
      "side": 1,
      "message": "Just link against its frameworks. Updated this.",
      "parentUuid": "77f41ca5_b72a07ae",
      "revId": "9f94d5e0f90f32468a1342bb87eacf89341ccfef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}