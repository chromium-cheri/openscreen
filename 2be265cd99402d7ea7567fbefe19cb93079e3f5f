{
  "comments": [
    {
      "key": {
        "uuid": "1bd6f12e_85debd1d",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-01T17:13:09Z",
      "side": 1,
      "message": "Nit: consider \n \n  constexpr char kDecorator[] \u003d \"---\"; \n\nor some other way of streaming how we do logging decoration. It seems all over the place throughout the code base and would love to organize it a bit.",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d9c44f4_f0e459ba",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-01T20:43:06Z",
      "side": 1,
      "message": "I added the decorator for this file, but the general problem is that our logging produces a variable width prefix so lining up log statements doesn\u0027t actually work that well :(.",
      "parentUuid": "1bd6f12e_85debd1d",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7e483b2_4e78f517",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-01T17:13:09Z",
      "side": 1,
      "message": "Just curious, is that a problem? I\u0027m wondering if we should file a bug, or accept the behavior. What would an ideal solution be?",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d348fd5f_323e3d9c",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-01T20:43:06Z",
      "side": 1,
      "message": "Well, it\u0027s not a huge problem, since the implementation will probably the same in both cases other than logging.  I think we would either switch to only OnError and maybe rename the \"error\" to kSocketClosed to imply less of a \"failure\" or make sure \"close failures\" get routed to OnClose.  The only \"problem\" is that it seems surprising to me because the read end closing seems more like a close than an error.  I don\u0027t feel it warrants a bug yet.",
      "parentUuid": "f7e483b2_4e78f517",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6488db8_f130a62d",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-01T17:13:09Z",
      "side": 1,
      "message": "Should this be in a general helper class, like an stl_test_helpers.h? I bet we could refactor some e2e things with this.",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efff8939_4135caff",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-01T20:43:06Z",
      "side": 1,
      "message": "I added a TODO to follow up but yes, it looks like other e2e/integration tests could use this at least a little.",
      "parentUuid": "c6488db8_f130a62d",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f240899_72b1452d",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-01T17:13:09Z",
      "side": 1,
      "message": "Consider refactoring into a shared TestClose method, maybe something like:\n\n\n// Not sure if we have a good CloseReason enum for this already?\nvoid TestSocketClose(CloseReason reason) {\n  OSP_LOG_INFO \u003c\u003c \"Getting loopback IPv4 address\";\n  IPAddress loopback_address \u003d GetLoopbackV4Address();\n  OSP_LOG_INFO \u003c\u003c \"Connecting CastSockets\";\n  Connect(loopback_address);\n\n  int32_t id \u003d receiver_client_-\u003esocket()-\u003esocket_id();\n  std::atomic_bool did_run{false};\n  task_runner_-\u003ePostTask([this, id, \u0026did_run, reason]() {\n    switch(reason) {\n      case SenderClose:\n        sender_router-\u003eCloseSocket(id);\n        break;\n      case ReceiverClose:\n        receiver_router_-\u003eCloseSocket(id);\n        break;\n    }\n    did_run \u003d true;\n  });\n  OSP_LOG_INFO \u003c\u003c \"Waiting for socket to close\";\n  WaitForCondition([\u0026did_run]() { return did_run.load(); });\n  EXPECT_FALSE(sender_client_-\u003esocket());\n  EXPECT_FALSE(receiver_client_-\u003esocket());\n}\n\nThen you can have just\n\n  TEST_F(CastSocketE2ETest, SenderClose) {\n    TestSocketClose(CloseReason::SenderClosed);\n  }\n\n  TEST_F(CastSocketE2ETest, ReceiverClose) {\n    TestSocketClose(CloseReason::ReceiverClosed);\n  }",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba61469d_0f3a4b58",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-01T20:43:06Z",
      "side": 1,
      "message": "Did something similar.",
      "parentUuid": "3f240899_72b1452d",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8156f93_99beffce",
        "filename": "platform/impl/tls_connection_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-01T17:13:09Z",
      "side": 1,
      "message": "Do you also need SSL_free here?",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1a96f47_a4534017",
        "filename": "platform/impl/tls_connection_posix.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-01T20:43:06Z",
      "side": 1,
      "message": "No, this a bssl::UniquePtr.",
      "parentUuid": "c8156f93_99beffce",
      "revId": "2be265cd99402d7ea7567fbefe19cb93079e3f5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}