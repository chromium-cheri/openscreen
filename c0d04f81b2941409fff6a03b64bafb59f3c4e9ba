{
  "comments": [
    {
      "key": {
        "uuid": "18516097_1be05236",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "Can we use ErrorOr to return a kCborParseError here?",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8e44cc3_ec893030",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "I would just declare this as a uint8_t, since it\u0027s really an enumeration over the four possible type lengths.\n\nIs AND-ing with 0x03 necessary after right shifting a byte 6 bits?\n\nAlso s/size_bits/num_type_bytes/ ?",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4cf9e97_c6619bb7",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "s/id_bytes/type_size/",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1cca25_8f4035fa",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "Can this be (buffer.size() !\u003d type_size) to check for the exact buffer size?",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4caca9d_781ee5ec",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "message_type?",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c4c2cff_783a35e2",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-04-16T23:48:22Z",
      "side": 1,
      "message": "For portability, I\u0027d suggest either:\n\n1. Use the standard macro from stdint.h: ~(UINT64_C(0xC0) \u003c\u003c 56)\n\nor\n\n2. uint64_t{0xC0}",
      "range": {
        "startLine": 42,
        "startChar": 59,
        "endLine": 42,
        "endChar": 66
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ebd5705_23e3125c",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-04-17T09:52:41Z",
      "side": 1,
      "message": "OSP_NOTREACHED or omit since you\u0027re switching on a 2-bit value (guaranteed by the shift).",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 19
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca969b8_43fd7a31",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "It would be slightly better to declare the enum class with a specific storage base and then use that type to hold the message_type result, instead of using a static_cast.\n\nHowever, we\u0027ll eventually want to allow embedders to add additional protocols as well, in which case we\u0027ll need to come up with a more dynamic way to map type values onto types that the code can use.  So not worth investing a lot in polishing this right now, IMO.",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b171c4c_09f344e0",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "Comment #2: message_type should be bounds checked against the allowable range for msgs::Type.  The behavior if it\u0027s out of bounds is not obvious and appears to be undefined in C++17.",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 8
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1c0c935_f4bf5479",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-04-17T00:24:44Z",
      "side": 1,
      "message": "I actually spent a while investigating whether there was a performant way to do this. Since the enums values are essentially just random ints, the best I could come up with was generating a big switch statement in codegen.cc instead of using a cast. In other languages, I would have used a TryCast sort of function, but can\u0027t find that in C++.\n\nAlternatively, I could convert this whole method to use a static Trie, so decoding would only involve up to 4 map checks and we never actually need to convert the input into an enum at all (just rely on the Trie lookup) - though that would add much more complexity\n\nThoughts?",
      "parentUuid": "8b171c4c_09f344e0",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 8
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca2ecd4_f852d110",
        "filename": "api/public/message_demuxer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T17:08:06Z",
      "side": 1,
      "message": "Hm.  It seems enum validation gets complicated in C++ and it would be better to explain in person.  Regardless, we have to do some validation here to avoid undefined behavior.",
      "parentUuid": "d1c0c935_f4bf5479",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 8
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25cbc5f2_16e11dfc",
        "filename": "api/public/message_demuxer.h",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-04-17T09:52:41Z",
      "side": 1,
      "message": "nit: The variable-length integer decoding has nothing to do with CBOR (and comes from QUIC).  Maybe VarIntTypeDecoder or MessageTypeDecoder?",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "709b3134_f0cb9e5c",
        "filename": "api/public/message_demuxer_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 358,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-04-16T23:48:22Z",
      "side": 1,
      "message": "style nit: Avoid C-style casts. Instead, just tweak this to: size_t{1}\n\n(and a couple of spots below)",
      "range": {
        "startLine": 358,
        "startChar": 42,
        "endLine": 358,
        "endChar": 51
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3dc3bef_324e9650",
        "filename": "msgs/messages_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-04-16T23:48:22Z",
      "side": 1,
      "message": "bike-shedding nit: For numeric constants, you could just: uint64_t{11}",
      "range": {
        "startLine": 228,
        "startChar": 16,
        "endLine": 228,
        "endChar": 37
      },
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efd6d987_2091fe11",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-04-17T00:00:49Z",
      "side": 1,
      "message": "This is repeated a couple of times, so it may be worth adding a function to CppSymbolTable to return CppTypes with a non-null type_key.",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ba6167_32504ae0",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 2
      },
      "lineNbr": 903,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-04-17T09:52:41Z",
      "side": 1,
      "message": "Can we just come up with the encoding for a type at codegen time instead and avoid writing the template at all?",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d76689be_51216bdb",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 2
      },
      "lineNbr": 1514,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-04-17T09:52:41Z",
      "side": 1,
      "message": "nit: I wouldn\u0027t use T here since this is a constant, not a typename (which is how it\u0027s commonly used).",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2995602f_afe76bfa",
        "filename": "tools/cddl/sema.cc",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-04-17T09:52:41Z",
      "side": 1,
      "message": "I don\u0027t think this parsing should be optional.",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db832c03_b22cf803",
        "filename": "tools/cddl/sema.h",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-04-17T09:52:41Z",
      "side": 1,
      "message": "I think this could just be a required member of Struct, but I don\u0027t feel strongly.",
      "revId": "c0d04f81b2941409fff6a03b64bafb59f3c4e9ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}