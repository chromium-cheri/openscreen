{
  "comments": [
    {
      "key": {
        "uuid": "67ee4439_9c5f5b4f",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-08T00:48:23Z",
      "side": 1,
      "message": "Instead of `uint8_t bitmap[32]` and copying in this loop, it could be `uint8_t* bitmap`, check |bitmap_length| against |remaining()|, then `Skip(bitmap_length)`.  I prefer the latter.",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4800786f_7f813081",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-12T18:44:35Z",
      "side": 1,
      "message": "Remaining() doesn\u0027t work here because it\u0027s associated with the full BigEndianBuffer (for the entire MdnsMessage, with one or more MdnsRecord instances). Also, the Read method already includes a Skip() call.\n\nI tried to write it using BigEndianWriter::Cursor() methods, but it ended up more complex than the current code IMHO:\n\n  uint8_t* current \u003d cursor.current();\n  for (uint8_t* bitmap_ptr \u003d out-\u003ebitmap; cursor.delta() - current \u003c out-\u003ebitmap_length \u0026\u0026 Read(bitmap_ptr++);) {}\n\nI don\u0027t have a strong opinion either way and am open to changing. WDYT?",
      "parentUuid": "67ee4439_9c5f5b4f",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78fa80b9_813c428a",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-12T20:44:42Z",
      "side": 1,
      "message": "\u003e Remaining() doesn\u0027t work here because it\u0027s associated with the full BigEndianBuffer (for the entire MdnsMessage, with one or more MdnsRecord instances). Also, the Read method already includes a Skip() call.\n\nRight, but Read\u003cuint8_t\u003e() below is doing what I want, just one byte at a time.  I didn\u0027t realize Skip() actually returns a bool, so it\u0027s even simpler.  Replace this loop with:\n```\n  out-\u003ebitmap \u003d current();\n  if (!Skip(out-\u003ebitmap_length)) {\n    return false;\n  }\n  cursor.Commit();\n  return true;\n```",
      "parentUuid": "4800786f_7f813081",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e76d22a1_4f6b3bda",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-12T21:32:20Z",
      "side": 1,
      "message": "Thanks for the explanation. \n\nThis change results in a segfault. Still investigating, but I can\u0027t find what\u0027s causing it yet - something related to being forced to change out-\u003ebitmap to a const uint8_t** rather than an array\nThough IMHO, if I\u0027ve spent half an hour staring at the code and can\u0027t find it, it\u0027s more complex than it needs to be just to save copying 8 bytes\n\nWDYT?",
      "parentUuid": "78fa80b9_813c428a",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c46caeb8_bc594699",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-12T21:42:02Z",
      "side": 1,
      "message": "Came up with a solution to avoid the copy loop. WDYT about:\n\n  if (remaining() \u003c out-\u003ebitmap_length) {\n    return false;\n  }\n  memcpy(out-\u003ebitmap, current(), out-\u003ebitmap_length);\n  bool skip_result \u003d Skip(out-\u003ebitmap_length);\n  OSP_DCHECK(skip_result);\n  \n  cursor.Commit();\n  return true;",
      "parentUuid": "e76d22a1_4f6b3bda",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b97d850_92f96bd2",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-12T21:48:08Z",
      "side": 1,
      "message": "Or:\n\n  uint8_t* start \u003d current()\n  if (!Skip(out-\u003ebitmap_length)) {\n    return false;\n  }\n  memcpy(out-\u003ebitmap, start, out-\u003ebitmap_length);\n  cursor.Commit();\n  return true;",
      "parentUuid": "c46caeb8_bc594699",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41a71b23_25664800",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-02-12T22:16:02Z",
      "side": 1,
      "message": "I put my suggestion in verbatim and didn\u0027t get a segfault.  It\u0027s not really worth agonizing over, so leaving the loop for now is fine.  I can upload a CL later and you can decide if it\u0027s better.",
      "parentUuid": "0b97d850_92f96bd2",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34095b78_574c45ce",
        "filename": "discovery/mdns/mdns_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 404,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-02-12T22:28:15Z",
      "side": 1,
      "message": "Interesting. It\u0027s cleaner, so definitely do put up a CL - not sure what I\u0027m doing wrong\nWhen I put in the code verbatim, I get the error \"error: array type \u0027uint8_t [32]\u0027 is not assignable\" - so had to update the struct to make it work\n\nSo maybe its a compiler version thing?",
      "parentUuid": "41a71b23_25664800",
      "revId": "a233ffb6fd685b498e778b4193193501a6fb17e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}