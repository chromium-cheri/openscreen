{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "106d27f5_14744ffd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2022-03-03T21:24:56Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c760ccc_45c6c16f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T19:07:06Z",
      "side": 1,
      "message": "Nice cleanup!  Thanks!",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e4d8cb2_03fa8689",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T23:03:14Z",
      "side": 1,
      "message": "Optional to clean up the pointer passing.   Maybe cast_auth_util should be converted to an object so there is an API to override parameters like the CRL trust store.",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dff8e88_d872744f",
        "filename": "cast/common/certificate/cast_cert_validator.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T19:07:06Z",
      "side": 1,
      "message": "const ref?",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1a18537_d3d10498",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T19:07:06Z",
      "side": 1,
      "message": "Can either of these be passed as a const ref?",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f9832ae_244bb51a",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2022-03-04T20:33:07Z",
      "side": 1,
      "message": "|crl_trust_store| can be null in tests, but it isn\u0027t checked (its use is skipped because of other parameters).  So it could still be const\u0026 but would you rather it remain a pointer in that case?  optional\u003c\u003e is also a possibility, although it seems like a strange use for it.",
      "parentUuid": "d1a18537_d3d10498",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd03520_20366d73",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T21:07:35Z",
      "side": 1,
      "message": "Can you point out where |crl_trust_store| passed as nullptr?  I didn\u0027t see it in this CL, but maybe I missed something.\n\nIn general if there\u0027s an object that is never passed as nullptr, I prefer a reference.  Otherwise, pass as pointer; I don\u0027t think optional\u003c\u003e adds any value over pointers.",
      "parentUuid": "5f9832ae_244bb51a",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f69d0ffe_b131736e",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2022-03-04T21:55:44Z",
      "side": 1,
      "message": "It might only be in these two DeviceAuthTest tests: https://source.chromium.org/chromium/chromium/src/+/main:third_party/openscreen/src/cast/test/device_auth_test.cc;l\u003d144\n\nWe could just use a valid CRL example there, but I guess we\u0027d be removing the test case of just authentication without the CRL path.",
      "parentUuid": "cbd03520_20366d73",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7414c56_9972dc9b",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2022-03-04T21:59:09Z",
      "side": 1,
      "message": "Actually, I remembered why FindCertificatePath wasn\u0027t already const: the chromium implementation won\u0027t be able to be const because of TrustStoreInMemory needing to be mutable.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:net/cert/internal/path_builder.h;l\u003d164",
      "parentUuid": "f69d0ffe_b131736e",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcd21cb0_6a16a0ac",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T23:03:14Z",
      "side": 1,
      "message": "It looks like the nullptr crl_trust_store is only used in tests.  In which case, it should be possible to pass as reference here for use in production code, and as a pointer below for tests.\n\nI think |cast_strust_store| can be passed as reference all the way down as it\u0027s mandatory.",
      "parentUuid": "e7414c56_9972dc9b",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6018647_bd650c10",
        "filename": "cast/sender/channel/cast_auth_util.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T19:07:06Z",
      "side": 1,
      "message": "Ditto",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4c474a_a1667223",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T19:07:06Z",
      "side": 1,
      "message": "calling .value() on an error will fail an assertion, so you can just write\n\ncredentials_ \u003d GenerateCredentialsForTesting(\"Device ID\").value();",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fefe63c9_eff3ab26",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2022-03-04T20:33:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e4c474a_a1667223",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b48984ad_5e09329f",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-03-04T19:07:06Z",
      "side": 1,
      "message": "|cast_trust_store| is only used to construct the SenderSocketFactory, so I would be okay just calling this inline.",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9814584_a35448ff",
        "filename": "cast/test/cast_socket_e2e_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2022-03-04T20:33:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b48984ad_5e09329f",
      "revId": "d2d970f6a43b4a016a61a1da2774c8319d003f89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}