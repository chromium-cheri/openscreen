{
  "comments": [
    {
      "key": {
        "uuid": "36f66b22_541f8a72",
        "filename": "discovery/dnssd/impl/publisher_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Do you have plans to check if these cause an error?",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be27e55a_c7f47b45",
        "filename": "discovery/dnssd/impl/querier_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Why define these as notreached? If it\u0027s just for the mock, you can just use StrictMock instead of NiceMock and inherit from the parent class right?",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74ea6ac8_fc0dcfa3",
        "filename": "discovery/mdns/mdns_domain_claimed_callback.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Nit: Callback \u003d\u003e function/function template to me. Since this is an abstract class, this feels more like a Client or OnConfirmedDomainProvider.",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "554c07eb_1ce5b4ef",
        "filename": "discovery/mdns/mdns_domain_claimed_callback.h",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Is it called once the probing phase is complete and the domain name has not been confirmed? Or are they synonymous?",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a0bca24_3cc943a5",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "I\u0027m not a huge fan of this, you are XORing the bools to ensure that only one is set?\n\nI would probably prefer either:\n\n(reciever !\u003d nullptr) !\u003d (receiver_ \u003d\u003d nullptr)\n\nor, \n\n!!receiver !\u003d !!receiver_",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ce62980_22dbafa7",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Nit: magic number is a great candidate for a constexpr int",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfccf4be_819620b6",
        "filename": "discovery/mdns/mdns_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "If the querier, publisher, and responder all need the same set of 5 parameters, can you create an aggregate struct and pass that instead? \u003e3 parameters is less than ideal right?",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a962e4a_97b23380",
        "filename": "discovery/mdns/mdns_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Nit: %s/Callback/Client",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c231e530_036746f0",
        "filename": "discovery/mdns/mdns_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Nit/style discussion: Consider a newline after socket_ to show the split between types.",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3802dea_c0e1331b",
        "filename": "discovery/mdns/public/mdns_service.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "nit: I\u0027d prefer given properties over listing them, in case the signature changes.",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0efb695_846a6c8f",
        "filename": "discovery/mdns/public/mdns_service.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-20T22:39:47Z",
      "side": 1,
      "message": "Can callback be null? You can still get polymorphism with a reference",
      "revId": "40277fe26f08b3edba21d788e80db759d1e9f528",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}