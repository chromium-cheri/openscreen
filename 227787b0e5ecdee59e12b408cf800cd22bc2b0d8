{
  "comments": [
    {
      "key": {
        "uuid": "7116cbe3_b777935f",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I think we should call this NetworkWaiter.  And it needs a class-level comment.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b67f5890_3b4a4598",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Updating to NetworkWaiter and pulling it out to its own file",
      "parentUuid": "7116cbe3_b777935f",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb5e3823_86568f16",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "First, I think we should get rid of writes and only focus on reads.\n\nSecond, I think we should call this something like for AwaitSocketsReadble.\n\nThird (nit), I think the timeout should be the last argument.\n\nFourth, I think we could simplify this in one of two ways.  Either:\n\nA.  std::vector\u003cUdpSocket*\u003e AwaitSocketsReadable(const std::vector\u003cUdpSocket*\u003e\u0026 sockets, Clock::duration timeout)\n\nB.  AddSocket(UdpSocket*), RemoveSocket(UdpSocket*), std::vector\u003cUdpSocket*\u003e AwaitSocketsReadable(Clock::duration timeout)\n\nBut either way, you tell it which sockets to watch and then it tells you which sockets changed, with fewer objects and methods.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c18f4a45_6ec09a52",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Removing write operations\n\nUpdating name\n\nUpdating parameter order\n\nUpdating to A to avoid maintaining the list of watched sockets in 2 places, but changing to return type ErrorOr\u003cstd::vector\u003cUdpSocket*\u003e\u003e so that errors can be bubbled up",
      "parentUuid": "eb5e3823_86568f16",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d894ff5f_a7547ed9",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I\u0027m still not a fan of a singleton here.  Why can\u0027t we just have a Create() method and let higher-level code decide if it wants a global thing?",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85685609_b0b6f89a",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Discussed this in person, and for now the best option seems to be removing the static method entirely and instead relying on the class-specific create method",
      "parentUuid": "d894ff5f_a7547ed9",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87c3f65f_a0eb1b26",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I don\u0027t think this should return an error.  Maybe have it return a bool indicating that the read was cancelled or whether it was a no-op.  Having a generic error means callers have to deal with the error, but with a generic error if you have to assume the cancel failed.  But then what do you do?  Cancel shouldn\u0027t fail.  It should either succeed or be a no-op.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8ae1908_5fc9a2db",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "My original thought was that we could have a DCHECK / CHECK for success to ensure that the state is as expected, but you\u0027re correct that a bool provides the same amount of information so I see no reason not to change it. Updated.",
      "parentUuid": "87c3f65f_a0eb1b26",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dffde266_744590e4",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Why not just pass in a TaskRunner?  Why bother with the abstraction of a factory?   Then you could pass it as a unique_ptr and not need this NOTE.  \n\nAlso, please comment what happens if you don\u0027t call this (I\u0027m assuming it uses a default).\n\nAnd... maybe it just makes more sense to pass it into Create() since you can\u0027t change the TaskRunner in the middle of using the NetworkRunner.  \n\nActually.... maybe it\u0027s best not to have this at all.... see below.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f80085e_6ad71d04",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "This was required so that we could have a parameter-less static Create/GetInstance method while still allowing the embedder to inject in their own TaskRunner if they chose to use our NetworkRunner.\n\nAfter removing these static methods, it is now safe to remove",
      "parentUuid": "dffde266_744590e4",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f487f32_a794c66f",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I don\u0027t think we should both with this method.  If someone needs it, just let them \nuse PostTask(RepeatingFunction(...)) (make RepeatingFunction public).",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a13a078_70a7a114",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Discussed offline. Moving class back out of TaskRunner but still in the same file\n\nOnce the platform/util directory is created, it will move to there - and added a TODO to reflect this",
      "parentUuid": "9f487f32_a794c66f",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7dc5652_fefb4756",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "It seems like we only need this here in order to allow the NetworkRunner to use it.  But it pollutes the TaskRunner interface.  I think it would be better if we found a different way.\n\nFor example, the NetworkRunner could know which concrete type it\u0027s working with.  Just have it use a TaskRunnerImpl.  \n\nI\u0027m not sure it\u0027s worth testing the NetworkRunner with a fake TaskRunner.  I think we should just test a NetworkRunner as whole as it would be used by a normal user (with a TaskRunnerImpl inside).  If that\u0027s not good enough for our tests, there are other tricks we could play (like templatize NetworkRunner or subclass TaskRunnerImpl).  But either way, I\u0027d like to avoid polluting the TaskRunner interface.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "388bb1a3_38187e61",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "The reason this was here is that we want to support embedders injecting in their own task runner, which was very difficult to support while at the same time requiring that the TaskRunner was already running when we started using it - adding this to the TaskRunner interface was the simplest solution\n\nNow that we\u0027ve removed the static GetInstance/Create method (based on in person discussion), this should be safe to remove",
      "parentUuid": "f7dc5652_fefb4756",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31eb5a05_1f2b7a42",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Rather than have an async bool, I think it would be better to split it into two methods:\n\nRunUntilStopped()  // Sync\nStart()  // Async",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06d90e6e_9d035f66",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "The async versions have all been removed",
      "parentUuid": "31eb5a05_1f2b7a42",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2d09902_0f8dd959",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Callbacks like this are tricky because you don\u0027t know what thread they will be called on.  I think it might be better to figure out if we can avoid it.  If the only reason is to CancelRead, why don\u0027t we just require callers to call CancelRead before deleting a UdpSocket?  It seems like we need to have CancelRead be good practice anyway, and that\u0027s what we seem to do in the big comment.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f4937c0_45f2b86f",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Discussed offline with @ptahtcher and @mfoltz and resolved that this is fine",
      "parentUuid": "f2d09902_0f8dd959",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43a48c77_78c0aec3",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "How is this different than a std::bind or a lambda?",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c99fe87_00829e8b",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "This is discussed more in-depth in the previous iteration, but there is an issue adding a task with move-only parameters to our TaskRunner. This is the cleanest way I could come up with to work around that issue.",
      "parentUuid": "43a48c77_78c0aec3",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a30bff14_0795505b",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "We\u0027re going to do all this clear+add every 50-250ms?  Seems excessive.  I think we could improve this by modeling it around AwaitReadableSockets.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f523036_35c44ea2",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "I\u0027ve moved all of this complexity to the EventWaiter class and updated this method\u0027s signature based on other comments. Much of this complexity cannot be avoided, though, due to how the underlying FD_SET works. PTAL at the network_waiter class and let me know what you think",
      "parentUuid": "a30bff14_0795505b",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06b35d40_e01407e7",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "This seems kind of long if it blocks the first read and the stopping.  Maybe 50ms would make more sense.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a3888de_ebb6bb02",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06b35d40_e01407e7",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fc348aa_ef5fc1a8",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I think we should call this NetworkReader and remove all the write things.  Also, the class-level comments could use some improvement.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a89208c_79599a58",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fc348aa_ef5fc1a8",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8b4a7b0_44908ae3",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Since you can\u0027t change it mid-use, why not pass it into Create() instead?  Also, we need to comment about the lifetime.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fdeb3f7_f6cd4b1b",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "The reason this can\u0027t be passed in the constructor had to do with supporting the static constructor in previous iterations. Now that it\u0027s been removed, I\u0027ve removed this method and added it to the constructor.",
      "parentUuid": "e8b4a7b0_44908ae3",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8db8a7e8_26b2fd7b",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Will you get an Error if you try to do the same socket twice, or will it replace the first one?",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59c9aae0_d350aac1",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "As of now, the second one will not be applied. I only went with this approach due to a comment left one one of the CLs leading up to this - I actually feel that allowing replacement makes for a nicer API though. Thoughts?\n\nI\u0027ve added a comment to document this",
      "parentUuid": "8db8a7e8_26b2fd7b",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "424fb5df_db9beeb8",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "No one reading this will know what that means.  Perhaps it would be better to say that the first read may delayed up to X milliseconds.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44d8c413_45ef70f7",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Good point. Updated.",
      "parentUuid": "424fb5df_db9beeb8",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ef396a_62ba0d42",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I\u0027m not sure the NOTE is even needed.  Just say no callbacks will be fired, even if a pending read occurs.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ef2c319_0d6a4ed0",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Updated to \"Following this call, any already pending reads will proceed but their associated callbacks will not fire.\"",
      "parentUuid": "e1ef396a_62ba0d42",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4b18578_dad31c79",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "As mentioned, please remote write things.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7f2e6de_96b5ad63",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4b18578_dad31c79",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d789e669_53601dcd",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I\u0027m not a fan of testing every single layer of the stack here and allowing mocks to be injected at all levels.  I think we should just test the NetworkRunner as a whole and leave the implementation details opaque, even to tests.  That will lead to more simple code and tests that are won\u0027t break if we do a refactoring (which is half the point of unit tests: to be able to refactor).\n\nAlso: I think we can get rid of passing in these read_handler and write_handler if we use the AwaitSocketsReadable method I mentioned previously.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "992b51b7_067f81c0",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Updated to new NetworkWaiter approach as described elsewhere in this CL iteration",
      "parentUuid": "d789e669_53601dcd",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d6e09ac_6c10d9cc",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Perhaps call it ReadFromSocket.  Make it clear this does not block.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a413b32b_a8bb5b4a",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Updated name and comment",
      "parentUuid": "3d6e09ac_6c10d9cc",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44af607d_a5e57eb0",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "This NOTE is duplicate with the previous one.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa844643_3f8523da",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "I had actually left this duplicate note here intentionally - I know if I am trying to figure out how a method works and the comments don\u0027t explain it, I will sooner look to the implementation code than to other methods in the class, so I am trying to provide as much information here as possible\n\nIf you have a strong preference I can pull it out, but I am in favor of the extra documentation.",
      "parentUuid": "44af607d_a5e57eb0",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfb99aa6_9deea333",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "This should have \"Read\" in the name.  Perhaps \"WaitAndRead\" or maybe just \"Read\".\n\nAlso, we need to specify when an Error can occur and what that means: should one call WaitAndRead again?  Or is it terminal and this NetworkRead is dead?",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45c68ac9_530b22c0",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Updated name and comments.",
      "parentUuid": "bfb99aa6_9deea333",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bde4b47_da5560bf",
        "filename": "platform/base/network_runner_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Please put the \"\u003d false\" in the class definition.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23ebd280_76e67640",
        "filename": "platform/base/network_runner_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "removed this boolean as part of removing the task runner factory\n\nFor future reference, why is this one in the class definition as opposed to initializer list?",
      "parentUuid": "7bde4b47_da5560bf",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "852099c7_5923d5e2",
        "filename": "platform/base/network_runner_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "For some reason I can\u0027t figure out, this doesn\u0027t seem to be making the Wait loop stop. I\u0027ve verified that the atomic_bool does get flipped in the RequestStopSoon(...) function, but the loop doesn\u0027t exit. Does anyone know what could be causing this?",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "447dbd38_3e069ccd",
        "filename": "platform/base/network_runner_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T21:23:49Z",
      "side": 1,
      "message": "Found it. It was a race condition related to calling RequestStopSoon() before the other thread had a chance to call RunUntilStopped(...) during UTs, not anything that would occur in real code\n\nWill upload the modification with the next iteration. It\u0027s not a big enough change to warrant a new iteration on its own",
      "parentUuid": "852099c7_5923d5e2",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8da895fe_c0c47772",
        "filename": "platform/base/network_runner_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Seems like a lot of complexity to be able to set the TaskRunner when it seems much more easy to pass it into Create() (and not have GetInstance).",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85243891_236964d9",
        "filename": "platform/base/network_runner_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Discussed offline. Decided on removing the static Create/GetInstace method to allow for a simpler class structure",
      "parentUuid": "8da895fe_c0c47772",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e04a8d88_8ce9664e",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "What\u0027s with the magic \"+1\"?  Could use a comment.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b310102c_2fc39f21",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Added comment that it is \u0027by convention\u0027 and link to the documentation",
      "parentUuid": "e04a8d88_8ce9664e",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1a4db7e_6475cab5",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "After thinking a bit more, I think returning Error::Code::kAgain would make more sense here than introducing a new error code. I\u0027ve updated this for the newest iteration, so let me know if you see any issue with this",
      "range": {
        "startLine": 160,
        "startChar": 11,
        "endLine": 160,
        "endChar": 33
      },
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d455195_79bceb60",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I think it would be better to collapse this into 1 layer of abstraction with a NetworkWaiterPosix",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "769eded5_4dc51e3e",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Removed SocketHandlerPosix as it is no longer needed with the new method signature for WaitForChanges / AwaitSocketsReadable",
      "parentUuid": "1d455195_79bceb60",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414be899_84f25776",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Seems like something that should go where we define Clock or put in util/ or somewhere else.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a76b823_0890879d",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "I\u0027ve left this as a static method in NetworkWaiterPosix for now\n- The reason I\u0027m against putting this in a util class or in Clock is that \u0027struct timeval\u0027 is a platform-specific C library, so we would need a posix-only util class to support it\n- The reason I didn\u0027t make it a method in an anonymous namespace is because Unit Tests needs access to it",
      "parentUuid": "414be899_84f25776",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6a87a3f_70563b0d",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Should we set_, and should be private.  This is a class, not a struct.\n\nAlso, \"fds_\" would be a better name.",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7675d02_06ccb48a",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Moved this into NetworkWaiter, and made private. Went with \"read_handles_\" to be specific",
      "parentUuid": "d6a87a3f_70563b0d",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d56e47ad_005f8e61",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "max_fd_",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e18a6281_19f015b6",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "class has been removed",
      "parentUuid": "d56e47ad_005f8e61",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65350408_39221929",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "override?",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd227d74_e2beb0de",
        "filename": "platform/posix/event_waiter.h",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65350408_39221929",
      "revId": "227787b0e5ecdee59e12b408cf800cd22bc2b0d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}