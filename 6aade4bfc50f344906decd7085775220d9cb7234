{
  "comments": [
    {
      "key": {
        "uuid": "cb604d9f_72dc03d2",
        "filename": "cast/common/channel/cast_socket_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "How difficult would it be to just pass a kV4 or kV6 flag to the FakeCastSocket ctor, so you could easily write tests against both types?",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef2c6ad0_6adb5adb",
        "filename": "cast/common/channel/cast_socket_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb604d9f_72dc03d2",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb4cc0ee_6b3114de",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Does Json::Value allow you to create an iterator over the list members (so you don\u0027t have to fiddle with indexing)?",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d8d28cb_3162340c",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb4cc0ee_6b3114de",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5069ad74_f38a2789",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Please use a switch statement with a NOTREACHED() default so that if new values are added, they don\u0027t automatically default to kStrong.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a305203b_90444289",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "I\u0027m not sure NOTREACHED() is a good alternative.  This is checking a value from the wire so it\u0027s either garbage or from a future version we don\u0027t recognize.  It seems like we should either default to kStrong or just return an error and fail.",
      "parentUuid": "5069ad74_f38a2789",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d0f0bd0_494ff64e",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "|message| is already an rvalue reference.  Does it need std::move()?",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1c39ee4_089fdb59",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Yes.  In |SomeType\u0026\u0026 something|, |something| is an l-value.  Hence std::forward exists.  Don\u0027t ask me why.",
      "parentUuid": "6d0f0bd0_494ff64e",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afd2018b_4d475f75",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Same comment here.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "545e1e8b_e2973e20",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "afd2018b_4d475f75",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f411d68_a51b7d5d",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Can VirtualConnection::Type be an enum?",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d87e70b5_ce8e87fa",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "It is an enum class.  This is to simplify the default-or-from-wire logic.  After the following if, we should have guaranteed |conn_type| is still an enum member but as an int, so the following static_cast back to the enum is safe.  If there were no connection type in the packet, we\u0027d simply get `static_cast\u003cType\u003e(static_cast\u003cint\u003e(kStrong))`.",
      "parentUuid": "5f411d68_a51b7d5d",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0575d58d_9773802d",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Can this be simplified to:\nint conn_type \u003d GetConnectionType(openscreen.MaybeGetInt(...));",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0369deda_5d69895b",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Probably, but see the caveat about unhandled values from your previous comment.",
      "parentUuid": "0575d58d_9773802d",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e13bdac_ab98944a",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Can you just use result.value() and rely on the std::string move constructor?",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7089b610_ca86c6bf",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "No.  `result.value()` is |std::string\u0026|, which doesn\u0027t get automatically converted to |std::string\u0026\u0026| (otherwise passing local |std::string| variables would frequently get moved into functions), so passing to a |std::string| value parameter would copy.  I could `std::move(result.value())` if that\u0027s better.",
      "parentUuid": "6e13bdac_ab98944a",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e50d0db_0d3cb83f",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "CastMessage could be constructed here without the need for std::move.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d90ec1b_fe8edb87",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Collapsed above to one line.",
      "parentUuid": "0e50d0db_0d3cb83f",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2259712_54957bba",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Similar comments as above.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "419f01c4_b6049e10",
        "filename": "cast/common/channel/connection_namespace_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2259712_54957bba",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9fd859b_16a3e9a5",
        "filename": "cast/common/channel/connection_namespace_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "s/vconn/connection/ or virtual_conn here and below",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebf8950f_9f9a17c5",
        "filename": "cast/common/channel/connection_namespace_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9fd859b_16a3e9a5",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bf40b5c_3d9b2ce4",
        "filename": "cast/common/channel/message_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "I would prefer the version for outgoing messages is a constant defined elsewhere (e.g. in message_util.h) so if we need to support additional versions, it will be easier to plumb that in.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbeeb941_a2d52d47",
        "filename": "cast/common/channel/message_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bf40b5c_3d9b2ce4",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dbf4526_aca82df8",
        "filename": "cast/common/channel/namespace_router.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Consider taking absl::string_view for Add/Remove to simplify use with string constants, although I don\u0027t feel strongly about it until there is a need.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0572c88_6c7b1477",
        "filename": "cast/common/channel/namespace_router.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "I was initially worried this would be used by embedders so we should avoid abseil, but after thinking about it again, I think embedders would only use the endpoint-level routing.\n\nHowever, Remove can\u0027t benefit from |string_view|.  For consistency then, I\u0027ll just make Add take a |std::string| by value and move from it in the impl (a string needs to be constructed always).",
      "parentUuid": "8dbf4526_aca82df8",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4a64cb3_6f75cdc6",
        "filename": "cast/common/channel/proto/cast_channel.proto",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "If you want to de-risk landing this, I would break out the .proto changes into a separate patch, land them, and roll them into Chromium.\n\nOnce Jordan\u0027s patch lands, this will be the canonical .proto definition for both Chrome and libcast.  And landing and possibly tweaking the proto changes will be less painful than doing so when they are part of a larger patch.",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8e9e793_dd4e1a61",
        "filename": "cast/common/channel/proto/cast_channel.proto",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b4a64cb3_6f75cdc6",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "499fe18f_1da11e72",
        "filename": "util/json/json_value.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-22T00:51:32Z",
      "side": 1,
      "message": "Nit: newline between declarations",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f954f4a4_94bf8b2e",
        "filename": "util/json/json_value.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-02T23:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "499fe18f_1da11e72",
      "revId": "6aade4bfc50f344906decd7085775220d9cb7234",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}