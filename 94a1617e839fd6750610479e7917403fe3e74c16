{
  "comments": [
    {
      "key": {
        "uuid": "90d873b0_e98f3a10",
        "filename": "base/scoped_pipe.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-10-30T22:27:11Z",
      "side": 1,
      "message": "So far this is only used for locals, but it seems like being able to send/recv/read/write to pipe_ after a const get() is strange.  I don\u0027t feel strongly either way though.",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddd5d1ce_62f35468",
        "filename": "base/scoped_pipe.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2018-11-01T01:08:04Z",
      "side": 1,
      "message": "This is akin to std::scoped_ptr\u003cT\u003e::get(): The const isn\u0027t saying that the pointed-to pipe (or socket) is const. Instead, it\u0027s saying this getter method won\u0027t mutate the fd (the pointer itself).\n\nAnother way to look at it:\n\n  const Foo* ptr \u003d ...;  // The Foo object is const, but the pointer can change.\n  Foo* const ptr \u003d ...;  // The pointer is const, not the Foo object.\n  const Foo* const ptr \u003d ...;  // Both Foo and the pointer-to-Foo are const.",
      "parentUuid": "90d873b0_e98f3a10",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbc59b3a_da7e481d",
        "filename": "discovery/mdns/domain_name.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-10-30T22:27:11Z",
      "side": 1,
      "message": "What\u0027s the motivation for this change?  Putting the value on the stack in exchange for a function call?",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90bcefcb_a4770b43",
        "filename": "discovery/mdns/domain_name.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2018-11-01T01:08:04Z",
      "side": 1,
      "message": "The problem is that the DomainName class is not trivially destructible. So, having a static const member introduces at-exit code. These are prohibited in Google C++ style. Also, this is something we\u0027d have to fix in the future anyway, in order to link this library into Chromium (there are waterfall checks for this).\n\nI thought about this a bit, and was tempted to bring in Chromium\u0027s base::NoDestructor\u003c\u003e; but didn\u0027t want to start bringing in lots of code into this source repo for just this one case. That, and using NoDestructor would still cause a memory leak on the heap (because of the std::vector\u003cuint8_t\u003e private member).\n\nAn alternative solution here would be to make DomainName a constexpr class that is trivially destructible. However, we\u0027d have to replace its std::vector\u003cuint8_t\u003e private member with something like a constant-size C array, e.g.,:\n\n  const uint8_t domain_name_[256];  // NUL terminated octet string, per RFC 1035.",
      "parentUuid": "cbc59b3a_da7e481d",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81eb02ab_3b9ca5b9",
        "filename": "discovery/mdns/embedder_demo.cc",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-10-30T22:27:11Z",
      "side": 1,
      "message": "Why is avoiding an at-exit destructor important here?  AFAIK it just means we don\u0027t control the order.  Is there something else?",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90e93499_9c1c2c43",
        "filename": "discovery/mdns/embedder_demo.cc",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2018-11-01T01:08:04Z",
      "side": 1,
      "message": "Perhaps it\u0027s less important in the standalone demo app. Mostly, I felt this was better than putting extra compiler config in the BUILD.gn file target for this executable.\n\nOne could also make the argument that setting g_services to nullptr is a higher-level logical statement to the effect of, \"No object should be referring to any of the entries in ServiceMap at this point.\"",
      "parentUuid": "81eb02ab_3b9ca5b9",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a60799_1b423c41",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-10-30T22:27:11Z",
      "side": 1,
      "message": "This would require the definition of EventWaiterPrivate be visible, which isn\u0027t allowed in the current architecture.  But I suppose part of the TODO could be to look at changing that.",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb18e79_3f5521b9",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2018-11-01T01:08:04Z",
      "side": 1,
      "message": "IIUC, what we are trying to do here is something like this:\n\n  class EventWaiter {\n   public:\n    virtual bool WatchUdpSocketReadable(socket) \u003d 0;\n    virtual bool StopWatchingUdpSocketReadable(socket) \u003d 0;\n    ...\n  };\n\n  class EventWaiterLinux : public EventWaiter {\n    ...implements all the pure virtual methods...\n  };\n\n...but we know we don\u0027t need the overhead of run-time virtual method calls since there should only be one impl, and this is known at compile/link time.\n\nIn most cases like this, in Chromium code, it\u0027s usually fine to just define a NON-virtual EventWaiter class and put the definition of the methods in separate per-platform .cc files (or have the embedder define them).\n\nWhat really made me put the TODO here was that I changed InternalServices and now this was leaking memory: I had to add a DestroyEventWaiter() call too. It\u0027s so easy, in future code changes, and by people not intimately familiar with the code, to forget to explicitly destroy things. So, IMHO, it\u0027s good practice to put some reasonable code structure in place to avoid those mistakes.",
      "parentUuid": "b9a60799_1b423c41",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "611b8aea_92a8b308",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-10-30T22:27:11Z",
      "side": 1,
      "message": "Should retain the ull as only %lu is the printf format.  Here and below.",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6036d278_2aa43876",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2018-11-01T01:08:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "611b8aea_92a8b308",
      "revId": "94a1617e839fd6750610479e7917403fe3e74c16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}