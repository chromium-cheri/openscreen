{
  "comments": [
    {
      "key": {
        "uuid": "a1678e41_eb746664",
        "filename": "cast/standalone_receiver/install_demo_deps_debian.sh",
        "patchSetId": 10
      },
      "lineNbr": 3,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "End sentence w/ period.",
      "range": {
        "startLine": 3,
        "startChar": 70,
        "endLine": 3,
        "endChar": 77
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e06d83d_9cbbef7a",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 10
      },
      "lineNbr": 64,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "This is supposed to be bitrate, not samplerate. IIRC, for Opus, this can be 0, which means \"automatic\" (and Opus will usually use around 128kbps).",
      "range": {
        "startLine": 64,
        "startChar": 35,
        "endLine": 64,
        "endChar": 40
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efb08466_231e9208",
        "filename": "cast/standalone_receiver/simple_message_port.h",
        "patchSetId": 10
      },
      "lineNbr": 7,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "nit: add newline above this line",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 17
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c92f45fb_99e1ae6d",
        "filename": "cast/standalone_receiver/simple_message_port.h",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "Chromium style: Also need to declare a ctor, and define it as default in the .cc file.",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f3bc01_3711c8e1",
        "filename": "cast/streaming/answer_messages.h",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "Nice!",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 16
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "673faceb_a7559f39",
        "filename": "cast/streaming/messages.h",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "Delete this file now (since there\u0027s a util/simple_fraction.*)? and the .cc file?",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 9,
        "endChar": 0
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00417b4f_ae9fe36d",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "naming: This isn\u0027t hex bytes, this is raw bytes, right? Suggest: kAesBytesSize",
      "range": {
        "startLine": 68,
        "startChar": 14,
        "endLine": 68,
        "endChar": 30
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c20d95e2_7f936614",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 10
      },
      "lineNbr": 72,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "nit: constexpr int kAesStringLength",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 29
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80fd85c5_761f37e8",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 10
      },
      "lineNbr": 78,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "This is not kHexDigitsPerByte. It\u0027s the number of fields. We\u0027re using the sscanf() to parse two 16-char hex fields.\n\nIf you want this calculated from constants, perhaps:\n\n  constexpr int kHexDigitsPerScanField \u003d 16;\n  constexpr int kNumScanFields \u003d kAesStringLength / kHexDigitsPerScanField\n  unint64_t quads[kNumScanFields];",
      "range": {
        "startLine": 78,
        "startChar": 17,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f30ffd5_8298dd4a",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "This should be kNumScanFields.",
      "range": {
        "startLine": 82,
        "startChar": 54,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dff14a05_554ed67a",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 10
      },
      "lineNbr": 118,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-01-10T00:15:10Z",
      "side": 1,
      "message": "How about just use sprintf() here?\n\n  uint64_t quads[kNumScanFields];\n  quads[0] \u003d ReadBigEndian\u003cuint64_t\u003e(bytes.data());\n  quads[1] \u003d ReadBigEndian\u003cuint64_t\u003e(bytes.data() + 8);\n  char result[kAesBytesSize * kHexDigitsPerByte + 1];\n  sprintf(result,\n          \"%16\" PRIx64 \"%16\" PRIx64,  // need to check: do these do zero-padding\n                     // ...or is it: \"%016\" PRIx64 \"%016\" PRIx64\n          quads[0], quads[1]);\n  return result;",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 118,
        "endChar": 1
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be00baa_195cb885",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 10
      },
      "lineNbr": 118,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-10T00:43:46Z",
      "side": 1,
      "message": "That\u0027s similar to what the code did before.\n\nBut calling into sprintf() requires parsing a format string, and assumes the next developer remembers the format string syntax (I don\u0027t).  Moreover, if we ever want to write strings of different length, it\u0027s not helpful.\n\nThe code above is comparable line-wise, requires few instructions and is self-documenting.  It would be even shorter line-wise by inlining the nibble computations.\n\nMaybe Jordan should have the final say :-)",
      "parentUuid": "dff14a05_554ed67a",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 118,
        "endChar": 1
      },
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edc54ed6_6e337cb6",
        "filename": "util/simple_fraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-10T21:16:19Z",
      "side": 1,
      "message": "This isn\u0027t symmetric with ToString().",
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "135d8ce9_ac1305be",
        "filename": "util/simple_fraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-10T21:16:19Z",
      "side": 1,
      "message": "So \"1/0\" is not legal?  It\u0027s another case where FromString(ToString(SimpleFraction{1,0})) won\u0027t work.  Please document in comments",
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dfb2c0a_ade0332a",
        "filename": "util/simple_fraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 61,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-10T21:16:19Z",
      "side": 1,
      "message": "Return +NaN or -NaN.",
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39fe0939_1c814a40",
        "filename": "util/simple_fraction.h",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-01-10T21:16:19Z",
      "side": 1,
      "message": "Is there code that needs to represent infinity?  This basically makes int min/int max ambiguous.",
      "revId": "4158204cb91439778a3616ca82d776c6d01ce006",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}