{
  "comments": [
    {
      "key": {
        "uuid": "1b9132a6_b03aba00",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-31T20:12:31Z",
      "side": 1,
      "message": "as_hierarchy or to_hierarchy maybe?\nOr just store IDs in hierarchy?",
      "range": {
        "startLine": 94,
        "startChar": 19,
        "endLine": 94,
        "endChar": 32
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6061c51_5accc39a",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-02T22:38:11Z",
      "side": 1,
      "message": "I prefer not to store it as a hierarchy, but can make this change if you have a strong opinion\n\nFor now, I\u0027ve updated to to_hierarchy()",
      "parentUuid": "1b9132a6_b03aba00",
      "range": {
        "startLine": 94,
        "startChar": 19,
        "endLine": 94,
        "endChar": 32
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ec6d04d_d2becf2c",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-02T23:05:24Z",
      "side": 1,
      "message": "Could you please explain why you prefer not store IDs as hierarchy?",
      "parentUuid": "b6061c51_5accc39a",
      "range": {
        "startLine": 94,
        "startChar": 19,
        "endLine": 94,
        "endChar": 32
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "039c0b34_5d5243b3",
        "filename": "platform/api/trace_logging_types.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-31T20:12:31Z",
      "side": 1,
      "message": "Please add operator!\u003d as well\ninline bool operator!\u003d(const TraceIdHierarchy\u0026 lhs,\n                       const TraceIdHierarchy\u0026 rhs) {\n  return !(lhs \u003d\u003d rhs);\n}",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 22
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b96cb5e1_603edc56",
        "filename": "platform/api/trace_logging_types.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-02T22:38:11Z",
      "side": 1,
      "message": "Good catch! I always forget that defining one doesn\u0027t define both",
      "parentUuid": "039c0b34_5d5243b3",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 22
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7932cb6_3043dcbe",
        "filename": "platform/test/trace_logging_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-31T20:12:31Z",
      "side": 1,
      "message": "Here and below why are there so many unused arguments?",
      "range": {
        "startLine": 43,
        "startChar": 5,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee29001e_1d932dde",
        "filename": "platform/test/trace_logging_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-02T22:38:11Z",
      "side": 1,
      "message": "The unused arguments are required. The function passed to \n.WillOnce(Invoke(...)) in the tests must have the same parameters as the function being tested. Since the tested function has either 5 or 7 args (depending on which function it is), the functions here need to have the same number\n\nThat\u0027s also why it was simpler to have template arguments than to add extra parameters for the test value args",
      "parentUuid": "e7932cb6_3043dcbe",
      "range": {
        "startLine": 43,
        "startChar": 5,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2d19ddb_0fc149e9",
        "filename": "platform/test/trace_logging_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-02T23:05:24Z",
      "side": 1,
      "message": "You might be able to use testing::WithArgs to not have functions with 5 or 7 arguments and only check the arguments you need.",
      "parentUuid": "ee29001e_1d932dde",
      "range": {
        "startLine": 43,
        "startChar": 5,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "f8cb1a1e1cf2e86bd4324904f20fd3eb3be1ffbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}