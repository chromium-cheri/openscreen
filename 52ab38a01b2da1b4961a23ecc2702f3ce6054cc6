{
  "comments": [
    {
      "key": {
        "uuid": "46d493e9_f74f43ff",
        "filename": "osp/impl/discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 330,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Might make this more clear with:\n\nt_seconds \u003d ...\nnow_seconds \u003d ...\nnext_seconds \u003d ...\nnext_millis \u003d next_seconds * 1000\nreturn next_millis",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6c37ee2_2ffb0f5e",
        "filename": "osp/impl/discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 330,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "See new CL",
      "parentUuid": "46d493e9_f74f43ff",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70c938d5_164319f8",
        "filename": "osp/impl/internal_services.cc",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Why does the NetworkRunner need a singleton instead of just creating a new NetworkRunner here and letting the existing global thing be the singleton, and have that own the NetworkRunner?",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f54fec4c_e6860509",
        "filename": "osp/impl/internal_services.cc",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "Singleton has been removed in new CL",
      "parentUuid": "70c938d5_164319f8",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dde5554_a93ed26f",
        "filename": "osp/impl/internal_services.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Is this owned?  If so, should we use a unique_ptr?  If not, we need to define the lifetime.",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be77735_699036bb",
        "filename": "osp/impl/internal_services.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "Defined the lifetime",
      "parentUuid": "5dde5554_a93ed26f",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03e54aca_35757aa4",
        "filename": "osp/impl/mdns_responder_service.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Each method could just have something like:\n\nif (!task_queue_-\u003eIsCurrent()) {\n  task_queue_-\u003ePost([...] this-\u003eThisMethod(...));\n  return;\n}\n\nSee an example in WebRTC:\n\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/call/call.cc?type\u003dcs\u0026q\u003dIsCurrent+file:%5Esrc/third_party/webrtc/+package:%5Echromium$\u0026g\u003d0\u0026l\u003d1184\n\n\nMight be cleaner than this",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f75b4887_0272dd28",
        "filename": "osp/impl/mdns_responder_service.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "I actually find the current approach much clearer - using this approach involves keeping track of the current thread and adds other complexity that embedders would need to worry about when writing their own implementations\nMy approach avoids this complexity - plus the difficulty iof having double methods is hidden from the caller since the internal version is private\n\nLets discuss this further in person if you still strongly prefer the approach described above",
      "parentUuid": "03e54aca_35757aa4",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdbeb95_8711e494",
        "filename": "osp/impl/mdns_responder_service.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Why does these have to be protected?",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b515ca5_09beefee",
        "filename": "osp/impl/mdns_responder_service.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "The UnitTests need access via a child class",
      "parentUuid": "0bdbeb95_8711e494",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9aff328_a972a4af",
        "filename": "osp/impl/mdns_responder_service.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Needs comment about what the lifetime is when it\u0027s passed in.",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "410669cd_01b898ed",
        "filename": "osp/impl/protocol_connection_client_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Seems like the NetworkRunner should be passed into ProtocolConnectionClientFactory::Create.",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2245fc26_0df21cba",
        "filename": "osp/impl/protocol_connection_client_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "PTAL at new CL. I avoid using a singleton by passing around the NetworkRunner as described",
      "parentUuid": "410669cd_01b898ed",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4ae588a_9d62a1fd",
        "filename": "osp/impl/quic/quic_client.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Could use comment. What does it do?",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5495a533_ae41e32b",
        "filename": "osp/impl/quic/quic_client.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4ae588a_9d62a1fd",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbf2f769_1ae4c718",
        "filename": "osp/impl/quic/quic_connection_factory_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T00:59:38Z",
      "side": 1,
      "message": "I couldn\u0027t come up with a better approach than to wrap our task runner as the Chromium Task Runner (which in Chromium means it\u0027s the Chromium TR wrapped as our TR wrapped as the Chromium TR) - anyone have a better idea?",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 56
      },
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f96997d_6f428e00",
        "filename": "osp/impl/quic/quic_server.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "It seems like just calling this here would make more sense:\n\n  network_runner_-\u003ePostRepeatedTask(QuicServer::CleanConnections,\n                                    platform::Clock::duration(500));\n\n\nThere ought to be another way to make the tests avoid this (like a frequency setting that\u0027s so big for unit tests that it never happens).",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f36da2d2_0a85ac12",
        "filename": "osp/impl/quic/quic_server.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "This class doesn\u0027t currently know about the Task Runner - I used this indirection to avoid needing to give it that knowledge, not for UT purposes",
      "parentUuid": "5f96997d_6f428e00",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a3cc0fa_e49dc857",
        "filename": "osp/impl/quic/quic_server.cc",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Magic number 500 is repeated twice.  It could use a named constant.",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6932d26b_c30a64ba",
        "filename": "osp/impl/quic/quic_server.cc",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-18T18:47:01Z",
      "side": 1,
      "message": "PTAL again - it might be clearer in the new CL",
      "parentUuid": "4a3cc0fa_e49dc857",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b28e724a_e8b4f605",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "What do we expect callers to do with an error?  What could you do?  It seems like we shouldn\u0027t return an error.",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41791d34_467e34c7",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:47:59Z",
      "side": 1,
      "message": "The only (current) case for a cancel read error is if the socket isn\u0027t actually being watched. So this could be used to signal we\u0027ve gotten into an error state, and can be checked with a OSP_DCHECK or similar was my intention. Same with adding a Read callback",
      "parentUuid": "b28e724a_e8b4f605",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b55a89d_5f4a8f93",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-24T20:36:39Z",
      "side": 1,
      "message": "IMO the DCHECK should just go directly in ReadRepeatedly and CancelRead in that case.",
      "parentUuid": "41791d34_467e34c7",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52090107_85106e15",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "Why not just let the callback post itself again?  I\u0027d like to keep the TaskRunner interface as small as possible.",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19851eac_ef5b200e",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:47:59Z",
      "side": 1,
      "message": "The only way I came up with to remove this was to add code everywhere that involves recursive lambdas, which are complex enough I wanted to centralize the code in one place\n\nIf you have a simple way to implement this, I would much prefer it to this one - What are your thoughts?",
      "parentUuid": "52090107_85106e15",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ca7c692_04605c5f",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-24T20:36:39Z",
      "side": 1,
      "message": "If we keep this, it should be: std::function\u003cClock::duration\u003e()\u003e; the units are completely unclear ATM.",
      "parentUuid": "19851eac_ef5b200e",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4fe68a5_04196acb",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T00:59:38Z",
      "side": 1,
      "message": "This and the associated class are defined in the Header rather than .cc so that the function can be inlined. If this is not worth the perf benefit, let me know and I will pull it to the .cc",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ddc9f6c_503e9e50",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-18T18:54:57Z",
      "side": 1,
      "message": "I feel like these methods should only be available on concrete impls.  I don\u0027t see why the interface needs these methods.  Only code that knows what concrete impl is has would need to call these (I think).",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "799bb9e2_b2b5fc06",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:47:59Z",
      "side": 1,
      "message": "This is being discussed in the Part 1 CL as-well - if there is a consensus for removing it, I am happy to. My reasoning for adding it:\n1) Elsewhere in this CL, we are required to wrap our TaskRunner as a Chromium TaskRunner again (Chromium QUIC requires it), and this method is exposed for that purpose. See osp/impl/quic/quic_connection_factory_impl.cc for more details.\n2) In the new iteration of Part 1, We allow the embedder to inject in a Task Runner of their choice into the Network Runner. Since we do not know the type of Task Runner any longer, we cannot make such assumptions here and need to be able to initialize the Task Runner without that information (if initialization is needed). I\u0027ve added this method as a requirement to allow for such initialization\n\nI am happy to make the change as long as these issues are considered, so I will wait for a bit further discussion on Part 1 now that I\u0027ve outlined my reasoning :)",
      "parentUuid": "8ddc9f6c_503e9e50",
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e47f6b49_2ec3064a",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T00:59:38Z",
      "side": 1,
      "message": "For now, I have included support for Write callbacks. They were already written + tested before we decided against including them in the NetworkRunner layer (based on our meeting mid last week), so I wanted to check everyone\u0027s thoughts before pulling this out.\n\nIn the current setup, these methods are written here but not exposed in NetworkRunner, so callers cannot access them. For this reason I see it as reasonable to not delete the existing code. Especially since we\u0027ve already decided it needs to be removed and hasn\u0027t been yet\n\nThoughts @pthatcher @mfoltz",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "52ab38a01b2da1b4961a23ecc2702f3ce6054cc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}