{
  "comments": [
    {
      "key": {
        "uuid": "329f40c5_48f9a393",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Overall looks OK - a few suggestions",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bac70f49_6054e52f",
        "filename": "cast/README.md",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Are there instructions on how to generate your own keypair?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cbee53b_7a21e0d7",
        "filename": "cast/README.md",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "What does it mean to pass just the pkey without the corresponding certificate?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80fe7ee1_9cb35154",
        "filename": "cast/README.md",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Are \u003cprivate_key\u003e and \u003ccertificate\u003e file arguments?  What format are the files?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3a225eb_4e8f9cae",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Maybe cast_allow_developer_certificate to be more precise?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "587317a2_fcff2322",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-10-02T22:35:56Z",
      "side": 1,
      "message": "When all the code is built w/o self-signed certs, how will integration tests be able to run? Or, are we going to disable building all integration tests (and some unit tests) when this is false? If so, what is our testing plan for ensuring platform integration with Chromium, where I assume we\u0027ll have this set to false? We\u0027ll lose a lot of testing when \"rolls\" happen.\n\nInstead, how about we just have embedders only create CastTrustStores with TrustStore::Mode::kStrict? Meaning, they can just call TrustStore::CreateInstanceFromPemFile(path, mode) with a fixed 2nd arg (kStrict). The effect would be the same: a build-time restriction on disallowing self-signed certs.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f741c81_7a25c1e0",
        "filename": "cast/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-03T00:01:18Z",
      "side": 1,
      "message": "This is all a little strange to me, so maybe someone can explain the reasoning here (which is related to how behavior with this flag differs from our testing setup).  ISTM that the functionality we want already exists in CastTrustStore::CreateInstanceForTest.  For example, the cast_cert_validator_internal.cc changes to avoid the CA check are unnecessary because GenerateRootCert() _does_ set the CA info (which made it work up to this point in integration tests).  CreateInstanceForTest is already something embedders shouldn\u0027t call, although it might still work to have it set the mode flag to kAllowSelfSigned and OSP_CHECK that somewhere based on the build flag if we really think that\u0027s worthwhile.\n\nAlso, if the issue is whether you can \"naively\" generate a self-signed certificate with command-line openssl that works, we could always add a little utility that just calls GenerateRootCert() and exits (although, also saving the key).\n\nSo I think the bottom line is: 1. do we _need_ plain self-signed certificates to work as opposed to certificates from GenerateCredentials? 2. am I missing some other point of this flag?",
      "parentUuid": "587317a2_fcff2322",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c16793e9_97f6e7da",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Move inside #ifdef where it is used below",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8233cb60_8b7c7ba3",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Wrap in #ifdef",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3fda425_851ffa2b",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 6
      },
      "lineNbr": 173,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Please use the real type here, it isn\u0027t obvious from context.",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2560430_07f5c032",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Use a switch statement?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a524902c_fde212f7",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 6
      },
      "lineNbr": 193,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "Wrap in #ifdef",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "719752e5_1dca8e91",
        "filename": "cast/receiver/channel/static_credentials.cc",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-03T00:01:18Z",
      "side": 1,
      "message": "Should this get written to a file as well for re-use across receiver restarts without restarting the sender to reload another generated cert?  Of course, making this on the command-line is simpler than the cert...",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d7d0868_6d297409",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "How long does key generation take?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed9de8fb_d4ba83d9",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "OSP_LOG_FATAL?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3953b9a2_a389e210",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2020-10-03T00:01:18Z",
      "side": 1,
      "message": "s/build/built/",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d09d4b6_35e46d42",
        "filename": "cast/standalone_receiver/main.cc",
        "patchSetId": 6
      },
      "lineNbr": 236,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2020-10-02T22:38:40Z",
      "side": 1,
      "message": "OSP_LOG_FATAL?",
      "revId": "d9f095745f09f6d49ebce5867db74fbfd908a344",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}