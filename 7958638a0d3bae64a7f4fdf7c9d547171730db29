{
  "comments": [
    {
      "key": {
        "uuid": "d0fd32f0_7b6f4354",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Aren\u0027t all of these going to be something that we\u0027ll want defined in the CDDL?  Should we put a TODO to include them from the file generated by the tool?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c4930c3_6927eeda",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Given the way enums are implemented in the CDDL tool now, I don\u0027t know if that\u0027s a good idea.  I put a TODO to investigate this again when we get further along.",
      "parentUuid": "d0fd32f0_7b6f4354",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc74e53a_35dcc668",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Should this be OnRemotelyClosed, then?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe671b8b_33a57699",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc74e53a_35dcc668",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f3c1143_4d87db45",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "QUIC is going to require us to copy the stream into our own buffer as it arrives.  Ideally, the CBOR parser would give us a string view instead of copying it.  Then we could offer a string view here as well with the rule that the callback must either use it immediately or copy it, because once the callback is done, the string view will be destroyed.\n\nSo, I think using a string view on both of these below would be the best way to give us the flexibility to be efficient.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3acc0d3_8d5ad5c4",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Changed this TODO to specify string view when we have one.",
      "parentUuid": "2f3c1143_4d87db45",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb9af647_cf1ad31d",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Should probably specify that it\u0027s UTF8.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4730afce_1dd935c4",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb9af647_cf1ad31d",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8118e9d_f4be5723",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "A std::string can hold binary data as well, so I don\u0027t see much downside to having this be std::string, and a lot of upside.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c799f2c7_5dcd6a9b",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "I think std::vector\u003cuint8_t\u003e is clearer here.",
      "parentUuid": "c8118e9d_f4be5723",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d42caf44_08c36d14",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "And if we can use string views, let\u0027s just use them for all string parameters, like here.  They are much nicer to use for things like this.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a53f3450_c3462181",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "We don\u0027t have string views.  If we add something like abseil, there will be lots of opportunities for conversion like this one though, so I didn\u0027t add a TODO here specifically.",
      "parentUuid": "d42caf44_08c36d14",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84b189ca_7dffe8dc",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Shouldn\u0027t these return const refs instead of copying?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae1ce8d_c99ec15b",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Good catch; copy pasta.",
      "parentUuid": "84b189ca_7dffe8dc",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "474a03d1_8b208c31",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "More string views if possible :).",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eac4b22_03ab29ae",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "474a03d1_8b208c31",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83b02ba4_c7f83935",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Why not just Close()?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a10d2a41_0c777ec8",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83b02ba4_c7f83935",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aee8d9e_e276c12f",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "I don\u0027t understand how this is different from Close().  Maybe Close() with a reason enum?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe80069_5ac9a992",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4aee8d9e_e276c12f",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "271ca5fb_fbcba360",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "I think it should be in only one place.  Either works.  Here seems more natural to me, unless we have use cases where you would terminate a Presentation without connecting to it.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db5f764e_dbe2ce38",
        "filename": "api/public/presentation_common.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "A presentation API user couldn\u0027t, but an embedder might.  For example, if a receiver wants to terminate a presentation after an idle timeout, there might be no active connections (from the embedder\u0027s POV, though the library would still have a QUIC control channel open).  For reference, Chromium puts Terminate() only on the controller, not the connection objects.",
      "parentUuid": "271ca5fb_fbcba360",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0d200bf_ce1f40ab",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "I\u0027m kind of worried about the threading of the various callbacks.  Are they all going to be called back on one thread?  Or is there no guarantee of what thread they will be called back on?  What does the callback need to assume about what thread it is running on?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dee2668d_664d162e",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Right now we\u0027re completely single-threaded, but there\u0027s an open item in the platform API to define our task/thread model that the embedder or platform needs to provide.",
      "parentUuid": "a0d200bf_ce1f40ab",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b25370f8_7cc7b8cd",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "How are we going to return a unique_ptr but also keep track of the connection internally in some kind of data structure?  Will we have two (one external and one internal)?  \n\nThe way we did this in WebRTC was to have an interal owned thing and then an external view into it via an ID that was held in the external thing.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b22af8f1_fc8c41d8",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "What you described is basically what I was imagining.",
      "parentUuid": "b25370f8_7cc7b8cd",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fcefb4a_e423d1cb",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "What\u0027s the ownership of the observer?  Does the caller of RegisterScreenWatch guarantee that it will stay alive until CancelScreenWatch is called?  If so, that seems a bit easy to screw up.  Could we make this a little cleaner by having RegisterScreenWatch return a ScreenWatch object, which when destroyed, will cancel the watch?  That way, the observer can own the watch and when the observer is destroyed, the watch will automatically be canceled.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39973f28_4d2c81fa",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fcefb4a_e423d1cb",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5d43846_31e12bbd",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Who would ever call this?  And doesn\u0027t it cause more pain of needing to track the lifetime of the observer?  What if someone gets it and then someone else cancels the watch?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92f532b6_b4f4bdbc",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "I actually don\u0027t know why this is here either.  Removed.",
      "parentUuid": "a5d43846_31e12bbd",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc7316c9_956848a5",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "I\u0027m worried about memory management again :).\n\nIs this a one-time-use delegate?  Can the caller discard the delegate once it\u0027s called once?  Does it have to keep the delegate alive until one of those is called?  What if the caller of StartPresentation has a timeout and wants to give up and move on?  Is it not allowed to delete the delegate?\n\nMaybe like we have a cancellable watch, we could have a cancellable start request.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9711df5f_d1271402",
        "filename": "api/public/presentation_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc7316c9_956848a5",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31129670_64dee840",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "What is the return value?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66fd95da_eb12f660",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "True if the embedder accepts the request.  I added this to the comment.",
      "parentUuid": "31129670_64dee840",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4785bf7_11afed29",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Why not, instead, return a PresentationConnection and let the callback do a SetDelegate on the PresentationConnection if it wants to?  That might make it easier to manage the lifetime of the delegate.",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4c08cb1_adffed6e",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "1. I feel that opens us up to complexity in PresentationConnection because a null delegate would be allowed, so any messages that arrive before a delegate is set would have to be discarded or buffered.  If we\u0027re okay with simply discarding messages/states in that case, that might work.\n\n2. I\u0027m not sure what logic between PresentationConnection and QUIC will need to exist yet, so I\u0027m not sure if it makes sense to let the embedder construct a PresentationConnection directly.  This flow would be much nicer if it could though, so I added a TODO to reconsider this once the PresentationConnection code lands.",
      "parentUuid": "a4785bf7_11afed29",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff21fe80_f271d9a8",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "We should make clear the lifetime (must outlive the receiver).\n\nAnd can it set it to null if it wants to no longer have an observer?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad8d831_882b35a0",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "I changed this naming to a Delegate because that\u0027s more accurate, which hopefully makes the lifetime clearer.  I added a comment here as well.  Yes, it can set the delegate to null.",
      "parentUuid": "ff21fe80_f271d9a8",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12276a0_728f60ce",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2018-09-27T04:37:59Z",
      "side": 1,
      "message": "Why not, instead, have a PresentationRequest object with a Terminate and Response method?",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c3b3124_e94624e4",
        "filename": "api/public/presentation_receiver.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-09-28T06:39:51Z",
      "side": 1,
      "message": "Grammatically, I think we respond to a PresentationRequest but terminate a Presentation.\n\nConsidering a Presentation object with a Terminate method would fall under the earlier TODO about where Terminate should really go.  That is a good option though.  I don\u0027t want to do one and not the other now though.",
      "parentUuid": "a12276a0_728f60ce",
      "revId": "7958638a0d3bae64a7f4fdf7c9d547171730db29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}