{
  "comments": [
    {
      "key": {
        "uuid": "c60802b0_445ad3ca",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Should this be AddRecords? Seems plural-y",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eea7894_ba267bd3",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "const auto?",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35d3c6c6_90ceb38e",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Nit: consider !extra_records.empty(), since it makes more sense as a boolean, currently this decays the integer non-zero to a true right? As a general rule it may be more performant (e.g. for some types like List .empty() is O(1) and, .size() is O(n)), but I don\u0027t think it really matters for array or vector.",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7348330_b205ac24",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "What\u0027s the value of requesting inline here? I\u0027m curious if we should just be having the compiler rules set appropriately, e.g. for modern versions of clang they have the following inline options:\n\nanalyzer-config ipa\u003dnone - All inlining is disabled. This is the only mode available in LLVM 3.1 and earlier and in Xcode 4.3 and earlier.\n\nanalyzer-config ipa\u003dbasic-inlining - Turns on inlining for C functions, C++\nstatic member functions, and blocks â€“ essentially, the calls that behave like simple C function calls. This is essentially the mode used in Xcode 4.4.\n\nanalyzer-config ipa\u003dinlining - Turns on inlining when we can confidently find\nthe function/method body corresponding to the call. (C functions, static functions, devirtualized C++ methods, Objective-C class methods, Objective-C instance methods when ExprEngine is confident about the dynamic type of the instance).\n\nanalyzer-config ipa\u003ddynamic - Inline instance methods for which the type is\ndetermined at runtime and we are not 100% sure that our type info is correct. For virtual calls, inline the most plausible definition.\n\nhttps://clang.llvm.org/docs/analyzer/developer-docs/IPA.html",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94a94756_efd1eec8",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "NIT: What do these records have in common? Why are they the accepted kinds?\n\nI would probably prefer something like:\n\n// See some spec for why these are the records we care about.\nconstexpr std::array\u003cDnsType, 4\u003e kAcceptedRecordTypes{DnsType::kSRV, DnsType::kTXT, DnsType::kA, DnsType::kAAAA};\n\nOSP_DCHECK(std::find(kAcceptedRecordTypes.begin(), kAcceptedRecordTypes.end(), type) !\u003d kAcceptedRecordTypes.end());",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50b96534_0c694843",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "std::move add_func? It\u0027s not directly returned so this causes a copy, I think? Seems like the rest are trivially copyable.",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d94e27b5_e93c3e33",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Move here?",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6c70368_b68f11ac",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "NIT: this could be a for loop if you use kAcceptedRecordTypes (defined in comment above).",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99e6d6da_604e014f",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Just double checking... you need to add kAAAA records since kA records have already been consumed in the AddResponseRecords call?",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ed2727f_6d7b4dfb",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Nit: const bool.",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6c35ed5_45a5f6e3",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 172,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Consider leaving send_response uninitialized and constructing this lambda in the else loop, so it doesn\u0027t get unnecessarily constructed. This might be optimized out by the compiler, but hard to say.",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "652c5113_d7ffae5e",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "std::move(send_response)?",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9790a0c2_1c19f0b5",
        "filename": "discovery/mdns/mdns_responder.cc",
        "patchSetId": 3
      },
      "lineNbr": 210,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Nit: consider !message_answers().empty(). As a general rule it may be more performant (e.g. for some types like List .empty() is O(1) and, .size() is O(n)), but I don\u0027t think it really matters for array or vector.",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac32f95_eec91a20",
        "filename": "discovery/mdns/mdns_responder.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "Didn\u0027t we decide \u003d default should be in the cc file?",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa7fdd1b_92555149",
        "filename": "discovery/mdns/mdns_responder_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-12-04T19:00:58Z",
      "side": 1,
      "message": "You use these lambdas several times. Consider refactoring them into a method, e.g.\n\nbool IsTxtRecord(MdnsRecord record) {\n    return record.dns_type() \u003d\u003d DnsType::kTXT;\n}\n\nin the anonymous namespace at the top of the file, then you can just do:\n\nEXPECT_EQ(std::find_if(records.begin(), records.end(), IsTxtRecord)), records.end());\n\nOr better yet, you could instead use:\n\nEXPECT_THAT(records, Not(Contains(DnsType::kA)));\n\nhttps://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md",
      "revId": "e8a8d05d316496741957f48549c5337e69649944",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}