{
  "comments": [
    {
      "key": {
        "uuid": "79f7a39a_78a52fae",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "It seems really easy to forget to free memory in this case.  Would it be better to pass in ownership of the buffer instead?  What would one do with the buffer if this failed anyway?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "390fe583_20cb0411",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "I don\u0027t understand: What memory is being leaked here? I think, perhaps, I didn\u0027t write decent code comments around what\u0027s happening here.\n\nI\u0027ve revised the header file comments to make it clear it\u0027s not the std::vector that is becoming owned, but that the contents of it are being taken out of it. The caller still owns the actual std::vector.",
      "parentUuid": "79f7a39a_78a52fae",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d482d33_780e3db8",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T23:36:19Z",
      "side": 1,
      "message": "Oh... I misunderstood. That clears it up.",
      "parentUuid": "390fe583_20cb0411",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f113e20_ee53abdf",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "Would it be safer to do by checking that chunks_ is empty?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d2a4d66_ea295420",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "It is true that, in the impl I have here, num_missing_packets_ being \"unknown\" is always state-consistent with chunks_ being empty. However, the fact that chunks_ is empty is just an optimization (i.e., memory was being freed after the client was done with the last frame). In other words, |num_missing_packets_| being \"unknown\" is the canonical source of truth in the logic here.",
      "parentUuid": "4f113e20_ee53abdf",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba49a430_c1286607",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "else if?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4883737b_919b9dc7",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Normally, I would. However, I felt this allowed for better placement of the code comment. (There\u0027s just a few too many LOC between here and the top of the overall if-statement, IMHO.)",
      "parentUuid": "ba49a430_c1286607",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb859140_53a8b64e",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "Seems like it\u0027s worth logging something.",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "340f2fe7_913455ed",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Whoops! Missed this one. Done.",
      "parentUuid": "cb859140_53a8b64e",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0018732b_63d06c90",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "Seems like it\u0027s worth logging something.",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7e0874b_3295eaae",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Not here. This is a very common case: e.g., packet re-transmits from the Sender that turn out not to be needed because an ACK happened while the packets were already in-flight over the network.",
      "parentUuid": "0018732b_63d06c90",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d0ec511_3b001b5f",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T23:36:19Z",
      "side": 1,
      "message": "Then can you leave a comment like \"// don\u0027t log because this happens too often\"?",
      "parentUuid": "d7e0874b_3295eaae",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3c2cab3_63f393c6",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "Seems like std::optional would be a useful here",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2981a9fd_25de9c41",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Hmm...This is a bit of a personal-style issue: In small internal implementations, I rarely use std::optional with an integer, unless I actually need both the full value range of the integer *and* a \"null\" flag.",
      "parentUuid": "c3c2cab3_63f393c6",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "133b35c8_de7a76d4",
        "filename": "streaming/cast/frame_collector.cc",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T23:36:19Z",
      "side": 1,
      "message": "Yes, it\u0027s perhaps personal style.  I don\u0027t like magic numbers.   It\u0027s much harder to misuse a std::optional.",
      "parentUuid": "2981a9fd_25de9c41",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fd6300b_da672df1",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "SetFrameId",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9c7a07c_f0ca7a86",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Style guide says to use lower_case_naming() for inline getters/setters.",
      "parentUuid": "8fd6300b_da672df1",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d769363_adf8625e",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "CollectRtpPacket?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80509f8e_5e7897ec",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d769363_adf8625e",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c517c0c7_a54e3f8c",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "complete() or ready_to_assemble()?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd264d14_574f9e8a",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c517c0c7_a54e3f8c",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58697e26_8ee5dbdb",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "GetMissingPackets?\n\n(Append sounds a lot like you\u0027re appending to the frame, like Collect does).",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b512b8d1_2c663ed0",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58697e26_8ee5dbdb",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a585c6a_0796c40c",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 62,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "Part?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b1a025_297e9eee",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 62,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "Done: PayloadPart (to be more specific about it being just to store the data, and not any of the metadata).",
      "parentUuid": "2a585c6a_0796c40c",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ccfa6db_96d58788",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T00:31:36Z",
      "side": 1,
      "message": "chunks_total_size?  parts_total_size? collected_size?",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c8d7556_a87dffbb",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-30T23:25:34Z",
      "side": 1,
      "message": "IMHO, the naming I used is more-accurate than those suggestions. Perhaps you could explain what\u0027s wrong with my choice?",
      "parentUuid": "5ccfa6db_96d58788",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58263a1b_41dc339f",
        "filename": "streaming/cast/frame_collector.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-08-30T23:36:19Z",
      "side": 1,
      "message": "I was hoping it would reference the name of the collected chunks/parts to make it clear there\u0027s a relationship between this member and the previous one.",
      "parentUuid": "7c8d7556_a87dffbb",
      "revId": "d3591c8b90e7604ba8b939496bbe139cdfdaf648",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}