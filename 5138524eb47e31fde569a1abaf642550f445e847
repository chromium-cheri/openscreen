{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "db63f667_764f63e7",
        "filename": "cast/streaming/receiver_message.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-04-22T20:30:28Z",
      "side": 1,
      "message": "#include absl/optional.h",
      "revId": "5138524eb47e31fde569a1abaf642550f445e847",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22db607f_63a38091",
        "filename": "cast/streaming/receiver_message.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-04-26T17:05:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db63f667_764f63e7",
      "revId": "5138524eb47e31fde569a1abaf642550f445e847",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac36bfc_0b9343b8",
        "filename": "cast/streaming/receiver_message.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-04-22T20:30:28Z",
      "side": 1,
      "message": "Is there a reason why this couldn\u0027t be just an an openscreen::Error, which does have error codes defined?",
      "revId": "5138524eb47e31fde569a1abaf642550f445e847",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b25a0592_098ad7ea",
        "filename": "cast/streaming/receiver_message.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-04-26T17:05:25Z",
      "side": 1,
      "message": "The reason why there is a TODO is because this is part of the current control protocol specification--meaning that if we connect to a libcast-powered Cast device, then yes it can be an openscreen::Error, but legacy devices will not be an open screen error.\n\nI am leaning towards using openscreen::Error--but I\u0027m not completely convinced as is.",
      "parentUuid": "6ac36bfc_0b9343b8",
      "revId": "5138524eb47e31fde569a1abaf642550f445e847",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c54ab901_a915168d",
        "filename": "cast/streaming/receiver_message.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-04-26T19:16:44Z",
      "side": 1,
      "message": "Can you be more specific?  Does the protocol specification have defined error codes or is it just an arbitrary integer?  If there are error codes then the code is going to be much nicer by following the openscreen::Error pattern.\n\n\nThere is a TODO somewhere to split up Error::Code enum into sub-types so that individual code modules can define their own errors, but the tradeoff is having Error/ErrorOr take a template argument, or devising some other way to pass type information in and out of the Error object.",
      "parentUuid": "b25a0592_098ad7ea",
      "revId": "5138524eb47e31fde569a1abaf642550f445e847",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c027d96_8b21407c",
        "filename": "cast/streaming/receiver_message.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-04-26T20:05:34Z",
      "side": 1,
      "message": "Protocol spec just says \u003cint32\u003e but I have notes in the protocol around what Eureka currently uses:\n\n-1: Still initializing. Try again later.\n-2: Invalid or missing codec.\n-3: Startup failure.\n-4: Cast transport creation error.\n\n\nThe reason I want to resolve this separately is the case where a libcast Chrome instance is connected to a Eureka receiver, and we try to parse error code X as something meaningful to libcast when it is actually something else, or worse is invalid. What do we return if we get -2, which is not a valid openscreen::Error at all? \n\nI have some ideas and I don\u0027t think it\u0027s going to be a big problem (e.g. just return a generic error if we can\u0027t parse, and make it clear the error code may or may not mean anything) but was tracking separately because of this.",
      "parentUuid": "c54ab901_a915168d",
      "revId": "5138524eb47e31fde569a1abaf642550f445e847",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}