{
  "comments": [
    {
      "key": {
        "uuid": "b386784e_761de0b8",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-21T22:06:59Z",
      "side": 1,
      "message": "I think changing Register/Deregister/Update to return Errors instead of voids could be useful (and the same for mdns_service which exposes them). We might even be able to bubble these errors up though the DND-SD layer to the top-level discovery API\n\nIssues like:\n- We don\u0027t have Exclusive Ownership of the DomainName\n- Already Exists errors\n- etc...\n\nOr an error if the Embedder-overridden mdns_service Register/Deregister/Update methods somehow fail (even if it\u0027s just a generic error, it turns out that\u0027s all we need in our implementation of this class. So it seems reasonable to ask the same of an embedder).\n\nWhat do you think?",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 6
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4fba5f8_38fcd618",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-25T19:38:28Z",
      "side": 1,
      "message": "Updated newest iteration to include this. LMK your thoughts",
      "parentUuid": "b386784e_761de0b8",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 6
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "558fa484_53771fcb",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-27T21:23:28Z",
      "side": 1,
      "message": "LGTM.",
      "parentUuid": "a4fba5f8_38fcd618",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 6
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0b96e27_2e5e4094",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-21T22:06:59Z",
      "side": 1,
      "message": "I think the code would be simpler if this were:\nvoid UpdateRegisteredRecord(const MdnsRecord\u0026 old_record, const MdnsRecord\u0026 new_record);\n\nBut I\u0027m not sure if that is a reasonable interface. What are your thoughts?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 38,
        "endChar": 60
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "168edca8_d4059601",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-25T19:38:28Z",
      "side": 1,
      "message": "Updated newest iteration to have this. LMK your thoughts.",
      "parentUuid": "a0b96e27_2e5e4094",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 38,
        "endChar": 60
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fab6fe51_fa47446a",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-27T21:23:28Z",
      "side": 1,
      "message": "LGTM",
      "parentUuid": "168edca8_d4059601",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 38,
        "endChar": 60
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea11f10a_f4ba4561",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-21T18:13:42Z",
      "side": 1,
      "message": "This is a \u0027nice to have\u0027 - for now we proceed without the actual check and leave implementing this method as a TODO",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 54
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3de6486_21b746d1",
        "filename": "discovery/mdns/mdns_publisher.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-27T21:23:28Z",
      "side": 1,
      "message": "OK - I assume this is the API to name probing and collision handling?\n\nIf the caller calls this and gets a different name back, is it responsible for generating a new set of records with the new name?  I wonder if this API should take a set of records and update them appropriately.\n\nI would prefer leaving this out and adding it to a different patch with its implementation, and calls in the dnssd code.  WDYT?",
      "parentUuid": "ea11f10a_f4ba4561",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 54
      },
      "revId": "6bd34ebd2f5e010dfde65784552a199296058822",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}