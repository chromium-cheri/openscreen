syntax = "proto2";

package openscreen.cast;

option optimize_for = LITE_RUNTIME;
option java_multiple_files = true;

message SimpleHistogramBucket {
  optional int64 min = 1;
  optional int64 max = 2;
  optional int32 count = 3;
}

message SimpleHistogram {
  repeated SimpleHistogramBucket buckets = 1;
}

message SenderStatistic {
  enum Type {
    ENQUEUE_FPS = 0;
    AVG_CAPTURE_LATENCY_MS = 1;
    AVG_ENCODE_TIME_MS = 2;
    AVG_QUEUEING_LATENCY_MS = 3;
    AVG_NETWORK_LATENCY_MS = 4;
    AVG_PACKET_LATENCY_MS = 5;
    AVG_FRAME_LATENCY_MS = 6;
    AVG_END_TO_END_LATENCY_MS = 7;
    ENCODE_RATE_KBPS = 8;
    PACKET_TRANSMISSION_RATE_KBPS = 9;
    TIME_SINCE_LAST_RECEIVER_RESPONSE_MS = 10;
    NUM_FRAMES_CAPTURED = 11;
    NUM_FRAMES_DROPPED_BY_ENCODER = 12;
    NUM_LATE_FRAMES = 13;
    NUM_PACKETS_SENT = 14;
    NUM_PACKETS_RECEIVED = 15;
    FIRST_EVENT_TIME_MS = 16;
    LAST_EVENT_TIME_MS = 17;
  }
  optional double value = 1;
  optional Type type = 2;
}

message SenderHistogram {
  enum Type {
    CAPTURE_LATENCY_MS = 0;
    ENCODE_TIME_MS = 1;
    QUEUEING_LATENCY_MS = 2;
    NETWORK_LATENCY_MS = 3;
    PACKET_LATENCY_MS = 4;
    END_TO_END_LATENCY_MS = 5;
    FRAME_LATENESS_MS = 6;
  }
  optional SimpleHistogram histogram = 1;
  optional Type type = 2;
}

message SenderStats {
  repeated SenderStatistic audio_statistics = 1;
  repeated SenderHistogram audio_histograms = 2;
  repeated SenderStatistic video_statistics = 3;
  repeated SenderHistogram video_histograms = 4;
}

message RtpTimeDelta {
  optional int64 ticks = 1;
}

message RtpTimeTicks {
  optional int64 ticks = 1;
}
