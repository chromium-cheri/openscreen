{
  "comments": [
    {
      "key": {
        "uuid": "1b3d9428_288e6661",
        "filename": "discovery/dnssd/impl/constants.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-09T00:47:37Z",
      "side": 1,
      "message": "I considered moving this to a class, but the 2 methods we use to create them are in conversion_layer.cc:\nDnsQueryInfo GetInstanceQueryInfo(const InstanceKey\u0026 key);\nDnsQueryInfo GetPtrQueryInfo(const ServiceKey\u0026 key);\n\nNeither of these really makes sense (at least IMHO) as a ctor, so there didn\u0027t seem to be any benefit to making it a class. They could work as static factory methods, but that\u0027s really no different from the current approach\n\nWhat do you think? If you prefer that approach, I can create another follow-up CL (after this one) to accomplish that change",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 22,
        "endChar": 2
      },
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b65eb1e_1896c128",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2019-11-11T22:05:00Z",
      "side": 1,
      "message": "It looks like most of this function is duplicated in the ctors of InstanceKey and ServiceKey. Maybe we can factor the common parts into a helper function that takes a MdnsRecord and returns a struct containing instance ID, service ID, and domain ID, each of which is a std::optional\u003cstd::string\u003e that\u0027s only filled if the field was valid.",
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad940c6_b62a69b1",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-13T01:37:08Z",
      "side": 1,
      "message": "In a previous CL, Mark + Max made their preference for separate validation and ctor methods, rather than an ErrorOr\u003cInstanceKey\u003e style factory (Which it was in the previous CL, because it used to be a struct)\nThis was my attempt to satisfy that request, though I agree adding a bunch of duplicated code isn\u0027t great either\n\nI\u0027ve taken a stab at eliminating the duplicated code with a private factory method and a friend declaration - still not ideal, but I think it\u0027s an improvement\n\nWhat do you think?",
      "parentUuid": "4b65eb1e_1896c128",
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d84335b_d12a43d5",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2019-11-14T18:07:26Z",
      "side": 1,
      "message": "I\u0027d be interested to know why they didn\u0027t want an ErrorOr factory method, because it sounds fine to me; I couldn\u0027t find a relevant comment. What you have now seems fine to me as well.",
      "parentUuid": "1ad940c6_b62a69b1",
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b76c7b6a_cf9a77d3",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-14T21:50:51Z",
      "side": 1,
      "message": "I spent a while looking and can\u0027t find the CL where this was commented on. But if you\u0027re okay with the current approach, I won\u0027t continue to look",
      "parentUuid": "6d84335b_d12a43d5",
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59768575_018c718c",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2019-11-11T22:05:00Z",
      "side": 1,
      "message": "Nit: I think this would be easier to read without the !, and the two expressions flipped.",
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb1991a1_c87fc567",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-13T01:37:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59768575_018c718c",
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61fd053a_f4e3d95f",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2019-11-11T22:05:00Z",
      "side": 1,
      "message": "Nit: These could be combined into one return statement.",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 69
      },
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f90f293_47481f3b",
        "filename": "discovery/dnssd/impl/conversion_layer.cc",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-13T01:37:08Z",
      "side": 1,
      "message": "No longer applies with update code",
      "parentUuid": "61fd053a_f4e3d95f",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 69
      },
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27c5dbe1_39833028",
        "filename": "discovery/dnssd/impl/service_key.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2019-11-11T22:05:00Z",
      "side": 1,
      "message": "In Chromium, we\u0027re generally discouraged from using std::unordered_map because of its memory overhead. Something to consider, if we haven\u0027t already:\nhttps://cs.chromium.org/chromium/src/base/containers/README.md?sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d32",
      "range": {
        "startLine": 19,
        "startChar": 53,
        "endLine": 19,
        "endChar": 71
      },
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98668695_7448cd53",
        "filename": "discovery/dnssd/impl/service_key.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-13T01:37:08Z",
      "side": 1,
      "message": "There\u0027s actually been a lot of back and forth about what we can do in OSP between me, Max, and Mark\n\nThe summary of that is:\n- abseil has equivalents of flat_map, flat_set, but adding them would require adding a bunch of new abseil requirements so we\u0027re avoiding that for now\n- there is no abseil small_map requirement\n\nThat leave the discussion as a question of when should we use map vs unordered_map, which comes down to how many elements we expect. If a lot of elements are expected, unordered map seems reasonable. Otherwise, map is better\n\nIn the case of DNS-SD, we have some of both. Comment here was updated, because it should work for both map and unordered_map :)",
      "parentUuid": "27c5dbe1_39833028",
      "range": {
        "startLine": 19,
        "startChar": 53,
        "endLine": 19,
        "endChar": 71
      },
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c124da24_921e51ba",
        "filename": "discovery/dnssd/testing/fake_dns_record_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-09T00:47:37Z",
      "side": 1,
      "message": "This is all now needed in multiple files instead of just conversion_layer_unittest, so I thought it would work better as a utility class rather than duplicating the logic",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 32,
        "endChar": 2
      },
      "revId": "a72e12090fb54ad68c375079a451fcd3fe4fb446",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}