{
  "comments": [
    {
      "key": {
        "uuid": "f48dc016_26a6e875",
        "filename": "osp_base/error.h",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "nit: Add a newline above this line.",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 104,
        "endChar": 2
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "030d270c_77c10e54",
        "filename": "osp_base/error.h",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f48dc016_26a6e875",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 104,
        "endChar": 2
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8d8fba4_b663ee1d",
        "filename": "osp_base/error.h",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Suggestion: To save a bunch of lines of code, you could change each case from:\n\n  case Error::Code::kSomething:\n    os \u003c\u003c \"the string\";\n    break;\n\nto:\n\n  case Error::Code::kSomething:\n    return os \u003c\u003c \"the string\";",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 12
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c49ad998_fb639f50",
        "filename": "osp_base/error.h",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Good idea! Updated",
      "parentUuid": "c8d8fba4_b663ee1d",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 12
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e8bb6fe_081076b3",
        "filename": "osp_base/error.h",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "This should be updated to use your new Error::Code stringificator. (Maybe remove the .cc definition and inline it here?)",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 64
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8192932e_d935ad13",
        "filename": "osp_base/error.h",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e8bb6fe_081076b3",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 64
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d793be70_aede9a2c",
        "filename": "platform/api/time.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "nit: newline above this line",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 2
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "536bf7b2_b64d5261",
        "filename": "platform/api/time.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d793be70_aede9a2c",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 2
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ce8aa4d_25096a44",
        "filename": "platform/api/time.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "This is just a number with no units, could you please add units as well?",
      "range": {
        "startLine": 46,
        "startChar": 8,
        "endLine": 46,
        "endChar": 38
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2bf94e7_0a46defa",
        "filename": "platform/api/time.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ce8aa4d_25096a44",
      "range": {
        "startLine": 46,
        "startChar": 8,
        "endLine": 46,
        "endChar": 38
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22e1685e_68f5e1ba",
        "filename": "platform/api/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Suggestion:\n\n  root_id_ \u003d root_id.value_or(traces.back()-\u003eroot_id_);",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 75
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae1bae25_8625b232",
        "filename": "platform/api/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Making this change actually results in a SegFault during UTs. Looking at the code, my guess as to why is that it\u0027s treating 0x0 as not having a value, rather than just absl::nullopt as I\u0027m checking here:\nhttps://github.com/abseil/abseil-cpp/blob/master/absl/types/optional.h",
      "parentUuid": "22e1685e_68f5e1ba",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 75
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa7ee338_714bd1bf",
        "filename": "platform/api/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Rather than a separate function to init the vector, you could:\n\n  thread_local std::vector\u003cTraceIdHierarchyHandler*\u003e\n      TraceIdHierarchyHandler::traces{\u0026TraceIdHierarchyHandler::root_node};",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "712203b0_3f6bfb6b",
        "filename": "platform/api/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "I missed this constructor existed - good catch!",
      "parentUuid": "fa7ee338_714bd1bf",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "037e1e4f_8f7ae07f",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "I think I\u0027m seeing something new here: What is the purpose of CONCAT_DUP()? How is it different than:\n\n  #define MAKE_UNIQUE(a) CONCAT(a, __LINE__)\n\nOr, did you mean to define CONCAT_DUP differently, like:\n\n  #define CONCAT_DUP(a, b) strdup(CONCAT(a, b))",
      "range": {
        "startLine": 20,
        "startChar": 1,
        "endLine": 20,
        "endChar": 37
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77e89808_6816b76d",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "This is to get around limitations in the C++ pre-compiler.\nhttps://stackoverflow.com/questions/1597007/creating-c-macro-with-and-line-token-concatenation-with-positioning-macr",
      "parentUuid": "037e1e4f_8f7ae07f",
      "range": {
        "startLine": 20,
        "startChar": 1,
        "endLine": 20,
        "endChar": 37
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af3c82af_8f17ceec",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-28T20:11:02Z",
      "side": 1,
      "message": "Added a comment to specify this",
      "parentUuid": "77e89808_6816b76d",
      "range": {
        "startLine": 20,
        "startChar": 1,
        "endLine": 20,
        "endChar": 37
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f79504_60257d16",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Could you please rename it to something else (maybe APPEND_LINE_NUMBER?)\nFirst thing I though of was std::make_unique when I saw this macro",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "877eef99_d45f1f64",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "These helper macros should be #undef\u0027ed at the end of the header file to prevent leakage and name collisions in other files.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 46
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a56ce722_97b55cb4",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "877eef99_d45f1f64",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 46
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "800fe6a0_31597880",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Updating to UNIQUE_VAR_NAME(...)\n\nTrying to leave the line number part out since that\u0027s just an implementation details, not the purpose of the function",
      "parentUuid": "89f79504_60257d16",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36d14881_4aa6829f",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-28T20:11:02Z",
      "side": 1,
      "message": "It turns out that #undef\u0027ing them means that compile-time substitutions using them don\u0027t get applied correctly, even if they are defined inside this file. They need to be not #undef\u0027d in to allow for correct functioning of the code. \n\nAny suggestions on names to prevent issues associated with leaking macros / name collision? I made an attempt at it in this newest iteration by prefacing them with \u0027TRACE_INTERNAL_\u0027.",
      "parentUuid": "a56ce722_97b55cb4",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 46
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e384de1a_ad78bba3",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Nit: category",
      "range": {
        "startLine": 22,
        "startChar": 22,
        "endLine": 22,
        "endChar": 30
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dc82f48_fd98bdbe",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "I was going to say, the \"factory\" in the name is confusing...I guess it\u0027s the preprocessor that would be acting like the factory that generates types.\n\nInstead, maybe get rid of this macro, and just include the TraceLogger\u003c...\u003e in the other macros below, directly? Might make things simpler and more readable.",
      "range": {
        "startLine": 22,
        "startChar": 8,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c308727_c1accd43",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "spelling is hard. I misspelled \"hierarchy\" so many times during this CL :)\n\nThink I found everywhere I used \"catagory\"",
      "parentUuid": "e384de1a_ad78bba3",
      "range": {
        "startLine": 22,
        "startChar": 22,
        "endLine": 22,
        "endChar": 30
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39c1e868_a1d6b271",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1dc82f48_fd98bdbe",
      "range": {
        "startLine": 22,
        "startChar": 8,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15dcc77e_ad4000f5",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Nit: compile-time",
      "range": {
        "startLine": 25,
        "startChar": 7,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c388d8d8_1c9069eb",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15dcc77e_ad4000f5",
      "range": {
        "startLine": 25,
        "startChar": 7,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0784f6b3_c3e4f519",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Nit: could you please put it after TRACE_ASYNC_START, i.e. after the #if-elif-else-endif",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 54,
        "endChar": 23
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67a5a967_9b5b012f",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0784f6b3_c3e4f519",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 54,
        "endChar": 23
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c1c8287_f6e79793",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "typo: __LINE__",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 40
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e13c82_19162144",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "8c1c8287_f6e79793",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 40
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d67e1c3d_b94cf112",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "For code readability where this gets used, consider naming it SCOPED_TRACE, so it\u0027s obvious this is measuring something in the current scope.",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 13
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f1c515b_1810c4d3",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Renamed to TRACE_SCOPED. SCOPED_TRACE is already defined in gtest",
      "parentUuid": "d67e1c3d_b94cf112",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 13
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2606745a_64a9ced5",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "OOC, what does Clang complain about? I\u0027m not seeing the unused variable here.",
      "range": {
        "startLine": 62,
        "startChar": 39,
        "endLine": 62,
        "endChar": 57
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7a94c04_db8a6b12",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "The variable `const auto\u0026 MAKE_UNIQUE(trace_ref_)` defined on 63 is defined but should never be referenced in code",
      "parentUuid": "2606745a_64a9ced5",
      "range": {
        "startLine": 62,
        "startChar": 39,
        "endLine": 62,
        "endChar": 57
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f79f139f_953d3090",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "There\u0027s quite a bit going on already. I\u0027d suggest replacing \"auto\" with TraceBase to make things clearer.",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 63,
        "endChar": 12
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5140ed1f_20d4ea5d",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f79f139f_953d3090",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 63,
        "endChar": 12
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e807705_b6d55bb9",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Suggestion: Add an empty subclass of TraceBase, and then specify that here? e.g.,\n\n  class ScopedTraceNoOp : public TraceBase {};",
      "range": {
        "startLine": 66,
        "startChar": 12,
        "endLine": 66,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f21c07be_df4614e5",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "TraceBase already is empty so it should be a NoOp - it only has static variables and no instance variables/methods",
      "parentUuid": "0e807705_b6d55bb9",
      "range": {
        "startLine": 66,
        "startChar": 12,
        "endLine": 66,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37c8117_eee8d117",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-28T20:11:02Z",
      "side": 1,
      "message": "I re-examined this and tried to add it, but ran into an issue. Details described here:\nhttps://stackoverflow.com/questions/29842095/incompatible-operand-types-when-using-ternary-conditional-operator\n\nThe short answer is that, to add this, I would need to add a bunch of static_cast\u003cTraceBase\u0026\u003e lines which I think it\u0027s actually less readable than the current approach.",
      "parentUuid": "f21c07be_df4614e5",
      "range": {
        "startLine": 66,
        "startChar": 12,
        "endLine": 66,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cdc617a_5e294cb4",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "style: kEmptyTraceId",
      "range": {
        "startLine": 111,
        "startChar": 18,
        "endLine": 111,
        "endChar": 30
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6d9485d_65994a5b",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6cdc617a_5e294cb4",
      "range": {
        "startLine": 111,
        "startChar": 18,
        "endLine": 111,
        "endChar": 30
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83e79551_357a249d",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "If you remove \"class\" you wouldn\u0027t need all the bit-manipulation operator overloads. This seems like the right time to use old-style enums because you\u0027re really just naming the individual bits of a uint64_t:\n\n  enum TraceCategory : uint64_t { ... };\n\nOr, if having a TraceCategory namespace is important (seems like it might be):\n\n  struct TraceCategory {\n    enum Values : uint64_t { ... };\n  };\n\nSo that client code still requires specifying TraceCategory::CastSomethingSomething instead of just CastSomethingSomething.",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 36
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2477e80_df71c42a",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Good idea. Updating to the second option since that feels cleaner to me",
      "parentUuid": "83e79551_357a249d",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 36
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "852f0324_45fc238c",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Not sure it\u0027s necessarily better, but you can use binary literals for flags.",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 118,
        "endChar": 26
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b45af7bb_10d270ca",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "I actually feel this is clearer - assuming we may have more than 2 or 3 of them eventually at least. Happy to change it if you or anyone else has a strong opinion though",
      "parentUuid": "852f0324_45fc238c",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 118,
        "endChar": 26
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1340c18b_26399ca8",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Having a virtual function call to check if logging is enabled is relatively expensive.",
      "range": {
        "startLine": 146,
        "startChar": 2,
        "endLine": 146,
        "endChar": 60
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e86db24a_5547789e",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Idea: Do we need virtual methods at all? We could set up the BUILD.gn files to only compile+link the platform-specific .cc file that provides the implementation of these.",
      "parentUuid": "1340c18b_26399ca8",
      "range": {
        "startLine": 146,
        "startChar": 2,
        "endLine": 146,
        "endChar": 60
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c56d782_6d1a8af5",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Updating IsLoggingEnabled to use BUILD.gn rules as suggested. Didn\u0027t consider the extra cost associated with that when trace logging is disabled\n\nThere are actually multiple reason I prefer virtual methods for the remaining functions though:\n- We can more easily structure and encapsulate code as we add more implementations of this class (even ones we may want to share between Chromium and StandAlone) such as write to SQL, writing Metrics, etc. This is espexially true if we want to do more than one of the above on each trace call, or enable/disable them each independently (ie always generate metrics but only sometimes logs).\n- It greatly simplifies UTs (see: https://github.com/google/googlemock/blob/master/googlemock/docs/FrequentlyAskedQuestions.md)",
      "parentUuid": "e86db24a_5547789e",
      "range": {
        "startLine": 146,
        "startChar": 2,
        "endLine": 146,
        "endChar": 60
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b6ef6db_064d4eec",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Do all of these need to be optional? Meaning, is the usage such that one could instead make the whole struct optional, like:\n\n  absl::optional\u003cTraceIdHierarchy\u003e\n\nIf they do need to be optional, also consider using kEmptyTraceId to represent \"not set,\" as this will be leaner.\n\nAlso, I wonder if we need this struct at all? It seems that, most of the time, we have two versions of methods or ctors that take the three fields as separate arguments or take a TraceIdHierarchy. We should just always do one or the other. IMHO, I don\u0027t see the need for this struct since pointers to a TraceIdHierarchyHandler instance could be passed around, and just let the handler store these three fields (like it does now).",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 178,
        "endChar": 31
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "420d9a9c_ca470ee5",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "The Original reason for this struct was so that the 3 values could easily be passed around for TRACE_HIERARCHY and SET_TRACE_HIERARCHY calls. For those calls, having a single struct greatly simplifies code. If you disagree, though, I can remove it\n\nThe reason I can\u0027t use kEmptyTraceId to represent unset is that, in some cases, we may want to actually set the traceId to kEmptyTraceId\nFor instance, if we push a call to the task runner, and the current ID is 0x0, I want to keep it the same when I pull the Task off the TaskRunner. If 0x0 only represents an \"unset\" state, it wouldn\u0027t be possible to set the current ID to that (or the parent ID, or root ID). Alternatively, we want to initialize the top of the stack to 0x0 for all TraceIds, which isn\u0027t possible with 0x0 only meaning unset.",
      "parentUuid": "3b6ef6db_064d4eec",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 178,
        "endChar": 31
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f828494_4780e704",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Consider which classes you want client code to be able to refer to, versus those that should only be available via MACROS(). The latter should be in an \"internal\" namespace.",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 15
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4981cdf9_780e3f92",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Most of the code in this file I want inaccessible, but need access for the UTs which can\u0027t go directly through the macros because the static IsLoggingEnabled(...) method can\u0027t be overridden. What is Chromium\u0027s standard approach in this case?",
      "parentUuid": "5f828494_4780e704",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 15
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91908ac6_a84b87a6",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-28T20:11:02Z",
      "side": 1,
      "message": "Based on Mark\u0027s suggestion, I am splitting this file into multiple. The internal details I am putting in a traceinternal { ... } namespace to hide them",
      "parentUuid": "4981cdf9_780e3f92",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 15
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f7462ba_e2d0c5a0",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "The virtual keyword will cause this class to have a vtable and runtime code auto-generated. Since you intend for this class to be stateless, consider removing this.",
      "range": {
        "startLine": 191,
        "startChar": 2,
        "endLine": 191,
        "endChar": 9
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cd08414_efd8c18c",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f7462ba_e2d0c5a0",
      "range": {
        "startLine": 191,
        "startChar": 2,
        "endLine": 191,
        "endChar": 9
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0a10d25_904d9cac",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "naming: Often, when we see this pattern in Chromium code, we give it a name like ScopedSomethingSomething. Suggestions:\n\n  ScopedTrace (not very descriptive, but maybe enough?)\n  ScopedTraceWhileLoggingEnabled (maybe too descriptive!)\n  ScopedTraceOperation (contrasts well with ScopedTraceNoOp)\n  ScopedTraceForRealz (because you like the letter Z)",
      "range": {
        "startLine": 221,
        "startChar": 6,
        "endLine": 221,
        "endChar": 29
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a73cdda1_ad90eb53",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Updating to ScopedTraceOperation",
      "parentUuid": "f0a10d25_904d9cac",
      "range": {
        "startLine": 221,
        "startChar": 6,
        "endLine": 221,
        "endChar": 29
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da16831b_e43c7519",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 225,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Similar issue here: Do we need a virtual destructor?",
      "range": {
        "startLine": 225,
        "startChar": 2,
        "endLine": 225,
        "endChar": 9
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf1165a_a2e0ece2",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 225,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da16831b_e43c7519",
      "range": {
        "startLine": 225,
        "startChar": 2,
        "endLine": 225,
        "endChar": 9
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "072187e6_182b3b45",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Add a constructor that accepts TraceIdHierarchy?",
      "range": {
        "startLine": 248,
        "startChar": 2,
        "endLine": 248,
        "endChar": 25
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ec05df9_05051972",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "My intention was to make TraceIdHierarchy only used outside of this file - in here, \nI didn\u0027t see any need to add the extra level of indirection. Thoughts?",
      "parentUuid": "072187e6_182b3b45",
      "range": {
        "startLine": 248,
        "startChar": 2,
        "endLine": 248,
        "endChar": 25
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71ed3664_d2ce141a",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "TraceIdHierarchy?",
      "range": {
        "startLine": 252,
        "startChar": 2,
        "endLine": 255,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67b108d5_939b6a7d",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Making this a TraceIdHierarchy would just add confusion, in my opinion, since these are always set (nevel absl::nullopt). Thoughts?",
      "parentUuid": "71ed3664_d2ce141a",
      "range": {
        "startLine": 252,
        "startChar": 2,
        "endLine": 255,
        "endChar": 21
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee1dd254_269b4bd9",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 259,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "We could run into collisions between provided and generated IDs. Maybe something like top bit is always 1 for generated and 0 for provided IDs?",
      "range": {
        "startLine": 258,
        "startChar": 2,
        "endLine": 259,
        "endChar": 45
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a253d0_311f5ce2",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 259,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Currently, TraceIdCounter is initiated to 0x1\u003c\u003c63 and incremented by 1 every time it is used - do you think I should hard-code limits as well to ensure they never intersect?\n\nI feel like if the user really has a string reason to set that high of a trace id (ie recieving a packet with this ID), we shouldn\u0027t stop them",
      "parentUuid": "ee1dd254_269b4bd9",
      "range": {
        "startLine": 258,
        "startChar": 2,
        "endLine": 259,
        "endChar": 45
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19a36db9_004fdcb8",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Seems you could get rid of the above two ctors if you default these three arguments to kEmptyTraceId.",
      "range": {
        "startLine": 287,
        "startChar": 14,
        "endLine": 289,
        "endChar": 29
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2db19224_10dd9ff5",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Using kEmptyTraceId to mean Unset doesn\u0027t work for the reasons discussed above. I can delete these constructors if you have a strong opinion though - the same functionality can be achieved with the 3rd constructor below",
      "parentUuid": "19a36db9_004fdcb8",
      "range": {
        "startLine": 287,
        "startChar": 14,
        "endLine": 289,
        "endChar": 29
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57d57c2f_9518464e",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Idea: You could get rid of this bool. Instead, name this class TraceLoggerBase, then have two subclasses called SynchronousTraceLogger and AsynchronousTraceLogger, which have different destructors to handle the sync versus async cases. In other words, let the compiler hard-code the desired impl rather than evaluate a bool at runtime.",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 335,
        "endChar": 17
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdb7c579_f3d220c4",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "That would involve duplicating a lot (90+%) of code between the two classes.\nHow about making the bool a template argument? Then, the correct branch should be known at compile time and the compiler can optimize, or we can just partially specialize the template for the single method",
      "parentUuid": "57d57c2f_9518464e",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 335,
        "endChar": 17
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51d1de73_a3c39467",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-28T20:11:02Z",
      "side": 1,
      "message": "Figured out what you meant on this after rereading it. Changing to this approach now",
      "parentUuid": "bdb7c579_f3d220c4",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 335,
        "endChar": 17
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa7ceb3b_990c7699",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Is this class needed? Seems the task runner could just create a TraceIdHierarchyHandler directly.",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 367,
        "endChar": 2
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceb701a7_ede2eaa7",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "I added this one for the stylistic decision of keeping TraceIdHierrchy objects out of the TraceIdHierarchyHandler and because I wanted to keep that an abstract class that\u0027s never actually instantiated. I can make this change if you have a strong opinion though :) Mine is just a minor preference",
      "parentUuid": "aa7ceb3b_990c7699",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 367,
        "endChar": 2
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c5848c2_2aa60f77",
        "filename": "platform/base/logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "Rather than the separate parens outside the brackets, maybe we should put the trace id into the existing brackets? Also, it feels like the existing logging string could be made a little more human-friendly. Suggestion (based on Chromium\u0027s logger format):\n\n  ss \u003c\u003c \u0027[\u0027 \u003c\u003c LogLevelToString(level) \u003c\u003c \u0027:\u0027 \u003c\u003c file \u003c\u003c \u0027(\u0027 \u003c\u003c line \u003c\u003c \"):T\" \u003c\u003c std::hex \u003c\u003c TRACE_CURRENT_ID \u003c\u003c \"] \" \u003c\u003c msg \u003c\u003c \u0027\\n\u0027;\n\nWhy we should never use std::endl: https://www.youtube.com/watch?v\u003dGMqQOEZYVJQ\n\nAnd, yes, the \u0027\\n\u0027 isn\u0027t Windows-friendly, but neither is the use of int \"file descriptors\" (i.e., the g_log_fd global variable). So, there\u0027s a lot of code fixing to do here if we want this working on Windows.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "893c98a3_03e7472c",
        "filename": "platform/base/logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "That looks much cleaner :)",
      "parentUuid": "5c5848c2_2aa60f77",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40a3a0bb_d8dbe7fa",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "TRACE_SET_HIERARCHY here too? Or, maybe a code comment why we purposely don\u0027t do that?",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56506d8e_290a6731",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Adding comment",
      "parentUuid": "40a3a0bb_d8dbe7fa",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 20
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0be8f0b2_f0852a8a",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "This should be using a move constructor instead:\n\n  tasks_.emplace_back(std::move(delayed_tasks_.top()));\n\nYou\u0027ll probably need to declare a default move ctor in the struct.",
      "range": {
        "startLine": 117,
        "startChar": 4,
        "endLine": 118,
        "endChar": 66
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c813187_ff60c6b1",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Are you suggesting adding a constructor to ImmediateTask (name pending) to take in a DelayedTask? delayed_tasks_ has a different object type than tasks_",
      "parentUuid": "0be8f0b2_f0852a8a",
      "range": {
        "startLine": 117,
        "startChar": 4,
        "endLine": 118,
        "endChar": 66
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be594bf2_4518836a",
        "filename": "platform/base/task_runner_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "naming nit: How about TracedTask or TaskWithTrace?",
      "range": {
        "startLine": 93,
        "startChar": 9,
        "endLine": 93,
        "endChar": 22
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52c5a72f_eadf85e6",
        "filename": "platform/base/task_runner_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "The reason I went with ImmediateTask was to contrast it directly with DelayedTask above - both of which have trace information (and neither of which has to be traced, so TracedTask doesn\u0027t make much sense to me)\n\nI\u0027m fully up for changing it, but not sure either of those options quite works. Maybe NonDelayedTask?",
      "parentUuid": "be594bf2_4518836a",
      "range": {
        "startLine": 93,
        "startChar": 9,
        "endLine": 93,
        "endChar": 22
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f04c7298_58c404e5",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "If we want to save a virtual function call per trace call when we can make TraceLoggingPlatform a regular non-abstract class with no virtual methods, where TraceLoggingPlatform is defined in the header and then declared and implemented in platform here.",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58044e15_213ce50a",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Virtual calls are needed for a few reasons. See Yuri\u0027s comment intrace_logging.h for more details\n\nresolving this comment for now so that discussion of this question can continue in a single thread",
      "parentUuid": "f04c7298_58c404e5",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb5454e7_031b4a70",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "I\u0027m not sure we should auto-enable all tracing in debug builds. We should discuss w/ team.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31d1406a_334a3fe5",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Agreed it should be discussed with team",
      "parentUuid": "fb5454e7_031b4a70",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4473e724_953a1dba",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-16T00:56:13Z",
      "side": 1,
      "message": "style and naming suggestion: kAllLogCategoriesMask",
      "range": {
        "startLine": 20,
        "startChar": 27,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3861b44a_bdfe4665",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4473e724_953a1dba",
      "range": {
        "startLine": 20,
        "startChar": 27,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39e8a1d3_9460347f",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "Maybe std::numeric_limits\u003cuint64_t\u003e::max()",
      "range": {
        "startLine": 21,
        "startChar": 12,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e222558_e3605a46",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39e8a1d3_9460347f",
      "range": {
        "startLine": 21,
        "startChar": 12,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "024558db_9eec18cb",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-15T20:23:29Z",
      "side": 1,
      "message": "If logging is always disabled on non-debug builds, shouldn\u0027t this be OSP_DVLOG here and below?",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 12
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b726006_687a239b",
        "filename": "platform/base/trace_logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-05-16T19:20:06Z",
      "side": 1,
      "message": "Pending discussion with team as Yuri suggested",
      "parentUuid": "024558db_9eec18cb",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 12
      },
      "revId": "9f9fea0758cbe1a29e77ff18d54bea4f79b7c4e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}