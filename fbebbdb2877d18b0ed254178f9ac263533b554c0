{
  "comments": [
    {
      "key": {
        "uuid": "a5f47e52_940c44ea",
        "filename": "cast/common/channel/cast_message_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "Is this a protocol message or a library-defined type?",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aafd44cf_720a9718",
        "filename": "cast/common/channel/cast_message_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Protocol message.",
      "parentUuid": "a5f47e52_940c44ea",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfd672c4_7ed4003e",
        "filename": "cast/common/channel/cast_socket_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "In Chrome, I\u0027ve seen non-const references returned to objects when you\u0027ll never return a nullptr.\n\nIMO that slightly improves readability/maintainability because you don\u0027t have to worry about remembering -\u003e and *, especially for mocks.",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "502ca5d8_5aa2be4b",
        "filename": "cast/common/channel/cast_socket_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bfd672c4_7ed4003e",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c030a55_277e61a8",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "absl::stringview namespace",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b3f6826_d7a62074",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c030a55_277e61a8",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6389c5f_42239ff2",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "namespace.find_first_of(kTransportNamespacePrefix) \u003d\u003d 0",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da298890_18678ffd",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "I would think we still want IsTransportNamespace(kTransportNamespacePrefix) \u003d\u003d false though?",
      "parentUuid": "a6389c5f_42239ff2",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d4aa3eb_0211a34b",
        "filename": "cast/common/channel/message_util.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-21T22:56:12Z",
      "side": 1,
      "message": "Right - you could do the size check first. However, I still think find_first_of() is more readable than compare() here.",
      "parentUuid": "da298890_18678ffd",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32b51bbe_5fe22c6c",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "Interesting, is this the new MOCK_METHOD syntax that puts modifiers inside the macro call?\nIt looks like you don\u0027t have to use a different macro for the number of arguments either.\nNice.",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f076f54_68f5532b",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32b51bbe_5fe22c6c",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f21dda05_c56f2e75",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "I expected this to be a struct with two FakeCastSockets.  But it seems to be something else.",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b59cdde_381f5f8a",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "It\u0027s two FakeCastSockets that are piped together.  Added a top-level comment for this.",
      "parentUuid": "f21dda05_c56f2e75",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88f5b4c5_0a47f5c5",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "It seems to me that the test case base class should own the fake clock and fake task runner, and pass them here to construct fake sockets.\n\nDoes it make sense for a test case to have more than one?",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61b72a50_6876d3d3",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "These were removed because MockTlsConnection doesn\u0027t need them anymore.",
      "parentUuid": "88f5b4c5_0a47f5c5",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a84b8eb6_714f6610",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "Is it important that these are identical to the ones in FakeCastSocket?\nCan they be moved to the top level as constexpr?",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08dde082_8b7a5f33",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "The values aren\u0027t important and we don\u0027t have constexpr constructors for IPAddress, so they\u0027d have to be static globals or #defines.",
      "parentUuid": "a84b8eb6_714f6610",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449b7148_0bc8a182",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "Is the unique_ptr buying anything? This looks like a normal struct member.  Similar comment for connection2.",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea30195d_79d54796",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Retaining the unique_ptrs is an artifact of when I was avoiding having a constructor (before the pair), so this is probably clearer in the constructor now.  CastSocket needs to own a TlsConnection but we need to retain a pointer for checking mock methods.",
      "parentUuid": "449b7148_0bc8a182",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33d24244_df347396",
        "filename": "cast/common/channel/test/fake_cast_socket.h",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-21T22:56:12Z",
      "side": 1,
      "message": "LGTM now, thanks.",
      "parentUuid": "ea30195d_79d54796",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11447301_0cc15109",
        "filename": "cast/common/channel/test/mock_cast_message_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-07T20:38:51Z",
      "side": 1,
      "message": "The wrapping/spacing of this looks little weird.",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c41c62d3_32d68430",
        "filename": "cast/common/channel/test/mock_cast_message_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Yes, clang-format seems to be confused by the multiple parentheses levels.",
      "parentUuid": "11447301_0cc15109",
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "107ad0d3_0d79c064",
        "filename": "cast/common/channel/virtual_connection_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T18:51:06Z",
      "side": 1,
      "message": "Would it be useful to the caller to return endpoints_.emplace(...).second to say whether the operation was successful or not?\n\nSame for the functions below",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18d10471_897579ab",
        "filename": "cast/common/channel/virtual_connection_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "107ad0d3_0d79c064",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67855acc_cfe3c418",
        "filename": "cast/common/channel/virtual_connection_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T18:51:06Z",
      "side": 1,
      "message": "OSP_DCHECK(socket.get()) first",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 36
      },
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ccc8b51_53f9d707",
        "filename": "cast/common/channel/virtual_connection_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Crash is a crash.",
      "parentUuid": "67855acc_cfe3c418",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 36
      },
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0051e8b2_e11b4d3e",
        "filename": "cast/common/channel/virtual_connection_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-11-07T18:51:06Z",
      "side": 1,
      "message": "Might be worth DCHECK\u0027ing socket first. Same below",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 36
      },
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e260a58a_35763207",
        "filename": "cast/common/channel/virtual_connection_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-11-19T02:17:08Z",
      "side": 1,
      "message": "Crash is a crash.",
      "parentUuid": "0051e8b2_e11b4d3e",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 36
      },
      "revId": "fbebbdb2877d18b0ed254178f9ac263533b554c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}