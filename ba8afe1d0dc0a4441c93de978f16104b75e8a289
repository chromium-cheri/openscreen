{
  "comments": [
    {
      "key": {
        "uuid": "e0c7c305_aa026f13",
        "filename": "discovery/dnssd/public/dns_sd_instance.cc",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T18:48:31Z",
      "side": 1,
      "message": "Why 63?",
      "revId": "ba8afe1d0dc0a4441c93de978f16104b75e8a289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2814e5e9_970929ca",
        "filename": "discovery/dnssd/public/dns_sd_instance.h",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T18:48:31Z",
      "side": 1,
      "message": "This template is a little confusing IMO. It\u0027s a variable args template where TSubstypes can be anything, as long as it\u0027s convertible to a std::vector? Any reason to not just take a std::vector?",
      "revId": "ba8afe1d0dc0a4441c93de978f16104b75e8a289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8bd7c7c_28725e2b",
        "filename": "discovery/dnssd/public/dns_sd_instance_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T18:48:31Z",
      "side": 1,
      "message": "What are these char sets testing? I\u0027m not sure what the significance of each line is.",
      "revId": "ba8afe1d0dc0a4441c93de978f16104b75e8a289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb17162e_e31eee24",
        "filename": "discovery/dnssd/public/dns_sd_instance_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T18:48:31Z",
      "side": 1,
      "message": "const kCharsAlmostMaxLength?",
      "revId": "ba8afe1d0dc0a4441c93de978f16104b75e8a289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a56b2a_f4ed90c5",
        "filename": "discovery/dnssd/public/dns_sd_instance_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T18:48:31Z",
      "side": 1,
      "message": "const kIn1 or kInOne?",
      "revId": "ba8afe1d0dc0a4441c93de978f16104b75e8a289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3135e5aa_450fbaf1",
        "filename": "util/std_util.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T18:48:31Z",
      "side": 1,
      "message": "This is the base case, right? Might be worth a comment on this template specialization.\n\nIdeally you could reserve the size of all of the elements to avoid copies, but I get that that\u0027s difficult/impossible.\n\nhttps://stackoverflow.com/questions/47941837/c-variadic-template-sum",
      "revId": "ba8afe1d0dc0a4441c93de978f16104b75e8a289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}