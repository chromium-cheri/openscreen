{
  "comments": [
    {
      "key": {
        "uuid": "c20d16aa_f2696689",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 308,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-29T20:05:05Z",
      "side": 1,
      "message": "Could you please do an early return on these?",
      "range": {
        "startLine": 303,
        "startChar": 1,
        "endLine": 308,
        "endChar": 3
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b035b32_52c854a3",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 308,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-30T20:51:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c20d16aa_f2696689",
      "range": {
        "startLine": 303,
        "startChar": 1,
        "endLine": 308,
        "endChar": 3
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f98e748_894baed8",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 308,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-30T21:39:57Z",
      "side": 1,
      "message": "I should have explained better, I meant negating the if condition to push the code to the left and reduce nesting.\n\nif (basic_constraints_index \u003d\u003d -1) {\n  return CastCertError::kErrCertsVerifyGeneric;\n}\n\nif (!basic_constraints || !basic_constraints-\u003eca) {\n  return CastCertError::kErrCertsVerifyGeneric;\n}",
      "parentUuid": "9b035b32_52c854a3",
      "range": {
        "startLine": 303,
        "startChar": 1,
        "endLine": 308,
        "endChar": 3
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10f47f21_b085ca72",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 308,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-31T00:39:08Z",
      "side": 1,
      "message": "Ah, of course.  I think the former loop structure just confused me.",
      "parentUuid": "0f98e748_894baed8",
      "range": {
        "startLine": 303,
        "startChar": 1,
        "endLine": 308,
        "endChar": 3
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b8d1d5d_dab802b6",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 345,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-29T20:05:05Z",
      "side": 1,
      "message": "EVP_get_digestbynid",
      "range": {
        "startLine": 328,
        "startChar": 4,
        "endLine": 345,
        "endChar": 5
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5065c69f_443ff6d4",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 345,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-30T20:51:23Z",
      "side": 1,
      "message": "We also need to ensure the hash function is \u003e\u003d sha1 though, so we still need to check these 5 cases.",
      "parentUuid": "3b8d1d5d_dab802b6",
      "range": {
        "startLine": 328,
        "startChar": 4,
        "endLine": 345,
        "endChar": 5
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fbbb1ef_a36bebbf",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 345,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-30T21:39:57Z",
      "side": 1,
      "message": "I can\u0027t get rid of the feeling that there\u0027s a much easier way to do perform substantial parts of this entire process (not just this part) by calling some very high-level bssl functions.",
      "parentUuid": "5065c69f_443ff6d4",
      "range": {
        "startLine": 328,
        "startChar": 4,
        "endLine": 345,
        "endChar": 5
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d4e3f6d_758a9601",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 345,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-31T00:39:08Z",
      "side": 1,
      "message": "Well, there may be but it\u0027s not completely straightforward.\n\nX509_verify_cert() will verify a complete chain.  However:\n 1. If we let it do the path-finding as well, I\u0027m not sure how we get the successful path back.  This might not be important except...\n 2. It doesn\u0027t seem to check the pathlenConstraint extension correctly (it seems to skip it on the root cert, which is exactly where we want it).\n 3. We also need to be able to override certificate expiration checking on the root (well, need may be a strong word since current certs are good til 2032 or later and hopefully something else is figured out by then) and that doesn\u0027t seem trivial with the particular callback interface openssl gives us.\n\nRight now I feel this route will still be easier, but I\u0027m happy to discuss/elaborate-on the X509_verify_cert further if anyone feels strongly.",
      "parentUuid": "5fbbb1ef_a36bebbf",
      "range": {
        "startLine": 328,
        "startChar": 4,
        "endLine": 345,
        "endChar": 5
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fad8d132_46a1e8ad",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 421,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-29T20:05:05Z",
      "side": 1,
      "message": "Wouldn\u0027t X509_verify work?",
      "range": {
        "startLine": 415,
        "startChar": 2,
        "endLine": 421,
        "endChar": 3
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "448620f2_ceeaf0fc",
        "filename": "cast/common/certificate/cast_cert_validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 421,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-30T20:51:23Z",
      "side": 1,
      "message": "It would only accomplish X509_ALGOR_cmp and VerifySignedData.  However, we already need the type-wrapping of VerifySignedData for CastVerificationContextImpl.",
      "parentUuid": "fad8d132_46a1e8ad",
      "range": {
        "startLine": 415,
        "startChar": 2,
        "endLine": 421,
        "endChar": 3
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a196889_cb5a3a0e",
        "filename": "cast/common/certificate/eureka_root_ca_der-inc.h",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-07-29T22:43:35Z",
      "side": 1,
      "message": "Is there a certificate rotation story for the Eureka Root CA? \n\nIf so: A Hard-coded value seems difficult to update when the Root CA is rotated. Can we read from the local machine\u0027s cert store (not sure if that\u0027s a thing in posix) or from a separate file we could update separately from the code?\n\nIf not: Do we have security sign off for never rotating this cert? My intuition / previous work with certs is telling me that never rotating a cert is insecure",
      "range": {
        "startLine": 68,
        "startChar": 20,
        "endLine": 68,
        "endChar": 36
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27874f09_658d929f",
        "filename": "cast/common/certificate/eureka_root_ca_der-inc.h",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-07-30T20:51:23Z",
      "side": 1,
      "message": "AFAIK these two roots have been fixed since the beginning and there\u0027s no intent to change them.\n\nI will have to follow-up with Mark when he gets back to get the complete answer here.",
      "parentUuid": "9a196889_cb5a3a0e",
      "range": {
        "startLine": 68,
        "startChar": 20,
        "endLine": 68,
        "endChar": 36
      },
      "revId": "0467b6486501356cbfc00ef0efc89ca26d6dafc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}