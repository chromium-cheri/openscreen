{
  "comments": [
    {
      "key": {
        "uuid": "75343d34_50e5a088",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Nit: Markdown top level header is #",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2edc7099_9f7d070b",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "It\u0027s unfortunate that users have to include two files.  Let\u0027s fix that.  What is the circular dependency issue?  Can it be resolved through forward declarations?",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7613eab_2c2cf9cf",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Headers in platform/api shouldn\u0027t have implementations.  That allows embedders to substitute their own.  Also if there is a single implementation across all platforms, then tracing isn\u0027t really a platform feature and belongs in osp_base/.",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01b233f6_265c33ba",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Please wrap text at 80 columns consistently.\n\nAlso, super nit: use upper/lower case consistently for \"Trace ID\"",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "828f15e5_d9b7f02f",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Please keep case consistent for terms used in this doc",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87b6e39a_d0f3c190",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Missing period",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "583551e3_699183df",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Trace ID instead of TraceID here and below",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0492b854_476b8b6c",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "lower case for traced",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e5d9e39_ad7ea043",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Gittiles markdown hopefully supports code block quotes; wrap this block in ``` to activate that",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1683f67e_0419f882",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Please use a markdown table. See README.md for an example of that.",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eeaec9ef_1e14db5a",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Just use lower case for normal words throughout.  These aren\u0027t special terms.",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5716030_75e1095a",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "s/non-success/error/",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9383949_c7150e07",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Is setting a result required for all async traces?",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33fc9dbe_c82c2d17",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "Tracing",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 11
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24d10349_857f4e5c",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Use a markdown header (###) here",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "137e2ac1_67df994a",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Can you use a definition list here? Otherwise this isn\u0027t going to get formatted in a readable way.\n\nYou might need to use HTML markup depending on the capabilities of the Gitiles web server.\n\n\u003cdl\u003e\n  \u003cdt\u003e`TRACE_SCOPED(category, name)`\u003c/dt\u003e\n  \u003cdd\u003eIf logging is enabled for the provided category, this function will trace the\n    current function until the current scope ends with name as provided.\u003c/dd\u003e\n\n...",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fae5dbc_ede97a0c",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "How does the caller get the parentId and rootId?  Shouldn\u0027t the tracing framework be able to determine that from the context or the state of traceId?",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5994ba2_519640e7",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "traceIdHierarchy isn\u0027t explained anywhere in the introduction.",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80eb6f29_d616189b",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Can you comment on how to compile out these functions?  What is the default for release/debug builds and is there a GN argument to override that default?",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "494ae94c_51eebd71",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 162,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Use markdown lists:\n\n1. Create a TraceLoggingPlatform",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b521b7d5_29c7b2e2",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "s/define/defined/",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5621dd5c_45c9b7d6",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "`bool IsLoggingEnabled(TraceCategory category);`",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5b4e18d_27f04823",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "If we are setting an implementation using dependency injection, versus implementing a set of declarations, the pattern to do that is through the embedder public API not the platform API.  The public API has a concept of passing pointers to embedder-owned implementations into the library, while the platform API is intended to be relatively stateless without a lifecycle.\n\nI would have to think about extending dependency injection into the platform API.",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a645348a_3ec97536",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Who shuts down the service?",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f8f621b_52f16796",
        "filename": "docs/trace_logging.md",
        "patchSetId": 4
      },
      "lineNbr": 180,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-05-31T21:19:10Z",
      "side": 1,
      "message": "Thanks for writing detailed documentation!",
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7378595f_742610cb",
        "filename": "osp_base/error.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-29T19:22:50Z",
      "side": 1,
      "message": "It would be nice to have a way to enforce that new values added to the enum are added to this operator\u0027s implementation.\n\nMaybe something like static_assert(Error::Code::kMaxValue \u003d\u003d kHardcodedMaxValue, \"A new member was added to Error::Code, please update this function\");\n\nGiven that there\u0027s not even a default case, a new value would be an empty string.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 69
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a088bfe_c7162e92",
        "filename": "osp_base/error.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "IIRC, we\u0027ve turned on compiler warnings for missing cases in switch statements.",
      "parentUuid": "7378595f_742610cb",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 69
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7157a3bb_25b3d7b7",
        "filename": "osp_base/error.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-29T19:22:50Z",
      "side": 1,
      "message": "I think if you move this operator\u003c\u003c down next to operator\u003c\u003c for Error::Code, you won\u0027t need the forward declaration. Also, it\u0027s a bit weird to see the operator\u003c\u003c declared before the class itself.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 0
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8bf020d_02bc9280",
        "filename": "osp_base/error.h",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-29T19:22:50Z",
      "side": 1,
      "message": "Please move implementation to .cc, it\u0027s not a trivial implementation anymore and stringstream is not a trivial class.",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f8deadd_74fc6be2",
        "filename": "osp_base/error.h",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-29T19:22:50Z",
      "side": 1,
      "message": "From the declaration of this operator I expected that it puts value() into the stream on success.",
      "range": {
        "startLine": 175,
        "startChar": 64,
        "endLine": 175,
        "endChar": 82
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0d9a8e6_848dafb6",
        "filename": "osp_base/error.h",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "nit: Add parens around each \"out \u003c\u003c something\" to help readability.",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 175,
        "endChar": 83
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0758635d_cb15ad78",
        "filename": "platform/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-05-29T19:22:50Z",
      "side": 1,
      "message": "There\u0027s a lette missing",
      "range": {
        "startLine": 21,
        "startChar": 9,
        "endLine": 21,
        "endChar": 30
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b56743d9_2417adf2",
        "filename": "platform/api/time.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "It\u0027s µs, not ms. Also, since this is a time_point and not a duration, the units should be something that describes the difference.\n\nChromium uses something like \"bogoticks,\" IIRC.",
      "range": {
        "startLine": 47,
        "startChar": 42,
        "endLine": 47,
        "endChar": 44
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be19da74_69ccf6f6",
        "filename": "platform/api/trace_logging_types.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "nit: I think this can be \"constexpr static\".",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 8
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a06ba374_fe665650",
        "filename": "platform/base/task_runner_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "Can this be in the initializer list too?\n\n(and below, in ImmediateTask?)",
      "range": {
        "startLine": 81,
        "startChar": 6,
        "endLine": 81,
        "endChar": 34
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d075e6_260cab1b",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-05-30T01:57:59Z",
      "side": 1,
      "message": "This can be a TODO, but we should probably provide some way to turn tracing on for the standalone implementation (e.g., parsing command-line args?), and regardless of whether it\u0027s a DEBUG build or not.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 20,
        "endChar": 8
      },
      "revId": "31326dc7936681353772c953efa6391e72bd343a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}