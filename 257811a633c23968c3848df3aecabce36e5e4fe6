{
  "comments": [
    {
      "key": {
        "uuid": "4479af32_283ebb1d",
        "filename": "discovery/mdns/domain_name.cc",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "What does it mean to pass a sized array here?  Is this allocating a uint8_t[256] on the stack, or taking a uint8_t pointer that the compiler assumes points to 256 bytes?  (I just haven\u0027t seen this done before.)",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76d0528e_21f0184b",
        "filename": "discovery/mdns/domain_name.cc",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "It passes a pointer (so it\u0027s an out-param) but the argument must have the type uint8_t[256] and not just uint8_t*.",
      "parentUuid": "4479af32_283ebb1d",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "193f804c_61c674d3",
        "filename": "discovery/mdns/domain_name.cc",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Checks to prevent reads/writes from unintended memory should be CHECKs, not DCHECKs in my opinion. (Same applies to the size DCHECKs in the Append() methods above).  This would prevent dereferencing after.domain_name_.end() - 1 if after.domain_name_ is empty.\n\nNote that I don\u0027t see a way for there to be an empty domain_name_. The only way to construct one is from a one-element initializer list or by calling Append().  However CHECK-ing here would be paranoia to make it harder to exploit some bug elsewhere that creates an empty domain_name_.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "502fb32f_909973a3",
        "filename": "discovery/mdns/domain_name.cc",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "The size() DCHECKs are mostly carryovers from when domain_name_ was public.  I made them CHECKs for paranoia though.",
      "parentUuid": "193f804c_61c674d3",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a90c4e4b_c112f31a",
        "filename": "discovery/mdns/domain_name.cc",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "A pretty printer for octets should probably go in a base/stringprintf.h file.  Surely something like this exists in Chromium\u0027s base library as well, if we are adding a dependency on it for quic.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46e13121_388a6b3d",
        "filename": "discovery/mdns/domain_name.cc",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Moved the \"pretty\" logic to base/stringprintf.h.  I didn\u0027t see anything that does ascii-or-hex in base/strings.  Even if there were, I was hoping we\u0027d get rid of the //base dependency at some point anyway.",
      "parentUuid": "a90c4e4b_c112f31a",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e329abcc_bd8d5f75",
        "filename": "discovery/mdns/domain_name.h",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Can you add newlines between these definitions?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5c9de4f_a385665d",
        "filename": "discovery/mdns/domain_name.h",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e329abcc_bd8d5f75",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7e4b08a_008d1cd3",
        "filename": "discovery/mdns/domain_name.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Is this called repeatedly?  Otherwise it\u0027s just a macro for passing the iterators and maybe doesn\u0027t justify adding specific code here.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90b2b45b_839f9c99",
        "filename": "discovery/mdns/domain_name.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "It\u0027s only used for converting command-line parameters and in tests.  Removed.",
      "parentUuid": "b7e4b08a_008d1cd3",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d3763c0_689cac3d",
        "filename": "discovery/mdns/domain_name_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "I think EXPECT_EQ works on std::vector.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3337218f_53c67624",
        "filename": "discovery/mdns/domain_name_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done.  I thought this used to give a better error message but maybe I was making that up haha.",
      "parentUuid": "2d3763c0_689cac3d",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5a3feab_932ab4c5",
        "filename": "discovery/mdns/mdns_responder_adapter.h",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Does this class wrap both the avertising and the listening functionality?\n\nIt seems like SetHostLabel() only applies if you are advertising services.\nAnd the Start/StopQuery API is for listening.\nCan you add some comments explaining how this API is to be used for advertisement and listening?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15053b71_29f9a7d9",
        "filename": "discovery/mdns/mdns_responder_adapter.h",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Yes, this class wraps all of the mDNSResponder functionality we\u0027d want to use.  You\u0027re also correct about SetHostLabel and Start/StopQuery.  I added a class comment that explains this and some uses.",
      "parentUuid": "c5a3feab_932ab4c5",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e6cc698_9b3553e9",
        "filename": "discovery/mdns/mdns_responder_adapter.h",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "RunTasks()?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5d470f9_ea830347",
        "filename": "discovery/mdns/mdns_responder_adapter.h",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e6cc698_9b3553e9",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbc3587d_e692f357",
        "filename": "discovery/mdns/mdns_responder_adapter.h",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Can this be txt_lines (specifically this is to add content to the text record)?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecc3fe98_4f32db8d",
        "filename": "discovery/mdns/mdns_responder_adapter.h",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbc3587d_e692f357",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7d53167_de8bab37",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "- It seems like this belongs as a method on DomainName?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85810995_d73cf5a3",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "It\u0027s not used anywhere else but sure.  Done.",
      "parentUuid": "d7d53167_de8bab37",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10e4280a_853907a0",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "What if domain \u003d\u003d kLocalDomain?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47e0035c_bc162c7e",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Currently, it would return true and the query that depends on |domain| wouldn\u0027t find anything.  I don\u0027t think that\u0027s a problem.",
      "parentUuid": "10e4280a_853907a0",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62d14a6f_00d82153",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Versus strncmp?  Or is that the underlying implementation of std::equal?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d28629e_553708f9",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "I doubt that\u0027s the implementation of std::equal since strncmp would stop early at a null terminator.  strncmp would require extra casts though since these are uint8_t arrays.",
      "parentUuid": "62d14a6f_00d82153",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d3242c2_112db862",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Is the 256 byte limit enforced by mDNSResponder?\n\nThe RFC basically says you can make this as large as will fit into a DNS record (512 bytes), or even an UDP packet if you know the MTU.\n\nhttps://tools.ietf.org/html/rfc6763#section-6.2\n\nIt would be unfortunate if we have to stick with this limit because of mDNSResponder.  I suspect we may need more than 256 bytes of metadata during open screen discovery.\n\nThis comment applies throughout where 256 byte TXT records are assumed.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "818c04ae_eed33bc0",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "As mentioned offline, we\u0027re not limited to this size by mDNSResponder, but we would need to do extra allocation work to handle larger TXT records on the publishing side.  We\u0027ll leave the 256-byte limit in for now and revisit this when we have a spec consensus on a reasonable TXT size limit.",
      "parentUuid": "8d3242c2_112db862",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6744db3_b06d7ba4",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "The size of individual records has to be less than 256.  Where is that validated/enforced?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16fc48fd_75420089",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Added.",
      "parentUuid": "f6744db3_b06d7ba4",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3d324f7_3c785dd7",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Where is the overall TXT record size validated/enforced?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "415cb767_1af6820d",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Currently, in RegisterService, which is the only use.  The check can be moved here when we decide on a size limit.",
      "parentUuid": "a3d324f7_3c785dd7",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abd930e5_902b2001",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "1/It seems like a const vector\u003cuint8_t\u003e\u0026 would be better here, to allow variable length responses and avoid passing array+length.\n\n2/Functions for manipulating TXT records could probably go into a separate mdns_util.h file.  They don\u0027t seem specific to mDNSResponder, and would make this file shorter.  Not a big deal though, especially if they are only used here.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6bbedf8_97cdc655",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "While we are limiting ourselves to 256 bytes for ease of interacting with mDNSResponder; they aren\u0027t very general.  When we move to a spec\u0027ed size for OSP these could become utility functions.",
      "parentUuid": "abd930e5_902b2001",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b0b4e85_6c48ba0f",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "The RFC implies that TXT contents are \"character data\" but doesn\u0027t say anything about encoding.  We should be careful to document that so that upstream code that is parsing TXT for openscreen does proper validation and doesn\u0027t assume it\u0027s UTF-8 or some such.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b39aa08_92e2a632",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Added a comment to the TxtEvent struct.",
      "parentUuid": "7b0b4e85_6c48ba0f",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7eae6373_535ef5d5",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Both total_pos and line_length are untrusted data.\nYou have to validate that this is reading from a valid span of |data|.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a5e2578_4c01dc8d",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7eae6373_535ef5d5",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c85ab86b_1572e0f6",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Is this for debugging?  Please remove any temporary logging before landing.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c46468a_3b1b6a05",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c85ab86b_1572e0f6",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5eefd72_dd531b3f",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "I\u0027m assuming this would get called on the first invocation of Screen{Listener|Publisher}::Start().  Is it OK to call more than once?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed9a5ff9_47bae288",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Yes, this should be called during a Start() method but should only be called once (as it 0s out a lot of fields).",
      "parentUuid": "a5eefd72_dd531b3f",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb9e7b5b_3e2af800",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Similar question - would this be called by Stop() once, or potentially each time?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f623b81d_067615df",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Yes, this would be called in Stop().  There\u0027s no harm in calling this multiple times, but ideally it would only be called once.",
      "parentUuid": "eb9e7b5b_3e2af800",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80fda5bc_a77d9e7f",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "I\u0027m having a little bit of a hard time following the re-registration case.  It looks like there are two cases: registering an interface for advertisement or not.  If you re-register an interface with advertise \u003d\u003d false, then it\u0027s a no-op.  If you re-register an interface with advertise \u003d\u003d true, then it deregisters and re-registers.\n\nThoughts:\n\n1/Would it be simpler for the calling code to ensure that interfaces are registered once and only once, and have this code do nothing for already-registered interfaces?  I guess we have to handle calling ScreenListener::Start() and ScreenPublisher::Start in either order.\n\n2/I would prefer to split the API into RegisterForAdvertise() and RegisterForListen(), which calls into a shared function to set the flag.  This won\u0027t be so bad since the IPv6 path isn\u0027t implemented yet.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c40449_a30188ee",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "I wasn\u0027t really happy with this either.  I changed it to managing the A/AAAA record manually.  Now we automatically advertise when the first service is registered and deadvertise when the last service is deregistered.  I\u0027m still using the storage in NetworkInterfaceInfo for this though.  LMK if you are happy with this.",
      "parentUuid": "80fda5bc_a77d9e7f",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c29543d7_e5851134",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Nit: info_it is more common for iterator results",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e48d393_cf5a4a94",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done.  I usually use *_entry for map-like iterators to remember that it\u0027s a key-value pair.",
      "parentUuid": "c29543d7_e5851134",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "202e12c5_45b3addd",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Nit: Prefer an explicit type here so I don\u0027t have to refer back to the .h when reading this.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6ddae0b_0144768f",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "202e12c5_45b3addd",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e259790_318dc593",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "It\u0027s unfortunate that the mDNSResponder code doesn\u0027t use namespaces :-/",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e917e5e3_ef52c86f",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Indeed, but then again it\u0027s C.",
      "parentUuid": "0e259790_318dc593",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1083b098_d7505fd5",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "I\u0027m concerned about the safety of this cast.  What is the type of InterfaceID here?  Isn\u0027t |socket| an opaque type defined by the platform?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b382f685_a331a616",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Yes, this is a little odd.  mDNSResponder just wants _some_ identifier for an interface, but it is effectively a void* (it\u0027s actually typedef struct dummy { void* dummy; } *mDNSInterfaceId).  Similarly, |socket| is an opaque pointer to us.  reinterpret_cast never attempts to do any shifting or alignment of the pointer, so this is purely to satisfy the type system, when really we basically just mean void*.",
      "parentUuid": "1083b098_d7505fd5",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8be5d50d_e092f393",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "1/Please add a static_assert that |b| is correctly sized for address.bytes.\n2/Consider adding a CopyTo(uint8_t[4]/void*) method to IPV4Address to encapsulate this operation, versus having to dig through the members of interface_address.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "921d34c0_a7add11b",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8be5d50d_e092f393",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a11cb6fd_8c0f1a55",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Similar comments about STATIC_ASSERT and possibly adding a CopyHardwareAddressTo() method.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae09959f_fbf36257",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a11cb6fd_8c0f1a55",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7efe5380_3cb37008",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Nit: info_it",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc32e3c9_ef4a9c4b",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "7efe5380_3cb37008",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ad4cfab_25d0270d",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "1/Another potential use for adding a CopyTo() method to IPv4Address.\n2/Please static assert that |b| is appropriately sized.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f36a22b0_612913a1",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done.  static_assert isn\u0027t needed with CopyTo type checking.",
      "parentUuid": "2ad4cfab_25d0270d",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f52e1b12_951a4dc6",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Is this cast safe?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe87308_dd9fc285",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Yes.  As mentioned above, this is just casting one opaque pointer to another.",
      "parentUuid": "f52e1b12_951a4dc6",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2becdee_388d7131",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 255,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "If this fails, this means that some earlier answer was garbage.\nWe should just avoid sending any additional questions if responses are invalid.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90796f9d_a31879e2",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 255,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "I generally agree, which is why this is a DCHECK instead of an if.  Do you think the DCHECK should also be removed?",
      "parentUuid": "e2becdee_388d7131",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa33281a_35fd6b4a",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 255,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-28T01:40:10Z",
      "side": 1,
      "message": "I think I was suggesting that if a malformed answer is received, to short circuit and return early instead.",
      "parentUuid": "90796f9d_a31879e2",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d9df8b5_5df9b59c",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 255,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-28T23:30:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa33281a_35fd6b4a",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "832a1816_fff2c7da",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "What is the type of QuestionContext?  void*?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6beda2d8_0212a9e5",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "void*",
      "parentUuid": "832a1816_fff2c7da",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02c710a5_7595cafd",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Is it possible for mDNSResponder to send multiple questions in a single query?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df7dad58_6773ffe2",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Yes.  It also sends known answers with each question though, and tries to make sure everything fits.  But given space, it will send multiple questions in one DNS message.  This happens in mDNS_Execute (our RunTasks()).",
      "parentUuid": "02c710a5_7595cafd",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2608dcb9_27ecb503",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 331,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "The service type shouldn\u0027t end with .local - it should be a pair of labels: _service._protocol\nWould be okay treating anything else as invalid here.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ea8a5ff_ab373383",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 331,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "It needs to end with .local when we send it out, so I don\u0027t see a reason to treat it as an input error here.",
      "parentUuid": "2608dcb9_27ecb503",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a72cd2f1_9dcd4832",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Where is service_name validated according to the rules (15 characters, no hyphens, etc.)?\nMaybe we don\u0027t care because this will only ever be \u0027_openscreen._udp\u0027.\n\nhttps://tools.ietf.org/html/rfc6763#page-19",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04401c35_daea4e24",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "I added these as DCHECKs since we should generally be using constants (like \"_openscreen._udp\") for these.",
      "parentUuid": "a72cd2f1_9dcd4832",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08fc6441_6ac39976",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 546,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "I think this would be more readable as if ... else if.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e300a8e1_da5652b6",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 546,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08fc6441_6ac39976",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f5f3ef5_01dd4dad",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 687,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Can this go into domain_name.h?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddca03c2_b1dd5e7d",
        "filename": "discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 687,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f5f3ef5_01dd4dad",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39edef76_2cebae3a",
        "filename": "discovery/mdns/mdns_responder_adapter_impl_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Can we use sample data from openscreen instead?\n\nThere should be a string-to-hex converter on the Web somewhere, although you\u0027ll have to manually create some labels.  Alternatively, use a packet capture from an existing mDNS implementation.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e89ea2a_de1928d0",
        "filename": "discovery/mdns/mdns_responder_adapter_impl_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39edef76_2cebae3a",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "477e4325_0ddbd5b5",
        "filename": "discovery/mdns/mdns_responder_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "size_t",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dc741dd_600ad06b",
        "filename": "discovery/mdns/mdns_responder_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "477e4325_0ddbd5b5",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dd17d59_2a3eb0e3",
        "filename": "discovery/mdns/mdns_responder_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "How do we know that |msg| to |msg+length| points to valid memory?",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b941d9ef_cc1651ba",
        "filename": "discovery/mdns/mdns_responder_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "Besides trusting mDNSResponder?  We don\u0027t.",
      "parentUuid": "5dd17d59_2a3eb0e3",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5afa1faf_f5bfd54a",
        "filename": "discovery/mdns/mdns_responder_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-08-23T21:51:47Z",
      "side": 1,
      "message": "Time since epoch is not very random :-)  What is this used for?\n\nWe will need to have a platform source of entropy to generate truly random values.",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a82aa62_0b77c562",
        "filename": "discovery/mdns/mdns_responder_platform.cc",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-08-25T00:25:27Z",
      "side": 1,
      "message": "It\u0027s used to resolve name conflicts when publishing records.  First, mDNSResponder tries 2-9, if that fails it starts adding random increments, seeded by this function.  I added a TODO for better PRNG when we have it.",
      "parentUuid": "5afa1faf_f5bfd54a",
      "revId": "257811a633c23968c3848df3aecabce36e5e4fe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}