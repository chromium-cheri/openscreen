{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cbf02490_a134a8c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1410933
      },
      "writtenOn": "2023-07-11T21:09:12Z",
      "side": 1,
      "message": "Hi davidben@,\n\nI don\u0027t work on the openscreen repo. I think jophba@ has more knowledge here and have added them to this CL.",
      "revId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d372ed33_78d78ed3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-07-13T18:51:34Z",
      "side": 1,
      "message": "Looks less painful that I thought.\n\nLGTM % feedback.",
      "revId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59639b30_817d395f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-07-13T19:28:32Z",
      "side": 1,
      "message": "Yeah, most of it is auto-generated. In the future we\u0027ll move those generated files into the BoringSSL tree so we won\u0027t have that diff noise, but not quite there yet. :-(",
      "parentUuid": "d372ed33_78d78ed3",
      "revId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03340d74_a40adefa",
        "filename": "cast/common/certificate/boringssl_trust_store.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-07-13T18:51:34Z",
      "side": 1,
      "message": "This works assuming everything is well inside the length of int and we aren\u0027t worried about overflows.\n\nIf that\u0027s true though why bother using get_uint64? Might as well call the signed version right?\n\nASN1_INTEGER_get_int64\n\nIf that\u0027s not true then you probably should add something from base/numerics/safe_conversions.h here.",
      "revId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5c5b91_648438aa",
        "filename": "cast/common/certificate/boringssl_trust_store.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-07-13T19:28:32Z",
      "side": 1,
      "message": "Overflows are handled by the `pathlen \u003e 0xff` check above. I made it a fatal error just to preserve the existing behavior, where `length !\u003d 1` was an error.\n\n`ASN1_INTEGER_get_int64` would allow negative values and we specifically want to reject those. Negative `pathlen` values are a syntax error:\n\n```\n   BasicConstraints ::\u003d SEQUENCE {\n        cA                      BOOLEAN DEFAULT FALSE,\n        pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\n```\nhttps://www.rfc-editor.org/rfc/rfc5280\n\nIt also wouldn\u0027t have done anything about overflow since `int64_t` may not fit in `int`.\n\n(BoringSSL\u0027s parser should just reject that, but we\u0027re not there yet for... reasons.)\n\n\u003e If that\u0027s not true then you probably should add something from base/numerics/safe_conversions.h here.\n\nDoes safe_conversions.h exist in openscreen? I wasn\u0027t able to find it.",
      "parentUuid": "03340d74_a40adefa",
      "revId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fd2bb04_894f9c3f",
        "filename": "cast/common/certificate/boringssl_trust_store.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-07-14T18:28:22Z",
      "side": 1,
      "message": "Oh that\u0027s fair. This sounds good to me then.",
      "parentUuid": "6d5c5b91_648438aa",
      "revId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7d7b8f9d57ecf1f01f63019352ba2f13533054f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}