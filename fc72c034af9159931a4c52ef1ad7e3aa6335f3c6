{
  "comments": [
    {
      "key": {
        "uuid": "c1c7deac_2be23e58",
        "filename": "dnssd/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "I don\u0027t completely object to having dnssd at the top level.  But it\u0027s really a sub-protocol for local discovery and not a main feature or use case of the library.\n\nWas there some discussion that led to landing this at the top-level?",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6e86515_c267ab80",
        "filename": "dnssd/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "done.\n\nDiscussed offline and moved.",
      "parentUuid": "c1c7deac_2be23e58",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33a5e2bc_66d4b9b5",
        "filename": "dnssd/dns_sd_temp.cc",
        "patchSetId": 6
      },
      "lineNbr": 4,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "OK to check in, if just to get buildbot visibility into this code.  Please add a TODO() to remove this in a later patch.",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc5c09f8_f48076d6",
        "filename": "dnssd/dns_sd_temp.cc",
        "patchSetId": 6
      },
      "lineNbr": 4,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33a5e2bc_66d4b9b5",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af8ac92_cfc9449f",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-16T20:29:47Z",
      "side": 1,
      "message": "I changed this class from a virtual base class to an implementation at Max\u0027s suggestion, but there are 2 cases I find concerning using this approach:\n1) What if we get data over the wire which is invalid (ie - invalid Instance/Service names or invalid TXT string name)\n2) What if the classes using this library want to test for support of this data?\n\nIf we don\u0027t want to support the above 2 cases, I see no problem with this approach. Thoughts?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 22
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23049555_f9d16dc7",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Discussed offline",
      "parentUuid": "7af8ac92_cfc9449f",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 22
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53f6317c_55067944",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Simple getters can be implemented inline.  Or do you plan to check in the rest of the implementation in a later patch?  It would be easier to review if this were a complete file.",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb71e2e2_91c399d7",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done. Updated to complete file.\n\nI\u0027ve added a TODO for validation methods for Instance, Service, and Domain per your comment on the design doc.",
      "parentUuid": "53f6317c_55067944",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd70171a_f9f749c6",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-16T21:47:46Z",
      "side": 1,
      "message": "Should we define operator\u003d\u003d() based on instance_id, service_id, and domain_id being equal (Or maybe there is a different method in C++ that\u0027s more appropriate)?\nIt would allow users of the library to have an easier time processing an Update result from the querier",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f42e3e3_aa1a5286",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-16T22:42:13Z",
      "side": 1,
      "message": "Definitely wouldn\u0027t hurt to have operator\u003d, including for verifying expectations in test. Feel free to add one in this CL or later as you deem necessary.",
      "parentUuid": "fd70171a_f9f749c6",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd31bbc9_b7665456",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Will plan to define this later in a follow-up CL",
      "parentUuid": "3f42e3e3_aa1a5286",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3957cf6f_5c5cd186",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "In any valid record, at least one will be set.",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d92539c_77858945",
        "filename": "dnssd/public/instance_record.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3957cf6f_5c5cd186",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "671d00fb_1231c48d",
        "filename": "dnssd/public/publisher.h",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Please document the behavior if there are already records with matching attributes.  How should the implementation de-duplicate?\n\nAlso s/DnsSdInstanceRecord/InstanceRecord/",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa504e56_f07e135b",
        "filename": "dnssd/public/publisher.h",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done for second part.\n\nI\u0027ve added a TODO to document this later on. It\u0027s hard to fill in these details without seeing how the mdns_publisher interface looks, since it has not yet been written.",
      "parentUuid": "671d00fb_1231c48d",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef12105f_cf423845",
        "filename": "dnssd/public/publisher.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "What happens if the caller attempts to register an invalid record?",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24b64ced_83a68a0c",
        "filename": "dnssd/public/publisher.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Based on the InstanceRecord class, it should not be possible to create an invalid record",
      "parentUuid": "ef12105f_cf423845",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7ac6984_e302f3f9",
        "filename": "dnssd/public/publisher.h",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "What happens if there is nothing matching (service, domain) registered?",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6deb0855_447b250f",
        "filename": "dnssd/public/publisher.h",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done\n\nAdded comment to specify this should be a no-op",
      "parentUuid": "e7ac6984_e302f3f9",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f9c165_623667f3",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Suggest s/DNS-SD record/InstanceRecord/ to avoid confusion with individual mDNS records.",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3f10062_bf2b4e7c",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84f9c165_623667f3",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b4c6961_3b329a2b",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-16T21:47:46Z",
      "side": 1,
      "message": "Are \u0027created\u0027 and \u0027deleted\u0027 the right names here?\n\u0027created\u0027 means all of PTR + TXT + SRV + (A or AAAA) were created\n\u0027deleted\u0027 means ANY of the above were deleted\n\nAlso, with this approach, we will fire an Updated record if we discover a new A or AAAA record after the ServiceRecord was already \u0027Created\u0027 - Not sure if this is good or bad, just making sure that we are on the same page",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "183692f0_70f95984",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-16T22:42:13Z",
      "side": 1,
      "message": "This should be created/updated/deleted for service instances, not for individual records. User of the DNS-SD should not care about what steps where necessary to get the information about the service.\n\nThen:\n1) created happens when we have SRV + TXT + A and/or AAAA\n2) updated happens on a change to SRV, TXT, A or AAAA record that we have, or if A or AAAA that we didn\u0027t have before is received (we had an IPv4 address, but now we also have IPv6), or one of A and AAAA records is deleted, but the other one is still alive\n3) deleted happens when SRV or TXT is deleted (expiration or goodbye), or A and/or AAAA is deleted and we don\u0027t have any address records.\n\nSo, probably rename it to InstanceChangeType and that\u0027s it for this CL :)",
      "parentUuid": "6b4c6961_3b329a2b",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8db171c0_190786ef",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "+1 to what Max said above.  The DNS-SD layer should hide, whenever possible, the details of how the service information was aggregated from the mDNS layer.\n\nThat being said, a strict deletion policy, where the expiration of any mDNS record triggers deletion of the service instance, could hurt reliability.  It may be that the responder left the network, or it may be transient network issues that prevented refresh records from making it through.\n\nThe strict policy may be OK as a first cut, but we may want to introduce an \"expired\" state so that callers can handle expiration differently from explicit goodbyes.  (But that can happen later.)",
      "parentUuid": "183692f0_70f95984",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb79cd1c_cf6ba630",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done\n\nAdded a TODO for expired state",
      "parentUuid": "8db171c0_190786ef",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dc55034_058bdce6",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-16T21:47:46Z",
      "side": 1,
      "message": "How do we want to handle errors?\nFor instance, if we get a callback saying SRV record for instance X was created, and we already have a SRV record for X, how do we want to handle this case?\n\nI\u0027m leaning towards silently ignoring these errors (since the embedder can\u0027t do much) but wanted to get feedback before going this route",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c355ef_9b53bb8e",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-16T22:42:13Z",
      "side": 1,
      "message": "New record replaces the old one for SRV, TXT and A/AAAA records (unique records), it\u0027s an update event. If we have one and another one comes with \"created\", this is a bug in MDNS.\n\nIf a new PTR record (shared record) comes with created, this means we discovered another instance of the service. If it\u0027s exactly the same one as we already have, it\u0027s a bug in MDNS.\n\nSo, I suggest DCHECK and optionally TRACE, otherwise ignore, unless RFC 6763 specifies what should or must be done.",
      "parentUuid": "9dc55034_058bdce6",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eca5903_2be7679e",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "The implementation needs to assume that the other side is buggy, if not outright malicious, so it should handle these cases in a way that hides misbehavior from the client.",
      "parentUuid": "32c355ef_9b53bb8e",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1278c4_994f77cb",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Discussed offline. Will implement in later CLs as discussed.",
      "parentUuid": "7eca5903_2be7679e",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52f3dbb0_838af8cf",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Bikeshed: prefer OnInstanceChanged.",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bc24073_a16a42f1",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52f3dbb0_838af8cf",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fec18b09_24cf1451",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-16T21:47:46Z",
      "side": 1,
      "message": "Do we want one callback, or multiple? For instance, multiple could look like:\n\n// Similar to the current callback for Create\nOnRecordCreated(const InstanceRecord\u0026 record)\n\n// Update tells us the updated record AND what changed from an enum of field names (kAddressV4, kAddressV6, kTxt, etc...)\nOnRecordUpdated(const InstanceRecord\u0026 record, InstanceRecordField field)\n\n// It seems weird to return a record that is already deleted (Especially based on the definition of \u0027delete\u0027 above). This way, we only say\n// the service/domain/instance that was deleted rather than giving information we expect to be no longer valid.\nOnRecordDeleted(const std::string\u0026 instance, const std::string service\u0026, const std::string\u0026 domain);",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 60
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19efc169_6c10163e",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-16T22:42:13Z",
      "side": 1,
      "message": "I don\u0027t think one way is substantially better than the other one.\n\nIf we go with one callback and then decide to replace Querier::Callback with std::function, it\u0027s a bit less work.\n\nAs for returning the instance that was deleted - we do not know how instances are stored by the user of DNS-SD, so it makes sense to provide the instance that was deleted.\n\nFor example, they store instance records in a dictionary from an IP address to an instance record. Only having instance, service and domain would be inconvenient.",
      "parentUuid": "fec18b09_24cf1451",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 60
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d81afe_0fad89b3",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "I prefer:\n\n- Multiple callbacks, each of which has to be implemented by the client.  This ensures that all three cases are handled and keeps the client code for each case cleanly separated.\n\n- Returning entire records, versus parts of records.  The client can decide how to map each record to its internal storage, and can detect what changes it cares about.",
      "parentUuid": "19efc169_6c10163e",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 60
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd0e7f15_fc1e50b7",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done.\n\nUpdated to 3 callbacks.",
      "parentUuid": "a6d81afe_0fad89b3",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 60
      },
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06712397_015ee21e",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Please document the lifetime assumptions around Callback here and below.  I assume this is taking an unowned pointer?",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ade69e25_269f4d10",
        "filename": "dnssd/public/querier.h",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06712397_015ee21e",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "675b00d8_beb32d37",
        "filename": "dnssd/public/txt_record.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Should there be a method to clear an existing value?",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a824302e_775c6818",
        "filename": "dnssd/public/txt_record.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "675b00d8_beb32d37",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56ccb174_f45ef381",
        "filename": "dnssd/public/txt_record.h",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Bikeshed:  Sometimes it\u0027s nicer to say:\n\nSetFlag(\"foo\")\nClearFlag(\"foo\") \n\nvs.\n\nSetFlag(\"foo\", false)\n\nwhere you have to remember that the \"false\" argument means to actually remove the flag.",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c12fa9c_82efd5e5",
        "filename": "dnssd/public/txt_record.h",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "I\u0027ve added Clear methods for both Value and Flag in addition to these methods\n\nThe goal here is to entirely hide that \u0027not present\u0027 means \u0027false\u0027 from the user, so SetFlag(\u0027foo\u0027, false) will internally call ClearFlag(\u0027foo\u0027)",
      "parentUuid": "56ccb174_f45ef381",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d470ce0_1ad6bb41",
        "filename": "dnssd/public/txt_record.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-17T22:24:30Z",
      "side": 1,
      "message": "Isn\u0027t a missing key the same as false?",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0631ca09_642d8cce",
        "filename": "dnssd/public/txt_record.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-17T23:35:59Z",
      "side": 1,
      "message": "That\u0027s correct. I am trying to hide that complexity from the caller",
      "parentUuid": "6d470ce0_1ad6bb41",
      "revId": "fc72c034af9159931a4c52ef1ad7e3aa6335f3c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}