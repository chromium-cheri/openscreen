{
  "comments": [
    {
      "key": {
        "uuid": "bc1098f4_9440cdc1",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "nit: style guide recommends simply uint64_t it \u003d 1; in this case",
      "range": {
        "startLine": 382,
        "startChar": 2,
        "endLine": 382,
        "endChar": 28
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bc227cd_623176ab",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc1098f4_9440cdc1",
      "range": {
        "startLine": 382,
        "startChar": 2,
        "endLine": 382,
        "endChar": 28
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32d81d0e_172b51cc",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 420,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Why +2?\nAlso, you can make it a for-loop\nfor (uint64_t it \u003d 1; ; it +\u003d2)",
      "range": {
        "startLine": 420,
        "startChar": 4,
        "endLine": 420,
        "endChar": 12
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16eb6870_7a7cd087",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 420,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "This +2 is to keep these IDs distinct from those in the while loop below - just personal preferance\n\nI actually had this previously - I changed back to the while loop after @mfoltz asked me to\nThis code will be pulled out during a follow-up CL, so I am going to leave it this way for now",
      "parentUuid": "32d81d0e_172b51cc",
      "range": {
        "startLine": 420,
        "startChar": 4,
        "endLine": 420,
        "endChar": 12
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d79e6832_bf733fd3",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 488,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Same",
      "range": {
        "startLine": 488,
        "startChar": 2,
        "endLine": 488,
        "endChar": 28
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72b40efa_b6c45c4f",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 488,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d79e6832_bf733fd3",
      "range": {
        "startLine": 488,
        "startChar": 2,
        "endLine": 488,
        "endChar": 28
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88cff125_29bbd46d",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 502,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Same",
      "range": {
        "startLine": 502,
        "startChar": 4,
        "endLine": 502,
        "endChar": 12
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bca7ebc9_70609832",
        "filename": "osp/demo/demo.cc",
        "patchSetId": 6
      },
      "lineNbr": 502,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88cff125_29bbd46d",
      "range": {
        "startLine": 502,
        "startChar": 4,
        "endLine": 502,
        "endChar": 12
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43a6a671_aeaa085c",
        "filename": "osp_base/error.h",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "I still think this one should not be defined at all as it\u0027s not clear if it puts Value into ostream or not. What this operator does is essentially equivalent to putting Error into ostream.",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 174,
        "endChar": 0
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95351b73_587775d3",
        "filename": "osp_base/error.h",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "I missed this comment last time - sorry about that. I removed where it was used but forgot to delete the actual method. Removing it now",
      "parentUuid": "43a6a671_aeaa085c",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 174,
        "endChar": 0
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddb174f5_74a99a02",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Looks unused in this class template. Is it needed for some disambiguation?",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 24
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31ae9ac5_8e688bf1",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Discussed in person. Removing this and all template parameters",
      "parentUuid": "ddb174f5_74a99a02",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 24
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8274100_c75a8b53",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Looks like this one can be an argument to the constructor, not a part of the type. Unlike TFileSize and TNameSize, nothing in the type depends on this.",
      "range": {
        "startLine": 144,
        "startChar": 10,
        "endLine": 144,
        "endChar": 24
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa839559_7106e6ee",
        "filename": "platform/api/internal/trace_logging_internal.h",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Discussed in person. Removing this and all template parameters",
      "parentUuid": "a8274100_c75a8b53",
      "range": {
        "startLine": 144,
        "startChar": 10,
        "endLine": 144,
        "endChar": 24
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cad97e7e_ee740768",
        "filename": "platform/api/time.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "I know I\u0027ve asked to add \"ms\" units, but it\u0027s microseconds, not milliseconds. Sorry :)\nSo probably \"us\", I guess.",
      "range": {
        "startLine": 47,
        "startChar": 50,
        "endLine": 47,
        "endChar": 52
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74f19469_22cdf27b",
        "filename": "platform/api/time.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Updated to microseconds throughout the CL",
      "parentUuid": "cad97e7e_ee740768",
      "range": {
        "startLine": 47,
        "startChar": 50,
        "endLine": 47,
        "endChar": 52
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7620942_8acb614a",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "If I understand correctly what happens here, this is going to be brutal on the compile time and possibly on the binary size, as this means a different quite real non-empty new type for every combination of line number, file name and name.\n\n__FILE__ and __LINE__ for all intents and purposes are pre-defined const char arrays that are available all the time at their respective const char* pointers.\nUnlike name, we shouldn\u0027t need to copy these.",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 64,
        "endChar": 52
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0c285b9_f7e947b9",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Discussed in person. Removed all template parameters, and removing string copies in place of pointers.",
      "parentUuid": "b7620942_8acb614a",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 64,
        "endChar": 52
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a49e906b_0138dd17",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "I\u0027m not convinced we need a class here instead of a simple function call to LogAsyncStart.\nWith TRACE_SCOPED having a class and logging in the destructor solves the scope problem. What does having a class here achieve that a direct function call does not do?",
      "range": {
        "startLine": 75,
        "startChar": 52,
        "endLine": 75,
        "endChar": 75
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac9b7ccf_de76f9d9",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "The benefit here is that we create a new entry in the stack of TraceIds - this way children of this trace will know this one\u0027s existence and properly treat it as a parent",
      "parentUuid": "a49e906b_0138dd17",
      "range": {
        "startLine": 75,
        "startChar": 52,
        "endLine": 75,
        "endChar": 75
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c471762_403da2d3",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "This always goes to default_trace_platform_, while TRACE_ASYNC_START might go to a different platform.",
      "range": {
        "startLine": 83,
        "startChar": 51,
        "endLine": 83,
        "endChar": 64
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a102027a_770f0f8b",
        "filename": "platform/api/trace_logging.h",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "In the real implementation of SynchronousTraceLogger and AsynchronousTraceLogger, the instance-level variable for platform is never used. The only case where this is used is for UnitTests - production code doesn\u0027t even provide a way to set it.\n\nIn all production code, both this and the TraceAsyncStart should be sent to the default_trace_platform",
      "parentUuid": "3c471762_403da2d3",
      "range": {
        "startLine": 83,
        "startChar": 51,
        "endLine": 83,
        "endChar": 64
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c9e178a_db3706ed",
        "filename": "platform/base/logging.cc",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Each call to str() makes a copy of what\u0027s inside string stream",
      "range": {
        "startLine": 45,
        "startChar": 45,
        "endLine": 45,
        "endChar": 78
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d550f65_81324635",
        "filename": "platform/base/logging.cc",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "Good catch. Updating to only use one copy",
      "parentUuid": "7c9e178a_db3706ed",
      "range": {
        "startLine": 45,
        "startChar": 45,
        "endLine": 45,
        "endChar": 78
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13006ecd_521760c3",
        "filename": "platform/base/task_runner_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "I like how it adds metadata here, very neat.",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 39
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6743a00_08194d8d",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "This is always true for a valid category.\nAlso kAllLogCategoriesMask is the same as TraceCategory::Any",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24d13dc3_353ca7cf",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "This is left intentionally for now. Once this is in, I plan to have a discussion with the team about when we want Tracing enabled (probably when I also add disabling it on non-debug builds), but pending that change I want logs to always occur",
      "parentUuid": "c6743a00_08194d8d",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "008f11fb_5e141c22",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-26T21:36:33Z",
      "side": 1,
      "message": "Is just trace_id enough here to match this to async trace start?",
      "range": {
        "startLine": 64,
        "startChar": 50,
        "endLine": 64,
        "endChar": 58
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69d1f41f_1fa51d37",
        "filename": "platform/base/trace_logging_platform.cc",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-27T17:03:35Z",
      "side": 1,
      "message": "The same trace_id should never be used for 2 different logs, so it should be enough information. If not, the assumptions of the library are being violated and it is an issue in the calling code",
      "parentUuid": "008f11fb_5e141c22",
      "range": {
        "startLine": 64,
        "startChar": 50,
        "endLine": 64,
        "endChar": 58
      },
      "revId": "9e29701220d2a9010eafe66c76926ec36dc58639",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}