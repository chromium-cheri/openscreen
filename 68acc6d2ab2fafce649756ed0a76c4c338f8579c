{
  "comments": [
    {
      "key": {
        "uuid": "ba9b2173_8472e340",
        "filename": "discovery/dnssd/impl/dns_data_graph.cc",
        "patchSetId": 5
      },
      "lineNbr": 273,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T21:42:28Z",
      "side": 1,
      "message": "Are these handlers unused? Auto lacks clarity here, are these unique_ptrs you are holding until they go out of scope?",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94f17857_d6c24b50",
        "filename": "discovery/dnssd/impl/dns_data_graph.cc",
        "patchSetId": 5
      },
      "lineNbr": 273,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-17T22:37:36Z",
      "side": 1,
      "message": "Looking now, this is definitely hard to read\n\nSpent a while trying to figure out how to make what\u0027s happening here clearer. Realized I could replace the SetCreationCallback / SetDeletionCallback with macros\nNow IMHO it\u0027s much clearer what\u0027s happening (and the creation of an object is hidden), plus now no unique_ptr is needed which saves a heap allocation\n\nWDYT?",
      "parentUuid": "ba9b2173_8472e340",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b346f973_c7775d76",
        "filename": "discovery/dnssd/impl/dns_data_graph.cc",
        "patchSetId": 5
      },
      "lineNbr": 273,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-18T18:42:18Z",
      "side": 1,
      "message": "Hmmm. Generally I would vote for not having macros (style guide quote below). I read this as the creation and delete callbacks are only set while the object is alive? This is a scope-level object similar to std::lock_guard in a sense right (https://en.cppreference.com/w/cpp/thread/lock_guard)?\n\n  #define SET_CREATION_CALLBACK(callback) \\\n    NodeLifetimeHandler creation_handler(\u0026on_node_creation_, callback)\n  #define SET_DELETION_CALLBACK(callback) \\\n    NodeLifetimeHandler deletion_handler(\u0026on_node_deletion_, callback)\n\nhow about a rename and return a stack object instead of a heap object:\n\n  // Return lifetime objects that ensure that the associated callback is ran when\n  // nodes are created or deleted, respectively. Note that the callbacks will no\n  // longer be ran when the NodeLifetimeHandler goes out of scope.\n  NodeLifetimeHandler ScopedCreationHandler(DomainChangeCallback creation_cb);\n  NodeLifetimeHandler ScopedDeletionHandler(DomainChangeCallback  deletion_cb);\n\n  auto lifetime_handler \u003d ScopedCreationHandler(std::move(on_start_tracking));\n\n\n\"Avoid defining macros, especially in headers; prefer inline functions, enums, and const variables. Name macros with a project-specific prefix. Do not use macros to define pieces of a C++ API.\n\nMacros mean that the code you see is not the same as the code the compiler sees. This can introduce unexpected behavior, especially since macros have global scope.\"\nhttps://google.github.io/styleguide/cppguide.html#Preprocessor_Macros",
      "parentUuid": "94f17857_d6c24b50",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82c6f430_4c14ac55",
        "filename": "discovery/dnssd/impl/dns_data_graph.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T21:42:28Z",
      "side": 1,
      "message": "Nit: replace \"this CL\" with \"patch 2246653.\"\n\nIIRC TODOs should be pick uppable by anyone, e.g. I could pick this up if needed, so having a little more context is worth it IMO.",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec298bcf_b9f6cd6b",
        "filename": "discovery/dnssd/impl/dns_data_graph.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-17T22:37:36Z",
      "side": 1,
      "message": "Done\n\nI was actually going to this the moment it got checked in. Originally had it in this CL until I realized it made the diff way bigger and the CL much harder to review. So split it up. But it\u0027s too much of a change for gerrit rebase to like it :)",
      "parentUuid": "82c6f430_4c14ac55",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9f65ce0_279e212c",
        "filename": "discovery/dnssd/impl/dns_data_graph.h",
        "patchSetId": 5
      },
      "lineNbr": 174,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-17T21:42:28Z",
      "side": 1,
      "message": "Any reason these classes can\u0027t be movable? Just preference?",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f793a975_76a35644",
        "filename": "discovery/dnssd/impl/dns_data_graph.h",
        "patchSetId": 5
      },
      "lineNbr": 174,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-17T22:37:36Z",
      "side": 1,
      "message": "The pointers to this node in other nodes\u0027 |parent_| and |child_| vectors are invalidated if the nodes moves",
      "parentUuid": "f9f65ce0_279e212c",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00c1f4ed_4d83ec17",
        "filename": "discovery/dnssd/impl/dns_data_graph.h",
        "patchSetId": 5
      },
      "lineNbr": 174,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-18T18:42:18Z",
      "side": 1,
      "message": "Might be worth a comment.",
      "parentUuid": "f793a975_76a35644",
      "revId": "68acc6d2ab2fafce649756ed0a76c4c338f8579c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}