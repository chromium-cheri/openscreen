{
  "comments": [
    {
      "key": {
        "uuid": "57355039_e518b4e2",
        "filename": "api/impl/quic/quic_client.cc",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-05T14:35:09Z",
      "side": 1,
      "message": "Would it be possible to add a method to QuicConnection to do these cleanup actions like QuicConnection::Cleanup()?",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b9a39a0_6785c7b4",
        "filename": "api/impl/quic/quic_client.cc",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-21T23:37:32Z",
      "side": 1,
      "message": "No, because the server doesn\u0027t do the same thing at the moment (since it\u0027s connection starts with no streams, it can\u0027t close it on !has_streams()).",
      "parentUuid": "57355039_e518b4e2",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d891904_c962ad4a",
        "filename": "api/impl/quic/quic_client.cc",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-05T14:35:09Z",
      "side": 1,
      "message": "The spec says, \"A request and a response includes a request ID which is an unsigned integer chosen by the requester. Responses must include the request ID of the request they are associated with.\"\n\nI don\u0027t think these are scoped to a specific QUIC connection, meaning that a request could be sent on one connection and a response on another (from this instance of the library to the same endpoint).\n\nI filed https://github.com/webscreens/openscreenprotocol/issues/139 to improve the spec language.",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3238b722_6b490432",
        "filename": "api/impl/quic/quic_client.cc",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-21T23:37:32Z",
      "side": 1,
      "message": "That\u0027s true, but this is tracking the next request ID to use for the given endpoint, so it doesn\u0027t prevent responses coming in on a different connection from being matched.\n\nHowever, if we don\u0027t reset it, it will leak.  If we do reset it, we\u0027ll send \"duplicate\" (but with some time separation) request IDs to the endpoint.  Maybe the right answer is to have a timeout period with no active connections lead to a reset.  WDYT?",
      "parentUuid": "8d891904_c962ad4a",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "035e8d53_be5a1b4f",
        "filename": "api/impl/quic/quic_client.cc",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-05T14:35:09Z",
      "side": 1,
      "message": "Similar comment here.",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "452083cd_5420edbd",
        "filename": "api/impl/quic/quic_server.cc",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-05T14:35:09Z",
      "side": 1,
      "message": "Similar comments as in quic_client.cc.",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4033d19_94e2b7f6",
        "filename": "api/public/endpoint_request_ids.cc",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-05T14:35:09Z",
      "side": 1,
      "message": "The downside to keeping the request counter across connections is that you will never erase an endpoint_id from the map...  unless we added something to the protocol to relay the next request_id on a new connection.",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dfdbfd8_6efccce3",
        "filename": "api/public/endpoint_request_ids.cc",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-21T23:37:32Z",
      "side": 1,
      "message": "WDYT about a timeout with no active connections vs. making that part of our opening \"handshake/setup\" messages?",
      "parentUuid": "b4033d19_94e2b7f6",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0efe640_fa36da71",
        "filename": "api/public/endpoint_request_ids.h",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-05T14:35:09Z",
      "side": 1,
      "message": "But it looks like both ends of the connection will start at 0 and increment by one? So there will be duplicate IDs on the connection.\n\nShould one side start at 1 and both sides increment by 2?",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4b03dd6_5128d1d8",
        "filename": "api/public/endpoint_request_ids.h",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-06T23:42:38Z",
      "side": 1,
      "message": "Do we need to maintain a counter at all? If we instead picked a random uint64, the chance of getting the same id twice is 1/2^64, which should in practice be unique. This would mean that there is no \"state\" that 2 connections could share, so we don\u0027t have to worry about those edge-cases where different clients are in either the same or different states",
      "parentUuid": "e0efe640_fa36da71",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67af0824_a65f8c89",
        "filename": "api/public/endpoint_request_ids.h",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-21T23:37:32Z",
      "side": 1,
      "message": "Actually, I\u0027m not sure why I even added one to the server side, since we currently don\u0027t have any server-to-client requests.  I suppose if we want to keep that in case of future message additions, having the server start at 1 and both increment by 2 is reasonable (and is actually similar to what QUIC does for stream IDs since either side can initiate).  I will do that for now.\n\nMark responded to using a random request ID already, which I think covers this.",
      "parentUuid": "f4b03dd6_5128d1d8",
      "revId": "496db8e0190223797d7b8a37b1a2c8500602d29a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}