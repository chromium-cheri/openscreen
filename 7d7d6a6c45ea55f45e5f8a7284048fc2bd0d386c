{
  "comments": [
    {
      "key": {
        "uuid": "675bcd63_bfe4a5de",
        "filename": "osp/impl/discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 347,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "Is there a bug for these? We shouldn\u0027t leave stuff like this unimplemented where we would want users of the library to see these errors to handle them in the application.",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edeb35da_222bdb7e",
        "filename": "osp/impl/discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 347,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "I will file a bug in the morning. Leaving this open pending the bug\n\nDo you suggest sprinkling TODOs throughout the code as-well?",
      "parentUuid": "675bcd63_bfe4a5de",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c5529b8_9112b948",
        "filename": "osp/impl/discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 347,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T16:48:10Z",
      "side": 1,
      "message": "I\u0027ve added TODOs at all of the OSP_UNIMPLEMENTED spots, just to be sure we didn\u0027t miss any - they will show up at the next iteration, since it didn\u0027t seem worth pushing another just for that.\n\nBug is here: https://bugs.chromium.org/p/openscreen/issues/detail?id\u003d67",
      "parentUuid": "edeb35da_222bdb7e",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cf261b8_d2265ae9",
        "filename": "osp/impl/discovery/mdns/mdns_responder_adapter_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 347,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T23:06:55Z",
      "side": 1,
      "message": "Thanks.\n\nYes, SOP is for all TODO\u0027s to have a tracking bug (unless you know for sure some soon upcoming CL is going to replace them). Then, the TODO comment looks like:\n\n  // TODO(issues/67): Errors should be bubbled up to embedders for handling.\n\nTwo interesting relevant discussions (since the convention is more \"tribal knowledge\" than explicit style guide rules):\n\nhttps://groups.google.com/a/chromium.org/forum/#!topic/java/_Qz571x0_dE\nhttps://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/whBCkcY8xtA/UCmmlblbDQAJ",
      "parentUuid": "3c5529b8_9112b948",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 19
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf9b0506_ba325642",
        "filename": "osp/impl/quic/testing/fake_quic_connection.cc",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "Did you mean OSP_NOTREACHED() for these?",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a53f60e_343bb7dc",
        "filename": "osp/impl/quic/testing/fake_quic_connection.cc",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf9b0506_ba325642",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e49ee3c8_c853f797",
        "filename": "osp/impl/testing/fake_mdns_responder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "OSP_NOTREACHED() for these too.",
      "range": {
        "startLine": 241,
        "startChar": 2,
        "endLine": 241,
        "endChar": 18
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bbf7b18_ede26628",
        "filename": "osp/impl/testing/fake_mdns_responder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e49ee3c8_c853f797",
      "range": {
        "startLine": 241,
        "startChar": 2,
        "endLine": 241,
        "endChar": 18
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e56d48fa_8490453a",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "OOC, why is this global, and not per instance of a UdpSocket?",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb8e4666_9e49f611",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "The goal here is that when a new socket is created, we want to perform some action (ie, the global NetworkReader\u0027s list of sockets to watch in StandAlone - that way we know to watch the socket for reads)\n\nI am open to alternative design options (as a follow-up CL), and this was the best so far. Definitely still open to something better though.",
      "parentUuid": "e56d48fa_8490453a",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b40ea2db_efa0659c",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "Let\u0027s remove these:\n\n1. MockUdpSocket doesn\u0027t seem to need private access.\n\n2. If NetworkReader needs to call OnRead() (a protected, not private method), then UdpSocketPosix (the subclass impl) should provide access to it; not the public API.",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 186,
        "endChar": 29
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6500c674_fe79f0b7",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "MockUdpSocket needs access for calling PostPacket (which needs access to the task runner)\n\nRealized I could avoid returning the result from RecieveMessage in UdpSocketPosix, and avoid issue #2 entirely - so that\u0027s fixed in the newest iteration.",
      "parentUuid": "b40ea2db_efa0659c",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 186,
        "endChar": 29
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db331f41_dc302dde",
        "filename": "platform/api/udp_socket.h",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T00:32:07Z",
      "side": 1,
      "message": "Updated MockUpdSocket to remove this dependency. friend declarations have now all been removed.",
      "parentUuid": "6500c674_fe79f0b7",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 186,
        "endChar": 29
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7d73df2_82996190",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "Is this the same as:\n\n  sockets \u003d sockets_;\n\nOtherwise, nit: Before the loop: sockets.reserve(sockets_.size());",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de9ca788_0e3ee457",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "It\u0027s a different type - sockets_ is a unordered_set. \n\nAdded sockets.reserve",
      "parentUuid": "a7d73df2_82996190",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96e8c415_e673a42f",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T23:06:55Z",
      "side": 1,
      "message": "FWIW, |sockets_| should probably be a vector. It\u0027s usually a bad idea to use unordered_set/map on small numbers of elements, unless they are objects that cannot move in memory (and then, std::set/map are often better for that, even if you don\u0027t need things kept sorted).",
      "parentUuid": "de9ca788_0e3ee457",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd403ca9_0d41bcee",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T00:32:07Z",
      "side": 1,
      "message": "Updating to vector. We do still need the copy, though - the NetworkReader\u0027s list might get modified while it\u0027s being used in the AwaitSocketsReadable method",
      "parentUuid": "96e8c415_e673a42f",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51b54583_108d062c",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-27T23:42:05Z",
      "side": 1,
      "message": "re. the new bool argument: Code external to this class should not decide whether the current thread has to block based on private implementation details.",
      "range": {
        "startLine": 84,
        "startChar": 48,
        "endLine": 84,
        "endChar": 64
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a874dfc_40fb8a2d",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-28T00:35:44Z",
      "side": 1,
      "message": "This is currently a protected method, so it would only be decided by children\n\nThe purpose of this bool is to allow for testing. How about I make OnDelete private and friend the testing implementation?",
      "parentUuid": "51b54583_108d062c",
      "range": {
        "startLine": 84,
        "startChar": 48,
        "endLine": 84,
        "endChar": 64
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a17dea_13a7992a",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T23:06:55Z",
      "side": 1,
      "message": "Can we always lock? Why would we not do locking/notifications when testing? Seems this would be something we want to test. :)\n\n...and maybe we shouldn\u0027t be mocking low-level platform code (i.e., use real sockets to test this)?",
      "parentUuid": "3a874dfc_40fb8a2d",
      "range": {
        "startLine": 84,
        "startChar": 48,
        "endLine": 84,
        "endChar": 64
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dcbfce5_48dee471",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T00:32:07Z",
      "side": 1,
      "message": "The lock here is a std::condition_variable. Normally, it gets cleared every ~100 ms when the NetworkReader\u0027s Wait loop runs - it\u0027s only here to ensure that the socket doesn\u0027t get destroyed while it\u0027s currently being used by the NetworkReader. It doesn\u0027t actually affect the functionality of the socket or NetworkRunner beyond ensuring safe socket deletion - whether we use a real socket or a mock doesn\u0027t actually matter for this method\n\nIf you think it\u0027s important to add a UT to cover that this actually blocks, I can work on that, but it would involve making the UT\u0027s fake NetworkReader a friend of the real NetworkReader so that it can access the private condition_variable and clear it - and you\u0027ve said elsewhere in this CL that you don\u0027t like the pattern of friending a test class\n\nLet me know your thoughts. I can make this change as a follow up CL, though I\u0027d prefer not to block this CL on that change unless you think its important to do so",
      "parentUuid": "b4a17dea_13a7992a",
      "range": {
        "startLine": 84,
        "startChar": 48,
        "endLine": 84,
        "endChar": 64
      },
      "revId": "7d7d6a6c45ea55f45e5f8a7284048fc2bd0d386c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}