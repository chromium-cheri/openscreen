{
  "comments": [
    {
      "key": {
        "uuid": "70982c8b_e15e5c8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:41:33Z",
      "side": 1,
      "message": "typo throughout: implementation",
      "range": {
        "startLine": 7,
        "startChar": 18,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62eed076_16d68860",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70982c8b_e15e5c8d",
      "range": {
        "startLine": 7,
        "startChar": 18,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a58152f_a4607790",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "since the first thing the method does is create a string from a string view, maybe just accept a string as an argument?",
      "range": {
        "startLine": 14,
        "startChar": 2,
        "endLine": 14,
        "endChar": 49
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74e7ad6d_507d5b3d",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Done\n\nUpdated all methods and description",
      "parentUuid": "3a58152f_a4607790",
      "range": {
        "startLine": 14,
        "startChar": 2,
        "endLine": 14,
        "endChar": 49
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05cea031_c3ee88c3",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Will that work for an empty span? How can a caller set a non-boolean flag to be an empty value, e.g.\"foo\u003d\" ?",
      "range": {
        "startLine": 20,
        "startChar": 2,
        "endLine": 20,
        "endChar": 70
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d896870e_8893397c",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "This does work for empty span. Added a UT to validate it",
      "parentUuid": "05cea031_c3ee88c3",
      "range": {
        "startLine": 20,
        "startChar": 2,
        "endLine": 20,
        "endChar": 70
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b7b2aad_d24fd640",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Check if key is valid in Get methods as well?",
      "range": {
        "startLine": 41,
        "startChar": 14,
        "endLine": 41,
        "endChar": 24
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8be6b84_46de5ea7",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Done\n\nMy thought was that (unless we wanted to return a special error code here, which doesn\u0027t seem useful to the user), it would be faster to calculate the key hash than to perform our key check.",
      "parentUuid": "4b7b2aad_d24fd640",
      "range": {
        "startLine": 41,
        "startChar": 14,
        "endLine": 41,
        "endChar": 24
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af84c8d0_49722aa3",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Check if key is valid in Clear methods as well?",
      "range": {
        "startLine": 68,
        "startChar": 14,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80b82377_8ef81c53",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Closing as duplicate with above",
      "parentUuid": "af84c8d0_49722aa3",
      "range": {
        "startLine": 68,
        "startChar": 14,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31166cf4_8a36b981",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": ".erase and check returned result",
      "range": {
        "startLine": 70,
        "startChar": 17,
        "endLine": 70,
        "endChar": 21
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c61279d5_8d474c6f",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "With the code as-is, we only erase if the data type is as expected (calling ClearValue on a bool doesn\u0027t clear and returns an error, and same for ClearFlag)\n\nCalling Erase would erase in either case, and involve de-allocating and re-allocating on the std::unordered_map if we needed to re-insert it\n\nIf we want the behavior to erase in either case, we can discuss changing to that once Mark is back, but then there is no reason to separate the ClearFlag from ClearValue calls",
      "parentUuid": "31166cf4_8a36b981",
      "range": {
        "startLine": 70,
        "startChar": 17,
        "endLine": 70,
        "endChar": 21
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "992673dd_b3d6b1df",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 84,
        "startChar": 17,
        "endLine": 84,
        "endChar": 21
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "554f2f9c_2f0bf21e",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "See above comment",
      "parentUuid": "992673dd_b3d6b1df",
      "range": {
        "startLine": 84,
        "startChar": 17,
        "endLine": 84,
        "endChar": 21
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ae907dc_d5cb3e00",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Shouldn\u0027t it be 254 to account for \u0027\u003d\u0027 character?",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 97,
        "endChar": 25
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59993536_22918cf6",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "In the boolean case, there is no \u0027\u003d\u0027 character. All key validations in this case are the same, so it didn\u0027t seem worth creating a separate ValidateBooleanKey method\n\nChecking the total length including the \u0027\u003d\u0027 is separately checked for in the IsKeyValuePair method",
      "parentUuid": "4ae907dc_d5cb3e00",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 97,
        "endChar": 25
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff5b680a_4a19657a",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T18:40:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "59993536_22918cf6",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 97,
        "endChar": 25
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f616381_0b7c6650",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Call IsKeyValid from this method? Right now KVP can be valid with an invalid key",
      "range": {
        "startLine": 116,
        "startChar": 21,
        "endLine": 116,
        "endChar": 40
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef5a262e_72718632",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f616381_0b7c6650",
      "range": {
        "startLine": 116,
        "startChar": 21,
        "endLine": 116,
        "endChar": 40
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39357c7f_22187b5d",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Doesn\u0027t matter, but usually strings are lower cased for case insensitive comparison.",
      "range": {
        "startLine": 128,
        "startChar": 40,
        "endLine": 128,
        "endChar": 55
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daf41889_fb3f6a30",
        "filename": "discovery/dnssd/public/txt_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39357c7f_22187b5d",
      "range": {
        "startLine": 128,
        "startChar": 40,
        "endLine": 128,
        "endChar": 55
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ab9113b_bf2e62a8",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "nit: Keys are case-insensitive.\nsame in the comment for GetValue",
      "range": {
        "startLine": 24,
        "startChar": 43,
        "endLine": 24,
        "endChar": 70
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc018b9a_aa3f935c",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ab9113b_bf2e62a8",
      "range": {
        "startLine": 24,
        "startChar": 43,
        "endLine": 24,
        "endChar": 70
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61e48464_4627aa8d",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Doesn\u0027t empty vector mean the same thing as no vector at all? Why not use std::vector\u003cuint8_t\u003e directly? I think if you create the vector with size 0 it will not do a heap allocation.",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 56
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fce9f72a_d7cabbdd",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "Actually, no. Empty strings are valid values for txt records of the form \u0027name\u003d\u0027, but these need to be differentiated from boolean values of the form \u0027name\u0027 with no equals",
      "parentUuid": "61e48464_4627aa8d",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 56
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7240fcf6_59b0892b",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T18:40:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fce9f72a_d7cabbdd",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 56
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57758368_8044e5cf",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Why do you need mutable here?",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 9
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dbbcad5_8a536f97",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "mutable is needed because calling \u0027std::vector::data()\u0027 on line 50 of the cc file is a non-const call, so we need non-const access to the whole map",
      "parentUuid": "57758368_8044e5cf",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 9
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c44ecc85_881482c7",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T18:40:57Z",
      "side": 1,
      "message": "I think if you return a const span from GetValue, you won\u0027t need mutable.\nPlus returning a modifyable span to an internal collection is potentially dangerous.",
      "parentUuid": "8dbbcad5_8a536f97",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 9
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d267141a_f1a7b92e",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T17:40:37Z",
      "side": 1,
      "message": "Why not store keys all lower case when you add it to the map?",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 65,
        "endChar": 56
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "556e1ede_009225f8",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T18:26:26Z",
      "side": 1,
      "message": "That\u0027s an option, but I thought this was cleaner / less error prone. If we forget to call ToLower() anywhere, it will lead to a bug that could easily be missed in Unit Tests\n\nIf you\u0027d prefer, I can change to this approach",
      "parentUuid": "d267141a_f1a7b92e",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 65,
        "endChar": 56
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4235ac04_dac93fde",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-22T18:40:57Z",
      "side": 1,
      "message": "I don\u0027t feel strongly, just thought it would be less code overall, plus if you were to take this approach, then you can still accept string view as an argument and construct a lower-case string from a string view.",
      "parentUuid": "556e1ede_009225f8",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 65,
        "endChar": 56
      },
      "revId": "27aa4954c1d8e0694d8bb0181bdc370e755df968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}