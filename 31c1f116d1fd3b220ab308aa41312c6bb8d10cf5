{
  "comments": [
    {
      "key": {
        "uuid": "f73022f2_530ce1ed",
        "filename": "discovery/dnssd/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "Can this be moved to discovery/BUILD.gn?\n\nRationale: I want to avoid creating BUILD files more than one level deep in the repo, unless there\u0027s a good reason.  It just means more maintenance work for changes that touch multiple BUILD files.",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3258d76_dba584f0",
        "filename": "discovery/dnssd/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f73022f2_530ce1ed",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed896e4b_b1d4bfd4",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "You can\u0027t import or alias namespaces per style guide, so if you want to this API you would either write a using-declaration (which would strip all this context), or a long qualified name.\n\nI would prefer putting these names in just openscreen, or openscreen/discovery, and naming the class DnsSdInstanceRecord.\n\nThat way you can write discovery::DnsSdInstanceRecord in other openscreen headers, and DnsSdInstanceRecord with a using-declaration in other .cc.\n\nI\u0027m open to doing this if there\u0027s an advantage, but I don\u0027t think there are other three-deep namespaces in our project, so there\u0027s a consistency issue as well.",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "655fdf6e_db833840",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Changing to openscreen::discovery and updating names as suggested\n\nI think this is worth a larger discussion between us two and Max, but we can update that later as you mentioned.",
      "parentUuid": "ed896e4b_b1d4bfd4",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68a89410_b2e12e81",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-18T22:06:05Z",
      "side": 1,
      "message": "According to RFC6763, this is an arbitrary utf8-encoded string when it gets sent over the wire\n\nShould we change this type to account for that? Maybe a std::vector\u003cuint8_t\u003e? (Abseil doesn\u0027t have support for utf8, so we would either need to write our own or take a new dependency)",
      "range": {
        "startLine": 23,
        "startChar": 17,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df239778_f32cec77",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-18T23:16:46Z",
      "side": 1,
      "message": "I\u0027m in favor of vector\u003cuint8_t\u003e here\n\"The value is opaque binary data. Often the value for a particular attribute will be US-ASCII or UTF-8 text, but it is legal for a value to be any binary data.\"\n\nUnless we put UTF-8 there we don\u0027t have to worry about it.",
      "parentUuid": "68a89410_b2e12e81",
      "range": {
        "startLine": 23,
        "startChar": 17,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d62e9670_daf12e4c",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-18T23:46:57Z",
      "side": 1,
      "message": "Actually \"The \u003cInstance\u003e portion of the Service Instance Name is a user-friendly name consisting of arbitrary Net-Unicode text\", so it does need to be valid utf-8\n\nPersonally, I think taking in a vector\u003cint8_t\u003e or vector\u003cint32_t\u003e would make the most sense - taking in a string would be weird if all characters don\u0027t fit into an 8-bit char",
      "parentUuid": "df239778_f32cec77",
      "range": {
        "startLine": 23,
        "startChar": 17,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de8d82cf_3abe3766",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "Because the contents are treated as a string, std::string is the right data type.  However before the contents are written to the wire or passed to the client the contents need to be validated against the Net-Unicode requirements.  Where were you planning on doing that?",
      "parentUuid": "d62e9670_daf12e4c",
      "range": {
        "startLine": 23,
        "startChar": 17,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9060be36_f66a9fc4",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Leaving as a string\n\nThat will be done in the validation methods (see TODO above), and we will DCHECK it in the InstanceRecord ctor, based on what you asked for in the design doc\n\nPlanning to put up a CL with these details today or tomorrow",
      "parentUuid": "de8d82cf_3abe3766",
      "range": {
        "startLine": 23,
        "startChar": 17,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33a9d799_2cfe46cb",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "Blank line before NOTE",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27617023_37ab16cb",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33a9d799_2cfe46cb",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6adf934b_43bcd9a1",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "Please name the args ipv4_endpoint and ipv6_endpoint to make this API clearer.",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85808c7f_456997ea",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Done\n\nIn the follow UP CL implementing this class, either can be the v4 or b6 address. More details in the follow-up CL",
      "parentUuid": "6adf934b_43bcd9a1",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e24f0388_5f7ec93c",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "There are no setters.  Can you make the members const?",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41d814c9_13665d37",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-21T23:26:33Z",
      "side": 1,
      "message": "That makes the class non-movable",
      "parentUuid": "e24f0388_5f7ec93c",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5cd91b7_3b8dceda",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Leaving as-is per Max\u0027s comment. If you still want these cosnt (And this class non-copyable), I can make the change in a follow-up CL",
      "parentUuid": "41d814c9_13665d37",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddc46fce_1f6f456c",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:49:48Z",
      "side": 1,
      "message": "SGTM, let\u0027s leave it movable.",
      "parentUuid": "d5cd91b7_3b8dceda",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de14abd2_987688f9",
        "filename": "discovery/dnssd/public/querier.h",
        "patchSetId": 7
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "Where is the API to register this callback object?",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a88026a_ba899d3c",
        "filename": "discovery/dnssd/public/querier.h",
        "patchSetId": 7
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "This is registered below on the StartQuery method",
      "parentUuid": "de14abd2_987688f9",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7da27cc1_f9b21a7d",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "We will likely want convenience methods to get/set values as absl::string_view; but fine to add later when there is a demonstrated need.",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "435f408c_f5e3f23b",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-21T23:17:52Z",
      "side": 1,
      "message": "Can the getters be const?",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e5968dd_1ea8619f",
        "filename": "discovery/dnssd/public/txt_record.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-21T23:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "435f408c_f5e3f23b",
      "revId": "31c1f116d1fd3b220ab308aa41312c6bb8d10cf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}