{
  "comments": [
    {
      "key": {
        "uuid": "b607c74d_8fc683ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1333145
      },
      "writtenOn": "2019-03-20T19:53:45Z",
      "side": 1,
      "message": "We most likely have well-tested and maintained logging facilities available to us. Style guide mentions DVLOG, although I\u0027m not sure if it does what we need.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdaea460_aff1cefb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-20T20:01:09Z",
      "side": 1,
      "message": "My main intention here was to create a wrapper around the logging class to abstract away all of the file handling and similar issues - so that a caller only needs to call Logger::Log(...) or Logger::Error(...)\n\nIf there are well-tested methods, I am happy to swap out the underlying log call I use (currently dprintf, to align with the text output method in codegen.c). I didn\u0027t want to use stdout / stderr and redirect output because that would mean all output is redirected instead of just our logs - ie the error message in your parallel CL or similar warnings would be redirected in addition to the logs intended for output",
      "parentUuid": "b607c74d_8fc683ae",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}