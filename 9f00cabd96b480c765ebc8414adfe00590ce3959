{
  "comments": [
    {
      "key": {
        "uuid": "b607c74d_8fc683ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1333145
      },
      "writtenOn": "2019-03-20T19:53:45Z",
      "side": 1,
      "message": "We most likely have well-tested and maintained logging facilities available to us. Style guide mentions DVLOG, although I\u0027m not sure if it does what we need.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdaea460_aff1cefb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-20T20:01:09Z",
      "side": 1,
      "message": "My main intention here was to create a wrapper around the logging class to abstract away all of the file handling and similar issues - so that a caller only needs to call Logger::Log(...) or Logger::Error(...)\n\nIf there are well-tested methods, I am happy to swap out the underlying log call I use (currently dprintf, to align with the text output method in codegen.c). I didn\u0027t want to use stdout / stderr and redirect output because that would mean all output is redirected instead of just our logs - ie the error message in your parallel CL or similar warnings would be redirected in addition to the logs intended for output",
      "parentUuid": "b607c74d_8fc683ae",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c5e0a9_b5326d31",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "There is indeed already logging code for the library in //platform/api/logging.h, but my preference is to keep the tool independent of the rest of the library.  OTOH depending on the logging code is minor, OTOH, duplicating it is fairly minor as well.\n\nAs far as stdout/stderr goes, I don\u0027t think it\u0027s a problem to log to those; ninja should hide all output unless there\u0027s an error, and stdout/stderr is easier to debug if running the compiler separately.",
      "parentUuid": "bdaea460_aff1cefb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fab407bc_f53c1652",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-22T01:00:27Z",
      "side": 1,
      "message": "So while looking at compiling us in Chromium, I noticed that some OSP_CHECKs have already snuck into the tool.  So in that case, I\u0027d prefer just using that here.  We can then just redirect stdout/stderr in cddl.py.",
      "parentUuid": "a3c5e0a9_b5326d31",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e95173d_a96fda1e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Updated it to use the logging methods from //platform/api/logging.h - Is this closer to what you had in mind?",
      "parentUuid": "fab407bc_f53c1652",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65f0f90d_540cd442",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Based on these comments, I am assuming you intend for me to do logging using the OSP_LOG_... streams in //platform/api/logging.h\nIf I misunderstood, please clarify what you had in mind so I can fix it :)",
      "parentUuid": "fab407bc_f53c1652",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b1ae3c5_d918d93e",
        "filename": "tools/cddl/logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "2019",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "925d143b_ea850b59",
        "filename": "tools/cddl/logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b1ae3c5_d918d93e",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0462a342_d479dc37",
        "filename": "tools/cddl/logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "I\u0027d prefer using Logger* here, but even with auto it should be auto*.\n\nAlso, it doesn\u0027t seem to actually be in the style guide, but we always put \"// static\" above definitions of static members.  This applies to this variable as well as the static methods above.",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d5b778a_a2888e6b",
        "filename": "tools/cddl/logging.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done. Also, added static above the methods that are also static.",
      "parentUuid": "0462a342_d479dc37",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b1850f8_40cfa9d2",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "2019",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f7e5f0_7ecdf8fc",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b1850f8_40cfa9d2",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67948fce_27ccc4f8",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "style: Unless a different declaration order is required, we prefer public, protected, then private sections.\n\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be8c191e_bcb265ca",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67948fce_27ccc4f8",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4641c4e_96d32220",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "style: Here and below, add trailing \u0027_\u0027 to private variable names.\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names",
      "range": {
        "startLine": 17,
        "startChar": 14,
        "endLine": 17,
        "endChar": 23
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f92cd31f_8373e380",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4641c4e_96d32220",
      "range": {
        "startLine": 17,
        "startChar": 14,
        "endLine": 17,
        "endChar": 23
      },
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94338d9e_26359d58",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "We would probably also need a the same for gcc...  Thinking about this more, I realize that in all our other codebases we do logging with C++ streams.  That would also avoid the need for the MakePrintable conversion, and let us easily define custom printing for things like CddlGroup, CppType, etc. directly.  I think I would prefer that here as well.  If you want a reference, look at //platform/api/logging.h.",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb040319_d1a5b63a",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "A few comments here:\n1) I am actually against defining custom printing for CddlGroup, CppType, etc... in this file. I would sooner keep those sorts of helper methods in their respective files and not introduce the reverse-dependency inside the logger files. It feels weird to have modifications to the CddlGroup/CppType/etc classes affect the logging library (not to mention easy to forget, which could lead to bugs easily) \n2) I\u0027ve updated the code to log using the OSP_LOG_... methods in //platform/api/logging.h for stream logging, which removed the MakePrintable conversion, but it didn\u0027t get right of the #pragma calls or the MakePrintable functions. Is this what you had in mind? (Also, if so, where do they log to? I couldn\u0027t find the output)\n3) Is there an easy way to compile with gcc? I need to see how it fails so I can see what error to suppress",
      "parentUuid": "94338d9e_26359d58",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1696a1f2_9c33ecc0",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-29T17:13:47Z",
      "side": 1,
      "message": "Regarding #3, running gn gen out/Default --args\u003d\"is_gcc\u003dtrue\" will compile locally with gcc.  Or you can create a new output path and put is_gcc\u003dtrue in the args.gn there.\n\nFeel free to drop questions like this into the chat room for a faster response :-)",
      "parentUuid": "cb040319_d1a5b63a",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30ae3fde_2a3d5709",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "const std::string\u0026, but I also think logging to stdout/stderr is better.",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce3d543a_6d369e7d",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30ae3fde_2a3d5709",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61fa2aee_6543ad10",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "const std::string\u0026",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0010c95f_1ced752f",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61fa2aee_6543ad10",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a45ba9_11c58537",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-03-20T20:39:58Z",
      "side": 1,
      "message": "Here and below, you don\u0027t need std::forward for message.",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72a4580c_ff1c1848",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-03-25T19:44:42Z",
      "side": 1,
      "message": "I\u0027m happy to remove this, though lets sync as to why they aren\u0027t needed\n\nMy understanding from the Perfect Forwarding doc was that I should be using std::forward to push the parameters as-is all the way to the dprintf statement - and I\u0027d like to develop a better understanding as to what I\u0027m misunderstanding to fix it for future CLs",
      "parentUuid": "12a45ba9_11c58537",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90919d86_fd505f3c",
        "filename": "tools/cddl/logging.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-03-29T17:13:47Z",
      "side": 1,
      "message": "std::forward is for forwarding template parameters with the correct value type to other functions (so that rvalues get passed as rvalue references and lvalues as lvalue references).\n\nMore details here: https://stackoverflow.com/questions/8526598/how-does-stdforward-work\n\nSince |message| is declared as a const reference, we know the value type up front and we\u0027ll always be passing it as a const ref into WriteLog (there\u0027s no reason to convert it to an rvalue).\n\nAs a rule of thumb std::forward is for passing template arguments to other functions (so that using a moveable type in the template works correctly) and can be ignored otherwise.",
      "parentUuid": "72a4580c_ff1c1848",
      "revId": "9f00cabd96b480c765ebc8414adfe00590ce3959",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}