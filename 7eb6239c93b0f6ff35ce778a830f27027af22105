{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a6944ba0_3b147fa8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:12:38Z",
      "side": 1,
      "message": "Looked over the map class. Will take a look at the rest of the CL after you\u0027ve responded to these",
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf43dc2_d181c77c",
        "filename": "build/toolchain/mac/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-11-24T16:06:01Z",
      "side": 1,
      "message": "This file, and several others seemed to have accidentally been included in this patch (DEPS, BUILD.gn files, fuzzer_test.gni, etc.)",
      "range": {
        "startLine": 138,
        "startChar": 134,
        "endLine": 138,
        "endChar": 149
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81d25b8c_92516262",
        "filename": "build/toolchain/mac/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "It\u0027s a merge thing with deps. I think I can pull it out now.",
      "parentUuid": "abf43dc2_d181c77c",
      "range": {
        "startLine": 138,
        "startChar": 134,
        "endLine": 138,
        "endChar": 149
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "714ca800_d2f604d6",
        "filename": "cast/streaming/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-11-24T16:06:01Z",
      "side": 1,
      "message": "This isn\u0027t a map, even though it\u0027s declaration looks like it is. ðŸ˜Š\n\nIt\u0027s a sorted list of things, with special semantics about when elements are added/removed and their position is important.",
      "range": {
        "startLine": 325,
        "startChar": 2,
        "endLine": 325,
        "endChar": 75
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15b9f23a_e1ac67d2",
        "filename": "cast/streaming/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "Agreed, renamed it to FlatMap after ryan\u0027s comments but open to a new name if you like.",
      "parentUuid": "714ca800_d2f604d6",
      "range": {
        "startLine": 325,
        "startChar": 2,
        "endLine": 325,
        "endChar": 75
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "389fc640_d79dc407",
        "filename": "cast/streaming/receiver.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-25T03:40:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15b9f23a_e1ac67d2",
      "range": {
        "startLine": 325,
        "startChar": 2,
        "endLine": 325,
        "endChar": 75
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f04fbd5f_506e5012",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "This sounds similar to base::flat_map: https://chromium.googlesource.com/chromium/src/+/master/base/containers/flat_map.h\n\nCan we copy their implementation? Or at least rename this class FlatMap for consistency?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 57
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4274d470_dffc7f8a",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-11-24T16:06:01Z",
      "side": 1,
      "message": "Another alternative to consider: Abseil has absl::btree_map, absl::flat_hash_map, etc.; depending on the access patterns and size of keys/values.",
      "parentUuid": "f04fbd5f_506e5012",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 57
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25014eb2_76ebe940",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "We can\u0027t do a direct copy, it\u0027s based on a complicated flat base class. Renamed it.",
      "parentUuid": "f04fbd5f_506e5012",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 57
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce81335e_7b677896",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "explicit dtor because vtable\n\n~MaplikeVector override \u003d default",
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75989a5c_2847ba7d",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-11-24T16:06:01Z",
      "side": 1,
      "message": "Not needed since there aren\u0027t any virtual functions in this class or the parent class.",
      "parentUuid": "ce81335e_7b677896",
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "555d75a7_396a584b",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce81335e_7b677896",
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "873cf188_10875c4d",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "Get(key).value()? Or an approach like below",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 68,
        "endChar": 20
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c2a7ef5_66af953d",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "Decided to remove these.",
      "parentUuid": "873cf188_10875c4d",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 68,
        "endChar": 20
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31db1e6c_9b8b2ad2",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "Can you make this more like map::find? IMHO an iterator would be cleaner and more consistent with other containers\n\n\u003e  return std::find_if(this.begin(), this.end(), [key](const std::pair\u003cKey, Value\u003e\u0026 pair) {\n\u003e    return key \u003d\u003d pair.first;\n\u003e  }",
      "range": {
        "startLine": 73,
        "startChar": 24,
        "endLine": 73,
        "endChar": 27
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31eab911_6085030b",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31db1e6c_9b8b2ad2",
      "range": {
        "startLine": 73,
        "startChar": 24,
        "endLine": 73,
        "endChar": 27
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feab7f57_cc0a2dda",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "erase, for consistency with map\n\nI\u0027d prefer you also add an iterator overload, but up to you",
      "range": {
        "startLine": 84,
        "startChar": 7,
        "endLine": 84,
        "endChar": 13
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99f4fd23_84725fff",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "Sounds good to me. As far as iterator overload goes, this can also just take an iterator.",
      "parentUuid": "feab7f57_cc0a2dda",
      "range": {
        "startLine": 84,
        "startChar": 7,
        "endLine": 84,
        "endChar": 13
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dffa96ef_6ed541bb",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "Remove and use one of the options above. This limits map usage to template types with an empty ctor",
      "range": {
        "startLine": 99,
        "startChar": 2,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd273551_1024eb0d",
        "filename": "util/maplike_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "SGTM. I wrote the new OSP_NOTREACHED patch because of this actually.",
      "parentUuid": "dffa96ef_6ed541bb",
      "range": {
        "startLine": 99,
        "startChar": 2,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3f6d511_7002775b",
        "filename": "util/maplike_vector_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-11-23T23:09:23Z",
      "side": 1,
      "message": "Add a test case for a type with no empty ctor",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0145e94b_e739c29e",
        "filename": "util/maplike_vector_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-11-24T17:52:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3f6d511_7002775b",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "7eb6239c93b0f6ff35ce778a830f27027af22105",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}