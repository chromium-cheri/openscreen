{
  "comments": [
    {
      "key": {
        "uuid": "ea5bdf2f_8caa8d1a",
        "filename": "discovery/public/dns_sd_service_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-13T22:25:59Z",
      "side": 1,
      "message": "Why does a call to DnsSdService::Create need to be wrapped?",
      "range": {
        "startLine": 10,
        "startChar": 30,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "517496d8_ac344ed0",
        "filename": "discovery/public/dns_sd_service_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-13T23:31:44Z",
      "side": 1,
      "message": "This is entirely for DEPS purposes. Now, embedders can entirely avoid calling into or taking dependency on discovery/dnssd at all - see the cast/ DEPS changes in the recent iteration\n\nWDYT?",
      "parentUuid": "ea5bdf2f_8caa8d1a",
      "range": {
        "startLine": 10,
        "startChar": 30,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "112d808d_b239d5bd",
        "filename": "discovery/public/dns_sd_service_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-13T23:49:45Z",
      "side": 1,
      "message": "(I really like the idea of implementation details (like DnsSdService) being a black-box to embedders. Its an entity the can create with a factory, then give to objects that care about it, but they never need to understand more about it than any other forward declaration)",
      "parentUuid": "517496d8_ac344ed0",
      "range": {
        "startLine": 10,
        "startChar": 30,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbb37eea_b2018330",
        "filename": "discovery/public/dns_sd_service_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-16T22:57:52Z",
      "side": 1,
      "message": "They are getting a pointer to DnsSdService either way, which is an interface from their perspective. DEPS do look more straightforward, that\u0027s true.\nWhat do you thing about these options:\n1) moving necessary public interfaces to discovery/public (i.e. moving dnssdservice.h there) ?\n2) removing Create method from DnsSdService and implementing CreateDnsSdService factory method somewhere in discovery/dnssd/impl ? This would avoid any potential confusion as to how DnsSdService should be created.",
      "parentUuid": "112d808d_b239d5bd",
      "range": {
        "startLine": 10,
        "startChar": 30,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af7daf20_56f975d3",
        "filename": "discovery/public/dns_sd_service_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-17T20:28:21Z",
      "side": 1,
      "message": "I\u0027d sooner be in favor of #2 - IMHO that feels a bit cleaner out of the two\n\nUpdated the new iteration to use this approach. WDYT?",
      "parentUuid": "dbb37eea_b2018330",
      "range": {
        "startLine": 10,
        "startChar": 30,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7780a755_d08ec0a6",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2020-03-13T22:25:59Z",
      "side": 1,
      "message": "I thought this type isn\u0027t a template. Could you please give an example of T?",
      "range": {
        "startLine": 36,
        "startChar": 20,
        "endLine": 36,
        "endChar": 39
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3205854_e2432661",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-03-13T23:31:44Z",
      "side": 1,
      "message": "That was a typo - fixed in the recent iteration ðŸ˜Š\nThe template wasn\u0027t actually compiling because it wasn\u0027t referenced anywhere",
      "parentUuid": "7780a755_d08ec0a6",
      "range": {
        "startLine": 36,
        "startChar": 20,
        "endLine": 36,
        "endChar": 39
      },
      "revId": "9d6bf0c80e5539bbdb09a487cb8ef7ec9f228f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}