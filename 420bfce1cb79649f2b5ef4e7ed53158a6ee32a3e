{
  "comments": [
    {
      "key": {
        "uuid": "9388be69_87c78d92",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "You\u0027re declaring a TaskRunnerDeleter operator, but also have a public destructor.\nThe dtor needs to be protected so callers don\u0027t attempt to delete through it.",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2efd709d_875b97bc",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Removed TaskRunnerDeleter as per other comments",
      "parentUuid": "9388be69_87c78d92",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8355f38e_5ba8ff18",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "Why isn\u0027t the thread passed into the NetworkReader ctor?",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "717a7cdf_f9eeb8c4",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "This seems to contradict a lower comment so I\u0027ve left it as is for now. If you still want this passed in the ctor in the newer iteration, I will make that change then. PTAL\n\n(Note that std::thread is move only)",
      "parentUuid": "8355f38e_5ba8ff18",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a76aa7b_eeee23e7",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-29T18:02:42Z",
      "side": 1,
      "message": "I replied elsewhere.",
      "parentUuid": "717a7cdf_f9eeb8c4",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f28a6dc_c72e9bcc",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "This doesn\u0027t appear to collaborate with objects other than |reader|.\nCan this just be done in the dtor implementation (avoiding the need for a Deleter)?",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5e36fb9_8be87dc8",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f28a6dc_c72e9bcc",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "663cd8ed_4ff44041",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "Is it necessary to join with the reader thread?  We want to avoid hangs.\n\nNormally the reader will only be deleted on process shutdown, unless we want to go the direction of dynamically creating/destroying the reader based on the existence and status of platform sockets.  But I that is a bigger design change.",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb5c96f0_2bbed939",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "It\u0027s needed in NetworkReader because otherwise the code crashes at destruction time. The std::thread documentation says that if the thread is destroyed while still joinable, it calls terminate, which calls abort, which returns a platform-dependent unsuccessful termination error code to the host environment. The hang here should be no longer than 50 ms (max duration of WaitAndRead)\n\nIf crashing isn\u0027t a concern, I can remove the thread_-\u003ejoin(). Would you like the same for the TaskRunner?\n\nI really like the idea of dynamically creating/destroying the network reader though, as a replacement for the UdpSocket::LifetimeObserver approach! Do you think this is worth doing at this point (as a follow-up CL) or would you rather I add it to the backlog/add a todo + file a bug?",
      "parentUuid": "663cd8ed_4ff44041",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "886345d4_b8df1880",
        "filename": "platform/impl/network_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-29T18:02:42Z",
      "side": 1,
      "message": "You could empty the task queue, detach the thread and then destroy it.\n\nI still would like to replace the lifetime observer mechanism to manage the NetworkReader.  I\u0027ll add an item to the task sheet.",
      "parentUuid": "cb5c96f0_2bbed939",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caa56794_3a36766c",
        "filename": "platform/impl/network_reader.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "Same comment here.",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae77b409_ea1e9fb5",
        "filename": "platform/impl/network_reader.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Removed Deleter object per comments",
      "parentUuid": "caa56794_3a36766c",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83ce232b_dced7ef5",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-28T21:26:39Z",
      "side": 1,
      "message": "Discussed this in person, but leaving a comment here.\nI\u0027d be in favor of implementing this in the overridden destructor since std::thread is a member of TaskRunnerImpl and not defining a deleter and a typedef for unique_ptr.\n\nEither Create factory method or factory class is fine.",
      "range": {
        "startLine": 25,
        "startChar": 5,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f08640c_c8a3e8f1",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-08-28T22:28:08Z",
      "side": 1,
      "message": "+1. Will wait for next patchset for further CR...",
      "parentUuid": "83ce232b_dced7ef5",
      "range": {
        "startLine": 25,
        "startChar": 5,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de6dabd5_fb4a8b37",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f08640c_c8a3e8f1",
      "range": {
        "startLine": 25,
        "startChar": 5,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "654b03a1_4a55e208",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "Similar comment as for the NetworkReader.  This only calls APIs on the task runner itself, so it seems like this could be implemented in the TaskRunnerImpl dtor.",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93c7553d_d6663ee0",
        "filename": "platform/impl/task_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "654b03a1_4a55e208",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7eb89ce1_291a4a9f",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-28T21:26:39Z",
      "side": 1,
      "message": "Probably shouldn\u0027t be public anymore.",
      "range": {
        "startLine": 51,
        "startChar": 11,
        "endLine": 51,
        "endChar": 25
      },
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95255c12_482830ab",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "This (and the NetworkReader ctor) is currently used for UTs. I could either make this protected and all the current final methods overrides (so I can make a child class to expose the constructor for UTs) or leave this public - what is your preference?",
      "parentUuid": "7eb89ce1_291a4a9f",
      "range": {
        "startLine": 51,
        "startChar": 11,
        "endLine": 51,
        "endChar": 25
      },
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08c7a61d_880af2b4",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-29T18:02:42Z",
      "side": 1,
      "message": "Recommend Create() for normal usage and CreateForTest() for unit tests (making the ctor protected or private).\n\nOr just skip the Create() API, leaving the public tor, and have a public RunWithThread(std::thread\u0026\u0026) method to be called outside of unit tests.  That seems simplest to me.",
      "parentUuid": "95255c12_482830ab",
      "range": {
        "startLine": 51,
        "startChar": 11,
        "endLine": 51,
        "endChar": 25
      },
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3cb9016_a75c0764",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-08-28T17:15:59Z",
      "side": 1,
      "message": "Can you elaborate on this comment?  This is actually the thread that runs tasks?",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e3e200d_2b8a8d44",
        "filename": "platform/impl/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-29T17:48:46Z",
      "side": 1,
      "message": "Comment updated to be more relevant to the new usage, based on discussion in comments",
      "parentUuid": "f3cb9016_a75c0764",
      "revId": "420bfce1cb79649f2b5ef4e7ed53158a6ee32a3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}