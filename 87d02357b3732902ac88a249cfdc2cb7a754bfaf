{
  "comments": [
    {
      "key": {
        "uuid": "b51b78a6_a0fb560e",
        "filename": "platform/README.md",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-05-31T23:56:55Z",
      "side": 1,
      "message": "Usually I think of a platform implementation something like \"posix\" (for BSD and *NIX), \"win32\", maybe \"darwin\" for Mac OS X.\n\nI think we\u0027re already assuming STL at the API layer because the logging API uses std::ostringstream?",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b5ae736_d0f52117",
        "filename": "platform/README.md",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-06-01T17:27:38Z",
      "side": 1,
      "message": "Yeah, I know this is a little strange.  I\u0027m not sure what else to call it as it\u0027s part of our default implementation but actually isn\u0027t platform specific (i.e. only uses STL).  I didn\u0027t want to just put it in api/ though, because it should clearly be replaceable by any other platform implementation.",
      "parentUuid": "b51b78a6_a0fb560e",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba829ec3_8c4a6ef8",
        "filename": "platform/README.md",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-04T20:21:43Z",
      "side": 1,
      "message": "I think I suggested a base/ layer for implementation code that isn\u0027t platform specific.  We can split things up later though, instead of trying to figure everything out up front.",
      "parentUuid": "8b5ae736_d0f52117",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ecef6e0_257ddeef",
        "filename": "platform/api/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-05-31T23:56:55Z",
      "side": 1,
      "message": "Do we expect callers to invoke these directly, or only through the LOG_ macros?\nIf the latter, then these (and the enum) can go in an anonymous namespace.\n\nI don\u0027t feel strongly either way.  It seems fine to expose them in case modules want to define custom logging APIs/macros.",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef16e692_4c47f1b7",
        "filename": "platform/api/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-06-01T17:27:38Z",
      "side": 1,
      "message": "I was expecting use through the macros.  I\u0027m not sure it makes sense to put them in an anonymous namespace in a header file.  In that case they would still be visible to users of the API, though maybe implied as private.  I don\u0027t feel strongly either, but it seems strange to me.",
      "parentUuid": "0ecef6e0_257ddeef",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "727b11cd_cae45e06",
        "filename": "platform/api/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-04T20:21:43Z",
      "side": 1,
      "message": "This seems fine.  We might want to think about controlling visibility for parts of the platform API in the future.",
      "parentUuid": "ef16e692_4c47f1b7",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5a23f9f_57ad943f",
        "filename": "platform/api/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-05-31T23:56:55Z",
      "side": 1,
      "message": "Where are you thinking that the log message go once it\u0027s serialized into stream_?\n\nOne option would be for the embedder API to provide a factory function for a writer object, so this module could get the appropriate output stream for these messages.   \n\nSomething like,\n\nclass LogWriter {\n  public:\n   SetLogLevel(LogLevel level);\n   SetOutputStream(std::basic_ostream out);\n   Write(LogLevel level, std::ostringstream\u0026 message);\n  private:\n   std::basic_ostream out_;\n}",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "136fd8f1_60a9c14d",
        "filename": "platform/api/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-06-01T17:27:38Z",
      "side": 1,
      "message": "On destruction (the end of the statement when used with the LOG_* macros), its contents get passed to the platform API LogWithLevel().  If you saw that and are asking/suggesting something else, then I don\u0027t understand.",
      "parentUuid": "d5a23f9f_57ad943f",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a3ada47_995c3f45",
        "filename": "platform/api/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-04T20:21:43Z",
      "side": 1,
      "message": "I didn\u0027t see the dtor implementation yet when I wrote that comment.  Thanks",
      "parentUuid": "136fd8f1_60a9c14d",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3daeb1a1_e71b7c2e",
        "filename": "platform/stl/logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-05-31T23:56:55Z",
      "side": 1,
      "message": "Maybe this belongs in the api/ layer?  Not sure it\u0027s platform-dependent.",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db5188f5_cfedb564",
        "filename": "platform/stl/logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-06-01T17:27:38Z",
      "side": 1,
      "message": "I could go either way.  Another implementation may not want all caps, for example.  I\u0027ll move it to api/ for now though.",
      "parentUuid": "3daeb1a1_e71b7c2e",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64086f5f_d5cc3da2",
        "filename": "platform/stl/logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-04T20:21:43Z",
      "side": 1,
      "message": "Or maybe there\u0027s a base/ for code that is shared between the api/ layer and the implementations.",
      "parentUuid": "db5188f5_cfedb564",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6f7f4da_e72e6551",
        "filename": "platform/stl/logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-05-31T23:56:55Z",
      "side": 1,
      "message": "Ah, I see, so this is the default implementation of the logging platform API, that logs to stdout.  And if an implementation wanted to direct logging elsewhere, it could write its own implementation?",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d82004_d6e30bf3",
        "filename": "platform/stl/logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2018-06-01T17:27:38Z",
      "side": 1,
      "message": "Yes.  So in Chromium we could, for example, forward this to the base/logging.h API.",
      "parentUuid": "d6f7f4da_e72e6551",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26fc0394_dfa697e6",
        "filename": "platform/stl/logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-06-04T20:21:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d1d82004_d6e30bf3",
      "revId": "87d02357b3732902ac88a249cfdc2cb7a754bfaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}