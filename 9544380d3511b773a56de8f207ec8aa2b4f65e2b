{
  "comments": [
    {
      "key": {
        "uuid": "1e08d626_6c159432",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "Per header file comments, this could be just:\n\n  inline size_t GetCurrentFillCount(size_t write_index, size_t read_index) {\n    return write_index - read_index;\n  }\n\nIf you keep what you have, please simplify the expression: (N + k - M) % k \u003d\u003d (N - M) % k",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9547fca1_a66775d7",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "The simplification actually isn\u0027t correct. Per the C++ spec, if k \u003c 0, n \u003e 0, then k % n \u003c 0 for many compilers (though I agree that the compilers aren\u0027t correct for how number theory defined modulo)\n\nstandard:\n\"the binary % operator yields the remainder from the division of the first expression by the second. If the second operand of / or % is zero the behavior is undefined; otherwise (a/b)*b + a%b is equal to a.\nIf both operands are nonnegative then the remainder is nonnegative; if not, the sign of the remainder is implementation-defined\"\n\nI\u0027ve made the first suggested change in the separate CL. PTAL and compare the 2: https://chromium-review.googlesource.com/c/openscreen/+/1825500",
      "parentUuid": "1e08d626_6c159432",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28132330_2d735ca5",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "nit: Please add newlines before/after each namespace brace.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 20,
        "endChar": 15
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "345452e8_627347c7",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28132330_2d735ca5",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 20,
        "endChar": 15
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ee6af8b_e3f4ba23",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "load(std::memory_order_relaxed), since this is the only method that changes |write_index_| and so the current thread should always be visibly up-to-date w.r.t. the last store().\n\n...and in other places.",
      "range": {
        "startLine": 30,
        "startChar": 50,
        "endLine": 30,
        "endChar": 56
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a2c8db3_b98695ae",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Done. Added to write here and Read on other 2 methods\n\nInteresting - didn\u0027t realize this was an option. I\u0027ll have to read up on it a bit more",
      "parentUuid": "4ee6af8b_e3f4ba23",
      "range": {
        "startLine": 30,
        "startChar": 50,
        "endLine": 30,
        "endChar": 56
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b93ed7af_e0d94fc1",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "load(std::memory_order_acquire)\n\n...and in other places.",
      "range": {
        "startLine": 31,
        "startChar": 48,
        "endLine": 31,
        "endChar": 54
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cd66071_3f125a00",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "FWIW, this isn\u0027t exactly the design we were discussing last week. However, I\u0027m not sure if you should change anything, since we\u0027d be adding a lot more complexity to optimize something that might not need further optimization. We\u0027re not using the TLS socket for high-bandwidth data, after all.\n\nBut, to clarify the design idea of the lockless FIFO: The load of |read_index_| should not occur in every Write() call. Write() should maintain its own snapshot of the read index. Then, when the Write() method thinks the buffer is full, it does a read_index_.load() to see whether the buffer really is full.\n\nThis class would need the following data members:\n\n  // Published indices. These are aligned to a CPU cache line to alleviate memory-order\n  // contention.\n  #define CACHE_LINE_SIZE_BYTES 64\n  alignas(CACHE_LINE_SIZE_BYTES) std::atomic_size_t published_read_index_{0};\n  alignas(CACHE_LINE_SIZE_BYTES) std::atomic_size_t published_write_index_{0};\n\n  // Used by Write() only. When Write() thinks the buffer is full,\n  // it should update this from published_read_index_, to see whether the\n  // buffer really *is* full.\n  size_t snapshot_of_read_index_{0};\n  size_t write_index{0};\n\n  // Used by GetReadableRegion() and Consume() only. When Consume() thinks\n  // the buffer is empty, it should update this from published_write_index_,\n  // to see whether the buffer really *is* empty.\n  size_t read_index{0};\n  size_t snapshot_of_write_index_;",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 55
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7af4e547_5833ebc6",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-24T22:51:57Z",
      "side": 1,
      "message": "I\u0027m against defining cache line sizes and using alignas. This seems unnecessary to me at this point in time. In addition to that, any embedder can implement their own TLS write buffer with optimizations specific to their hardware.\n\nAs for the indices that keep multiplying, I think it might be worth to have internal structs for reader and writer states to keep things together and easy to follow.",
      "parentUuid": "6cd66071_3f125a00",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 55
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7c78936_7ffabfe4",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "I agree that the implementation here is slightly different from what we discussed. When I was implementing it, I was concerned that the extra level of complexity would become a maintenance headache (especially since deterministically testing it would be difficult) while not providing any noticeable benefit\n\nIf you\u0027d like this change, I can make it here. But you mention as well that it might not be worth the additional complexity. Is this a change you\u0027d like or just an FYI?",
      "parentUuid": "7af4e547_5833ebc6",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 55
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "323a6d1a_961f6a90",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b93ed7af_e0d94fc1",
      "range": {
        "startLine": 31,
        "startChar": 48,
        "endLine": 31,
        "endChar": 54
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4393a1f9_c72b98b1",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-24T22:51:57Z",
      "side": 1,
      "message": "Maybe something like bytes_used? Size of the buffer is always kBufferSizeBytes",
      "range": {
        "startLine": 34,
        "startChar": 15,
        "endLine": 34,
        "endChar": 27
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25801fcd_01e80e39",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Done. Good idea.",
      "parentUuid": "4393a1f9_c72b98b1",
      "range": {
        "startLine": 34,
        "startChar": 15,
        "endLine": 34,
        "endChar": 27
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "beb3edbb_57d01153",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "Per header file comments, the -1 would not be necessary and the entire buffer could be used.",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 71
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65826723_59e00d51",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "See separate CL: https://chromium-review.googlesource.com/c/openscreen/+/1825500",
      "parentUuid": "beb3edbb_57d01153",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 71
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4574cd0_3e7b7291",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "store(new_write_index, std::memory_order_release)",
      "range": {
        "startLine": 60,
        "startChar": 15,
        "endLine": 60,
        "endChar": 37
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1a9f9f5_afb74b81",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Done. Updated here and on Consume",
      "parentUuid": "e4574cd0_3e7b7291",
      "range": {
        "startLine": 60,
        "startChar": 15,
        "endLine": 60,
        "endChar": 37
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f0910c3_8e93d6ce",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "This is where, if the buffer looks empty when looking at |snapshot_of_write_index_| versus |read_index_|, we load the published value and try again. Ex:\n\n  if (snapshot_of_write_index_ - read_index_ \u003d\u003d 0) {\n    snapshot_of_write_index_ \u003d published_write_index_.load(std::memory_order_acquire);\n  }\n  return absl::Span\u003cconst uint8_t\u003e(\u0026buffer_[read_index_ % kBufferSizeBytes],\n                                   snapshot_of_write_index_ - read_index_);",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 55
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70e18444_a576d764",
        "filename": "platform/impl/tls_write_buffer.cc",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Pending response on above comment",
      "parentUuid": "0f0910c3_8e93d6ce",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 55
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d47c06_a077aabb",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-09-24T22:39:11Z",
      "side": 1,
      "message": "From the .cc code, it seems the semantics of these variables is that they must always point to valid indices within |buffer_|. Instead, what if you always just incremented them, even letting them wrap-around past SIZE_T_MAX eventually? Then, the math gets a lot simpler throughout and you can use the entire buffer (not just all but one byte).",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 63,
        "endChar": 37
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b0b76ce_2d7a653c",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-09-24T22:51:57Z",
      "side": 1,
      "message": "Could you please add a comment that atomics here are primarily to guarantee atomic reads and writes on all platforms (including those that might not have atomic uint64_t reads and writes supported by hardware)? I.e. if we were certain that we are always running on x64, atomics wouldn\u0027t be necessary here.",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 63,
        "endChar": 37
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f4564ad_60418abb",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Max had the same suggestion, actually. After coding it, this actually ends up more complex (because we need to check for end-of-array in 2 of the 3 methods)\n\nI\u0027ve uploaded parallel CL here so that you two can compare the two options and let me know your preference - I\u0027ll go with whichever you two think is right: https://chromium-review.googlesource.com/c/openscreen/+/1825500",
      "parentUuid": "48d47c06_a077aabb",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 63,
        "endChar": 37
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11b7d385_bad43800",
        "filename": "platform/impl/tls_write_buffer.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-09-25T17:32:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b0b76ce_2d7a653c",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 63,
        "endChar": 37
      },
      "revId": "9544380d3511b773a56de8f207ec8aa2b4f65e2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}