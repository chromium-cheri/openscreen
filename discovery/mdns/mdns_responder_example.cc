// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <string>

#include "discovery/mdns/mdns_responder_adapter.h"

namespace openscreen {
namespace {

// Example response for _googlecast._tcp.  Contains PTR, SRV, and TXT records.
uint8_t data[] = {
    0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00,
    0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x63, 0x61, 0x73, 0x74,
    0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00,
    0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x34, 0x31, 0x43,
    0x68, 0x72, 0x6f, 0x6d, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x55, 0x6c,
    0x74, 0x72, 0x61, 0x2d, 0x32, 0x61, 0x35, 0x38, 0x63, 0x30, 0x34, 0x61,
    0x31, 0x33, 0x63, 0x32, 0x37, 0x32, 0x66, 0x61, 0x32, 0x32, 0x35, 0x33,
    0x61, 0x35, 0x33, 0x31, 0x31, 0x36, 0x61, 0x35, 0x30, 0x33, 0x37, 0x64,
    0xc0, 0x0c, 0xc0, 0x2e, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94,
    0x00, 0x9d, 0x23, 0x69, 0x64, 0x3d, 0x32, 0x61, 0x35, 0x38, 0x63, 0x30,
    0x34, 0x61, 0x31, 0x33, 0x63, 0x32, 0x37, 0x32, 0x66, 0x61, 0x32, 0x32,
    0x35, 0x33, 0x61, 0x35, 0x33, 0x31, 0x31, 0x36, 0x61, 0x35, 0x30, 0x33,
    0x37, 0x64, 0x13, 0x72, 0x6d, 0x3d, 0x30, 0x46, 0x38, 0x41, 0x34, 0x37,
    0x39, 0x45, 0x36, 0x30, 0x35, 0x42, 0x35, 0x45, 0x39, 0x45, 0x05, 0x76,
    0x65, 0x3d, 0x30, 0x35, 0x13, 0x6d, 0x64, 0x3d, 0x43, 0x68, 0x72, 0x6f,
    0x6d, 0x65, 0x63, 0x61, 0x73, 0x74, 0x20, 0x55, 0x6c, 0x74, 0x72, 0x61,
    0x12, 0x69, 0x63, 0x3d, 0x2f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x2f, 0x69,
    0x63, 0x6f, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x16, 0x66, 0x6e, 0x3d, 0x43,
    0x68, 0x72, 0x6f, 0x6d, 0x65, 0x63, 0x61, 0x73, 0x74, 0x55, 0x6c, 0x74,
    0x72, 0x61, 0x34, 0x33, 0x36, 0x32, 0x07, 0x63, 0x61, 0x3d, 0x34, 0x31,
    0x30, 0x31, 0x04, 0x73, 0x74, 0x3d, 0x30, 0x0f, 0x62, 0x73, 0x3d, 0x46,
    0x41, 0x38, 0x46, 0x43, 0x41, 0x33, 0x46, 0x32, 0x39, 0x36, 0x39, 0x03,
    0x72, 0x73, 0x3d, 0xc0, 0x2e, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x49, 0x24, 0x32, 0x61,
    0x35, 0x38, 0x63, 0x30, 0x34, 0x61, 0x2d, 0x31, 0x33, 0x63, 0x32, 0x2d,
    0x37, 0x32, 0x66, 0x61, 0x2d, 0x32, 0x32, 0x35, 0x33, 0x2d, 0x61, 0x35,
    0x33, 0x31, 0x31, 0x36, 0x61, 0x35, 0x30, 0x33, 0x37, 0x64, 0xc0, 0x1d,
    0xc1, 0x1d, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04,
    0xac, 0x11, 0x20, 0x99,
};

void BrowseDemo(const std::string& service_type) {
  mdns::MdnsResponderAdapter mdns_adapter;
  (&mdns_adapter)->Init();
  (&mdns_adapter)->StartBrowse(service_type);
  (&mdns_adapter)
      ->OnDataReceived({{192, 168, 0, 2}, 12345}, {{224, 0, 0, 251}, 5353},
                       data, sizeof(data), 0);
  (&mdns_adapter)->Execute();
  (&mdns_adapter)->StopBrowse(service_type);
  (&mdns_adapter)->Close();
}

}  // namespace
}  // namespace openscreen

int main(int argc, char** argv) {
  std::string service_type("_openscreen._udp");
  if (argc >= 2) {
    service_type = argv[1];
  }

  openscreen::BrowseDemo(service_type);

  return 0;
}
