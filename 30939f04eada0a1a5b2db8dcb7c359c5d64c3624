{
  "comments": [
    {
      "key": {
        "uuid": "a356df2c_8fecfc83",
        "filename": "api/impl/presentation/presentation_common.h",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Nit: prefer newline after namespace decls.  Comment applies throughout patch",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "debd89ec_5b92107d",
        "filename": "api/impl/presentation/presentation_common.h",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Sounds good. Only found three instances with (namespace [a-zA-Z]* *\\{)\\n[^{\\n]+\\n, so fixed them all (I think they are all from this patch...)",
      "parentUuid": "a356df2c_8fecfc83",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ce5cc23_89a654e0",
        "filename": "api/impl/presentation/presentation_common.h",
        "patchSetId": 9
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "I wonder if this can be a method on ProtocolConnection.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e4c37e0_7cd2a188",
        "filename": "api/impl/presentation/presentation_common.h",
        "patchSetId": 9
      },
      "lineNbr": 21,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Yeah, it can be--just has to be in the header. Moving to that... lmk what you think!",
      "parentUuid": "6ce5cc23_89a654e0",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f1501eb_c9eb7d5c",
        "filename": "api/impl/presentation/presentation_common.h",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Can you document these methods?  In particular:\n- Does this always return a new ProtocolConnection object?\n- What is the lifetime of the demuxer objects returned?",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f98d2d72_c2a4ba0f",
        "filename": "api/impl/presentation/presentation_common.h",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Yeah, documented.",
      "parentUuid": "4f1501eb_c9eb7d5c",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e2585e7_93881f53",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "This could be a meta-TODO :-)\n\nTODO(issue/27): Address TODOs in this file",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58415b03_2c6436d0",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "1e2585e7_93881f53",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5935e072_2d98b891",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "You can drop presentation:: here and below?",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bf434a2_ced6694c",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Good catch--missed this due to moving around namespaces.",
      "parentUuid": "5935e072_2d98b891",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "958cf994_cbedd02f",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "FIX LATER: Maybe the CDDL code generator could write a lookup table that maps the message type to function pointers to the encode/decode functions, so there could be a generic code path to write a message to a buffer?  Good to chat with btolsch@ about this.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1f7bb3_d3d04fd1",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Adding TODO(jophba) items for all FIX laters.",
      "parentUuid": "958cf994_cbedd02f",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfd06b92_6732d2b8",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "FIX LATER:  Start base/stl_util.h with helper functions like these - I strongly suspect this will not be the first time we need this.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f42d9690_7ef8365b",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 60,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Might as well do this now, I think. Changed.\n\nNOTE: named it std_util.h, because otherwise it collides with base/std_util.h in chromium_quic.",
      "parentUuid": "bfd06b92_6732d2b8",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f886ff9_d60b9a32",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Can you check that Connections are move-only (DISALLOW_COPY_AND_ASSIGN)?",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e053a4e9_063d19bf",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Yes, I added this to be the bottom of the class definition.",
      "parentUuid": "8f886ff9_d60b9a32",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b08a4812_7db620a9",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 138,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Does this make a copy of the |message| contents, or does cbor_message.message take ownership?",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991d6daf_76c39e86",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 138,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "My understanding is that this \"new\" syntax means that the cbor_messasge.message.str is a fixed place in memory that we have access to, so we have to do a copy.",
      "parentUuid": "b08a4812_7db620a9",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dea29938_befc7ed2",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "FIX LATER: Ideally the messaging APIs could be optimized to be zero copy by passing by rvalue ref here and moving the contents into message.bytes.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a65b2237_89f33c72",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "I think that\u0027s doable. There was some back and forth with Peter on this, I\u0027ll switch to an rvalue ref for now.",
      "parentUuid": "dea29938_befc7ed2",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "116ef6dc_340d9230",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 177,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Is a ProtocolConnection one-way or duplex?  I believe the underlying QUIC stream is duplex, so it would be most straightforward to match its semantics.  \n\nFIX LATER: I wonder if we can simplify this to send on protocol_connection_.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "174db489_7e69edee",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 177,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "I believe ProtocolConnection is one way, and sending a message implies directionality. Changing this to use protocol_connection_ results in a test failure.\n\nI\u0027m happy to take an IOU:\n\n[:../../api/impl/presentation/presentation_connection.cc:161] OSP_CHECK(false) failed: Controller implementation hasn\u0027t landed",
      "parentUuid": "116ef6dc_340d9230",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6d17cb_0bd8dbfc",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 226,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "This may no longer be necessary since miu@ landed a patch to allow the compiler to \"see\" that arguemnts used in DCHECK\u0027s are used, while still eliminating the associating code generation when DHCECKs are off.\n\nSame comment applies below.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3acbc34b_6c6fcdfa",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 226,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "1a6d17cb_0bd8dbfc",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b99c489e_6be36c6b",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 256,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "FIX LATER: I think the RegisterWatch/OnStreamMessage API could use some refinement.  In particular I think there should be a layer between the code that needs to run logic on the messages and the layer that parses and dispatches the messages.  The code in this class shouldn\u0027t have to deal with encoding/decoding CBOR and byte buffers, only valid parsed message objects.\n\nIn addition, a utility object to handle tracking requests and responses would be good.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db6717da_b0014dad",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 256,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "IOU\u0027ed.",
      "parentUuid": "b99c489e_6be36c6b",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ae860d9_ab2c26cf",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Is the break; necessary?  The case statement has a top level return.\nSame comment applies below.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d24a8891_0a752a4f",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "No. Removing. I think these should just be separate methods, probably.",
      "parentUuid": "8ae860d9_ab2c26cf",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f701c37_bd630120",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 328,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "FIX LATER: The existence of this message in the OSP spec is actually a spec bug IMO, as the controller is explicitly not supposed to wait for acknowledgement that the connection is closed.  \n\nFiled https://github.com/webscreens/openscreenprotocol/issues/138",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a56fded_be887728",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 328,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "I\u0027ll nuke this message type and make the PR smaller ;).",
      "parentUuid": "8f701c37_bd630120",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3489008a_9a6ed0a5",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 369,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-14T19:54:25Z",
      "side": 1,
      "message": "Presumably connection-\u003eOnClosedByRemote() and passing error as the reason?\nOr adding OnClosedByError().",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b9952dd_51609f73",
        "filename": "api/impl/presentation/presentation_connection.cc",
        "patchSetId": 9
      },
      "lineNbr": 369,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-02-15T01:41:10Z",
      "side": 1,
      "message": "The hard part is getting the connection without a valid presentation ID (it\u0027s supposed to come in the message).\n\nI\u0027ll leave the TODO for now, I\u0027m happy to dig some more if we want it in this patch.",
      "parentUuid": "3489008a_9a6ed0a5",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df0d634c_c430b11a",
        "filename": "api/impl/presentation/presentation_receiver_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-15T19:50:39Z",
      "side": 1,
      "message": "Please use the Invoke() pattern if possible to test move parameters, instead of using trampoline methods.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d677b4f_71d006e7",
        "filename": "api/impl/presentation/presentation_receiver_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-15T19:50:39Z",
      "side": 1,
      "message": "Same comment here",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0a5da6a_a5c94e3e",
        "filename": "api/impl/presentation/presentation_receiver_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 136,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-15T19:50:39Z",
      "side": 1,
      "message": "Bikeshed: I would consider aggregate initialization here, but I don\u0027t feel strongly about it.  You would probably want to add /* member */ comments inline to make it clear what each parameter was for, so it might not save much typing.\n\nhttps://en.cppreference.com/w/cpp/language/aggregate_initialization",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42f69f75_002b3958",
        "filename": "api/public/presentation/presentation_connection.h",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-02-15T19:50:39Z",
      "side": 1,
      "message": "I don\u0027t think all of these are used on the wire, so it might not make sense to use one enum type for the API and the wire format.  I would be OK deleting this TODO.",
      "revId": "30939f04eada0a1a5b2db8dcb7c359c5d64c3624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}