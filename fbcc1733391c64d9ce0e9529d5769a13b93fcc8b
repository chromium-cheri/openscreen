{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a4d1ec23_c8b3cd8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2024-04-10T18:06:05Z",
      "side": 1,
      "message": "Hi Mark. Sorry for piling all of these CL\u0027s onto you. If there is a better reviewer, feel free to remove yourself from the reviewer list.\n\nThis change _looks_ pretty big, but most of the changed lines are due to indentation changes. If you disable whitespace differences, the changes are more clear.",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0042cb39_5305075b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2024-04-10T19:14:53Z",
      "side": 1,
      "message": "At first glance this looks like a good solution to lower code duplication, however it places an unexpected dependency on the standalone binaries, which are intended to essentially be demo applications.\n\nI would likely prefer a new test receiver to be written in Chrome, heavily based on the standlone reciever implementation. That has its own problems around maintanence however.",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32992235_ddb8b5cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-18T01:21:45Z",
      "side": 1,
      "message": "Re-add me when you\u0027d like me to take a look.",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc4fa379_cbf7570d",
        "filename": "cast/standalone_receiver/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-10T18:45:59Z",
      "side": 1,
      "message": "This CL exposes a lot of internal code in the library to Chromium builds which will make it significantly harder to maintain.  I would like to see if there is a way we could provide something upstream that meets your needs without exposing a lot of internal library source to Chromium.\n\nWould like to hear Jordan\u0027s thoughts as well.",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8f729d4_3d1d43ba",
        "filename": "cast/standalone_receiver/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-10T18:47:23Z",
      "side": 1,
      "message": "Above, I meant \"downstream\", i.e. in Chromium.",
      "parentUuid": "bc4fa379_cbf7570d",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dfd0aec_2770fc78",
        "filename": "cast/standalone_receiver/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2024-04-10T19:14:53Z",
      "side": 1,
      "message": "The question for me is how much of the internal code will actually be consumed in chrome, versus the resulting binary being consumed.\n\nI would be more okay with this if there weren\u0027t public headers that can be consumed in Chrome, and the resulting binary is just used. In that case the arguments to the binary are relatively stable.\n\nThe other option is just simply copying the standalone implementation as a test receiver in Chrome -- which has its own implementation challenges.",
      "parentUuid": "b8f729d4_3d1d43ba",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b0511af_e1d5963b",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-10T18:45:59Z",
      "side": 1,
      "message": "As the name implies the standalone platform implementation is something that we don\u0027t support building and linking with any upstream code.  There is already a platform implementation in Chromium in //components/openscreen_platform which is supported.",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55d25021_5db3cb42",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-10T18:47:23Z",
      "side": 1,
      "message": "Above, I meant \"downstream\", i.e. in Chromium.",
      "parentUuid": "2b0511af_e1d5963b",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3208efe_d2627c07",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2024-04-10T19:14:53Z",
      "side": 1,
      "message": "I also have concerns around linking the standalone platform implementation.",
      "parentUuid": "55d25021_5db3cb42",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d4fc015_4e333013",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2024-04-11T16:53:37Z",
      "side": 1,
      "message": "As per our conversation yesterday, I\u0027m taking a look at that changing the build files to depend on the Chromium implementation when building from Chromium. Thanks for the pointer.",
      "parentUuid": "55d25021_5db3cb42",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07d7dc5_49a1c64c",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2024-04-17T20:02:00Z",
      "side": 1,
      "message": "Sounds great.",
      "parentUuid": "5d4fc015_4e333013",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dbaafb0_62278161",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2024-04-25T15:14:43Z",
      "side": 1,
      "message": "I got a chance to start investigating using Chrome\u0027s platform implementation instead of the standalone platform.\n\nI see the following missing dependencies:\n\n1. `openscreen::TextTraceLoggingPlatform::TextTraceLoggingPlatform()`\n    * There is an implementation of TraceLoggingPlatform in Chrome: [EventTraceLoggingPlatform](https://source.chromium.org/chromium/chromium/src/+/main:components/openscreen_platform/event_trace_logging_platform.h;l\u003d21;drc\u003dfd70da71d14f787cecd7767745f8f1243cb58ea9). We could just redirect the standalone binary to use this when building with Chrome.\n2. `openscreen::SetLogLevel()`\n    * This function is missing in Chrome\u0027s openscreen platform [logging.c](https://source.chromium.org/chromium/chromium/src/+/main:components/openscreen_platform/logging.cc;drc\u003d8310f0f31bc693b9ba0cb1b10ff91c6d276b67e7). We can implement it using [::logging::SetMinLogLevel()](https://source.chromium.org/chromium/chromium/src/+/main:components/openscreen_platform/logging.cc;drc\u003d8310f0f31bc693b9ba0cb1b10ff91c6d276b67e7).\n3. `openscreen::GetNetworkInterfaces()`\n    * This API is not implemented in Chrome\u0027s platform implementation.\n4. `openscreen::TaskRunnerImpl::TaskRunnerImpl()`, `openscreen::TaskRunnerImpl::RunUntilSignaled()`, `openscreen::TaskRunnerImpl::RunUntilStopped()`, and `openscreen::TaskRunnerImpl::RequestStopSoon()`\n    * There is a [TaskRunnerImpl](https://source.chromium.org/chromium/chromium/src/+/main:components/openscreen_platform/task_runner.h;l\u003d15;drc\u003de672a665ffa8fe4901184f03922e2cc548399da5) in the Chrome\u0027s platform implementation, but it is missing some definitions and the ctor is different for Chrome. \n5. \n`openscreen::PlatformClientPosix::Create()` and\n`openscreen::PlatformClientPosix::ShutDown()`\n    * This is not in the platform API. I haven\u0027t looked closely to see what it is providing.\n\nIf you have any insights about how to handle these, LMK! Thanks.",
      "parentUuid": "c07d7dc5_49a1c64c",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3acfa480_e7757fb8",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-26T00:19:09Z",
      "side": 1,
      "message": "\u003e openscreen::TextTraceLoggingPlatform::TextTraceLoggingPlatform()\n\u003e \nMake sure you are linking with both :openscreen_platform and :openscreen_platform_without_sockets like is done here:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:components/cast_streaming/test/BUILD.gn;drc\u003d821de11ab399e78d0b8d4894ec07fe6d306cd896;l\u003d12\n\nThe targets here are complicated for reasons I can\u0027t even begin to explain.\n\n\u003e openscreen::SetLogLevel()\n\u003e openscreen::GetNetworkInterfaces()\n\nThese need to be implemented in Chromium.  If you can send a CL for this it would be great.\n\n\u003e openscreen::TaskRunnerImpl::TaskRunnerImpl(), etc.\n\nThis needs to be fixed in the library.  It is using private interfaces for the library\u0027s task runner that are not available to Chromium.\n\n\u003e openscreen::PlatformClientPosix::Create() and\n\u003e openscreen::PlatformClientPosix::ShutDown()\n\nThis is initializing some singletons in private library code, like a networking thread.  This also needs to be fixed in the library.  I can work on this along with the task runner issues.",
      "parentUuid": "2dbaafb0_62278161",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21d9dd5a_ac890301",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2024-04-26T01:23:02Z",
      "side": 1,
      "message": "\u003e Make sure you are linking with both :openscreen_platform and :openscreen_platform_without_sockets \n\nAh. Thanks for the pointer! I was not linking openscreen_platform_without_sockets.\n\n\u003e These need to be implemented in Chromium. If you can send a CL for this it would be great.\n\nSGTM. I\u0027ll do that.\n\n\u003e I can work on this along with the task runner issues.\n\n👍 Thanks.",
      "parentUuid": "3acfa480_e7757fb8",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55de9104_893c77ba",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-26T18:10:49Z",
      "side": 1,
      "message": "I took a look at this.  Most of the issues with the task runner and PlatformClientPosix look like they come from the main.cc of the standalone receiver.  I don\u0027t think it makes sense to fix the library\u0027s main.cc to run when linked with Chromium, but instead to write a new main.cc in Chromium that:\n\n1. Initializes the Chromium openscreen platform as needed (network service, etc.)\n2. Parses the commandline using Chromium\u0027s command line API to configure the receiver however you want\n3. Creates the receiver object and starts it (CastReceiver)\n3. Handles the strategy for terminating the receiver process.  Right now it waits for SIGINT, i.e. someone hitting Ctrl-C from the keyboard.  How do you want to shut down the receiver in your tests?\n\nI can work to factor out remaining code from the main.cc so that it will be easy to initialize and terminate the receiver from the new main.cc in Chromium.\n\nWDYT?",
      "parentUuid": "21d9dd5a_ac890301",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eba6ef90_189c5b27",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2024-04-26T18:11:39Z",
      "side": 1,
      "message": "Sorry s/CastReceiver/CastService/ above",
      "parentUuid": "55de9104_893c77ba",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3ebc5f_14a80dcf",
        "filename": "platform/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1498402
      },
      "writtenOn": "2024-04-26T19:37:40Z",
      "side": 1,
      "message": "I think adding a Chrome-specific main.cc is fine. It would also let the cast receiver use the Chrome `TraceLoggingPlatform()`.\n\nSending SIGINT is fine. The ChromeOS test framework handles that.\n\nI\u0027ll keep working on the missing prerequisites in the Chrome platform implementation. If you want me to pick up work on the Chrome-specific main.cc, LMK.",
      "parentUuid": "eba6ef90_189c5b27",
      "revId": "fbcc1733391c64d9ce0e9529d5769a13b93fcc8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}