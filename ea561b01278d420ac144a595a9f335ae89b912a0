{
  "comments": [
    {
      "key": {
        "uuid": "8dafce19_0693f8fa",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Consider breaking up into multiple lines. Bit math is always super annoying, so more explicit steps could be helpful. Logic looks right though.\n\nbegin \u003d 1, end \u003d 4\n\n0b1 \u003c\u003c (3) \u003d 0b1000\n0b1000 - 1 \u003d 0b111\n0b111 \u003c\u003c 1 \u003d 0b1110\n\nbegin \u003d 0, end \u003d 4\n\n0b1 \u003c\u003c (4) \u003d 0b10000\n0b10000 - 1 \u003d 0b1111\n0b1111 \u003c\u003c 0 \u003d 0b1111",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4632c31_8ef55440",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8dafce19_0693f8fa",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac4c413e_0ec01d06",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Do we still prefer trivial default values in the class definition header, or do we want it here?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da56db2b_04127640",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "The style guide doesn\u0027t dictate a preference, IIRC.\n\nI took another look at this, and decided to do all in the .cc file because the initialization is different between each of the three ctors.",
      "parentUuid": "ac4c413e_0ec01d06",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3036099b_f0bb2c15",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "I think it would be nicer to have this implemented directly, but I don\u0027t feel strongly about this one.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 26,
        "endChar": 0
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95dc644f_317ddbc3",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "You mean, duplicate Resize()\u0027s impl into here?",
      "parentUuid": "3036099b_f0bb2c15",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 26,
        "endChar": 0
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28997402_e8b39518",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "is setting size_ necessary, or is it covered by the *this operator?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7a9b53b_27cc8d82",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "I meant to redo this move ctor (most of operator\u003d() is superfluous).",
      "parentUuid": "28997402_e8b39518",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3709b5a4_441d2f9b",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Consider doing it anyway, since if someone messes it up a nullptr access is probably more obvious?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "551e2666_4773a894",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3709b5a4_441d2f9b",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc437394_ae2acdec",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "Could you please add a comment that you leave bits in the last integer outside the range unset so that shifts and find work?",
      "range": {
        "startLine": 92,
        "startChar": 2,
        "endLine": 104,
        "endChar": 3
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deda248e_e9c62531",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc437394_ae2acdec",
      "range": {
        "startLine": 92,
        "startChar": 2,
        "endLine": 104,
        "endChar": 3
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6eef633_317a86a6",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Nit: consider auto i",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c56da190_a13c5a2b",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "\"auto\" is mainly a readability aid (when not doing template-y things). IMHO, the actual type \"int\" is much more readable than \"auto\" here.",
      "parentUuid": "e6eef633_317a86a6",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b1981d_a2320236",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "Even though it\u0027s a constexpr, I still suggest moving this out of the loop.",
      "range": {
        "startLine": 141,
        "startChar": 30,
        "endLine": 141,
        "endChar": 51
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93f96098_ac197733",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44b1981d_a2320236",
      "range": {
        "startLine": 141,
        "startChar": 30,
        "endLine": 141,
        "endChar": 51
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cadf675f_e40c58bf",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "It\u0027s probably cheaper to always shift, than it is to branch",
      "range": {
        "startLine": 147,
        "startChar": 4,
        "endLine": 151,
        "endChar": 5
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d511ea7_9f4796fa",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "I would agree, except that it\u0027s undefined behavior when |steps| is greater than 64. Also, if |steps| happens to be more than 255, the code Clang (and GCC) generate will break, because they both:\n\n  mov cl, steps\n  shr rax, cl\n\nRe-thinking this, I noticed that I can simply place a restriction on the |steps| argument to this method (and use a DCHECK to enforce it). Then, I can remove branching from two places; for a more-efficient impl. LGTY now? :)",
      "parentUuid": "cadf675f_e40c58bf",
      "range": {
        "startLine": 147,
        "startChar": 4,
        "endLine": 151,
        "endChar": 5
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a763fab9_2e11a5fd",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "Maybe like this?\n\nconst uint64_t* const last \u003d \u0026bits_.as_array[array_size()];\nfor (const uint64_t* p \u003d bits_.as_array; p \u003c last; ++p) {\n  if (*p !\u003d 0) {\n    return ((p - bits_.as_array) * kBitsPerInteger) + CountTrailingZeros(*p);\n  }\n}\nreturn size_;",
      "range": {
        "startLine": 184,
        "startChar": 4,
        "endLine": 193,
        "endChar": 5
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c80b1898_a76c56f2",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "Ah, yes! I think I had it this weird way back from an earlier iteration of the impl. Your way is much simpler. Also, I noticed this is just doing a normal linear scan now, so I can use integer indices instead of pointers to make the code cleaner (the compiler will optimize back to pointers).",
      "parentUuid": "a763fab9_2e11a5fd",
      "range": {
        "startLine": 184,
        "startChar": 4,
        "endLine": 193,
        "endChar": 5
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9533c675_4af9cea3",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Do we have any build bots that would test this code? My guess is that it\u0027s completely untested until we ship on Windows?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f956ded0_fdfb8830",
        "filename": "util/yet_another_bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "I had manually commented-out the preprocessor stuff to check that it compiles and passes all unit tests. We\u0027re all good here! :)\n\nNote: This won\u0027t be used on Windows, either, unless you\u0027re talking about non-Chromium Windows builds. (Chromium uses Clang for its Windows builds.)",
      "parentUuid": "9533c675_4af9cea3",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aad618c1_a1e12222",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "If it\u0027s not resizable, to match the STL why not YetAnotherBitArray, not YetAnotherBitVector?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e60ff270_437f74c5",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "It\u0027s resizable, just that I don\u0027t provide a push_back() impl. \"Array\" sounded more like \"fixed size\" to me than \"Vector.\"",
      "parentUuid": "aad618c1_a1e12222",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "360490f5_e32142d6",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "So, Fill is an enum where SET \u003d true, CLEARED \u003d false. Given that this is explicitly a bit array, why not just (int size, bool initial_value)?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "135d8d1b_4e29878c",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "At the call site, a reader would have to ask, \"what is this bool argument for?\" By making it an enum, we\u0027re providing a named constant that says it all.",
      "parentUuid": "360490f5_e32142d6",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a127dca_90b375d4",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "Could you please explicitly delete copy constructor and copy-assignment operator?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 62
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "983a4ad4_9ccffa19",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "OOC, why? I\u0027ve seen that done in a few places in OpenScreen code, but meant to ask the team why they are doing this?",
      "parentUuid": "2a127dca_90b375d4",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 62
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f2d795f_7195beb7",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Why int over size_t?",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e8cdbb1_b8382376",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Google C++ style highly recommends signed ints over unsigned. Since I\u0027m not interfacing with any library that wants a size_t, I can go with their recommendation and do not need excessive signed-to-unsigned type casting everywhere.\n\nGenerally, size_t shouldn\u0027t be used unless it simplifies interfacing with system libraries. It\u0027s a dark stain on the C++ language. ;)",
      "parentUuid": "0f2d795f_7195beb7",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "374b45e9_22272221",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Nit: Prefer clear over unset.",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e19144_fe76d6b0",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "374b45e9_22272221",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efb7497f_3cc42100",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-07-15T23:58:18Z",
      "side": 1,
      "message": "Maybe also accept Fill for consistency?",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 29
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c23a826_9ad3e18d",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T02:11:25Z",
      "side": 1,
      "message": "I didn\u0027t need that, so I didn\u0027t write the extra code. If anyone ever needs it, they can add it. :)",
      "parentUuid": "efb7497f_3cc42100",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 29
      },
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d7d4efe_45e77633",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "This works due to integer math always truncating with no rounding, right? I would probably prefer a comment here, although your math is def right.\n\nsize \u003d 64\nkBitsPerInteger \u003d 32\n\n95 / 32 \u003d 2\n\nsize \u003d 63\n\n94 / 32 \u003d 2\n\nsize \u003d 65\n\n96 / 32 \u003d 3",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd8beaa9_dc1afe98",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Added comment.\n\nAs a TODO, I plan on a clean-up CL to factor-out this math expression as a helper function in our new util/ directory. I\u0027ve used this like 4-5 times in the streaming code, and don\u0027t want to keep having to add comments, etc. everywhere about it. :)",
      "parentUuid": "1d7d4efe_45e77633",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67448e82_328a66fb",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Probably overkill, but consider splitting the integer and array implementations into two subclasses, since there is very little duplicate logic for most of the methods--you basically have two separate implementations of like 75% or more of the code.",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd56003_aa9000b6",
        "filename": "util/yet_another_bit_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "I had considered this, but I decided not to go that route. There would still be all the \"switching\" if-statements to call into one class or the other. (Assumption: We don\u0027t want the overhead of virtual methods for this \"hot path\" code.)",
      "parentUuid": "67448e82_328a66fb",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b572aec6_0b6b7f9c",
        "filename": "util/yet_another_bit_vector_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Probably premature optimization, but consider just finding the indices of the first and last primes and using absl\u0027s span:\n\nhttps://github.com/abseil/abseil-cpp/blob/master/absl/types/span.h\n\nAvoiding unnecessary copies and exponential resizes.",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3feae05_694c4010",
        "filename": "util/yet_another_bit_vector_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b572aec6_0b6b7f9c",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7523b4d8_110fa204",
        "filename": "util/yet_another_bit_vector_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2019-07-15T20:19:32Z",
      "side": 1,
      "message": "Why 8 here? Number of bits in a byte, or because pattern is always 8 bits? Probably good to extract a constant, so it\u0027s less likely to get messed up later. Or something like:\n\n    sizeof(pattern) * CHAR_BIT",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba09cb60_002140ef",
        "filename": "util/yet_another_bit_vector_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2019-07-16T01:17:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7523b4d8_110fa204",
      "revId": "ea561b01278d420ac144a595a9f335ae89b912a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}