{
  "comments": [
    {
      "key": {
        "uuid": "063bbdb1_c02931fa",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "It seems like a potential security issue when passing invalid data here, as the mDNS serialization code could easily allocate fixed length buffers.  yakimakha@, do you think these should be OSP_CHECK?",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a3199d_482282fe",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-23T21:38:37Z",
      "side": 1,
      "message": "I think DCHECK is fine. It will check that our code never passes anything invalid to the constructor, and anything that comes over the network should be verified by the parser before passing down to the constructor. If we put OSP_CHECK here and validate in the parser, we will always do double validation.",
      "parentUuid": "063bbdb1_c02931fa",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "590e51c9_2bcb6abd",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Closing comment as Max suggests no change is needed",
      "parentUuid": "12a3199d_482282fe",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c94d570_ee953592",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "How is this possible?  No new IP address type is coming out in the forseeable future.\n\nI\u0027m annoyed if we have to check this fallthrough case every time we use an IPEndpoint.address.\n\nI wonder if we should remove the version enum and just use IsV6() to determine the type of the address.",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d68b7f04_15300965",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T20:00:52Z",
      "side": 1,
      "message": "Note that any changes to this API should be done separately, as IPEndpoint is part of the public platform API.  So no changes requested here, but interested to hear thoughts.",
      "parentUuid": "4c94d570_ee953592",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5591f9e0_67793fcb",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "Can you use a delegated constructor to remove the duplicated DCHECKs?",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c7304e0_56413c24",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5591f9e0_67793fcb",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d4ca10f_34e59c7a",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "The API expects a V4 and a V6 address, but they can be passed in either order.  That just seems odd.  Is it that difficult to require the caller to pass them as endpoint_v4 and endpoint_v6?",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a8c4e8_4c0ce060",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d4ca10f_34e59c7a",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28b32a2e_908c3b8e",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "1: For consistency, write 0 as 0x0.\n2: It would be nice to write a comment with the characters for for 0x1F and 0x7F.",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91c8f290_a5c565d9",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28b32a2e_908c3b8e",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1760d625_c65e2342",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "This should be done.  Boringssl has UTF8_getc defined in crypto/asn1/asn1_locl.h.  Would it be possible to use that here?",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de512af1_4f7e154b",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-23T21:38:37Z",
      "side": 1,
      "message": "We do not need to do anything with UTF-8 here, it\u0027s effectively a pass-through\nWe only need to verify that it\u0027s a valid UTF-8 format, and there aren\u0027t that many correct formats to verify:\n\n1-byte UTF-8 character 0xxxxxxx\n2-byte UTF-8 character 110xxxxx 10xxxxxx\n3-byte UTF-8 character 1110xxxx 10xxxxxx 10xxxxxx\n4-byte UTF-8 character 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx",
      "parentUuid": "1760d625_c65e2342",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acabe1a3_5f6f4851",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Done\n\nDiscussed offline and writing our validation as Max suggests is fine. Code updated to include this validation",
      "parentUuid": "de512af1_4f7e154b",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f4078ce_99df5045",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "Regular expression libraries have a notorius history of nasty bugs (memory issues, infinite loops), allocating a regex involves compiling it each time, and regexes are often considered \"write-once code\" since it\u0027s hard to update them without knowing if you\u0027re breaking the logic.\n\n- Are there any issues with using std::regex in Chromium?\n- The rules above look pretty simple.  How hard would they be with absl string operations?",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab5f188_32954c1e",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-23T21:38:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "3f4078ce_99df5045",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "357d5c48_b5ef6c70",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Done\n\nUpdated to validate them without the regex. I mainly went the regex to avoid parsing the string extra times and to keep the code clean",
      "parentUuid": "3f4078ce_99df5045",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0b46b0f_c4462366",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-23T19:59:45Z",
      "side": 1,
      "message": "1. There has to be some length limit to enforce.\n\n2. Just because the RFC doesn\u0027t set limits, doesn\u0027t mean we can be opinionated.  For example, no one will want to deal with instance names that aren\u0027t UTF-8 and/or have embedded NULs.",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb91432d_5d67133c",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-23T21:38:37Z",
      "side": 1,
      "message": "https://www.ietf.org/rfc/rfc1035.txt\nLabels are 63 or less characters, total domain name length including terminating character is at most 256.\nSince this has to go through DNS, I think it should conform to at least these two checks as instance.service.domain is going to be the argument to the query to get SRV, TXT and A/AAAA records.",
      "parentUuid": "e0b46b0f_c4462366",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab2291f5_6127eeee",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Updated to use the following 4 validations:\n - Labels \u003c\u003d 63 characters\n - Total length \u003c\u003d 256 characters\n - Encoded using UTF8\n - Only valid characters, using the same definition as in instance name\n\nThe doc specifically says to disregard the restrictions of RFC 1033, 1034, 1035, but if we are okay with artificial limitations, I like the ones here. Thoughts?",
      "parentUuid": "fb91432d_5d67133c",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a7e5726_84a3e055",
        "filename": "discovery/dnssd/public/instance_record.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "What you have now LGTM.\n\n1. The only domain that matters for our use case is \".local\"\n2. I am not sure what the spec is trying to accomplish with section 4.1.3, but constraining the domain to DNS labels is very reasonable IMO.\n3. Can you remove or rewrite the first part of the comment since it doesn\u0027t apply to the code any more?",
      "parentUuid": "ab2291f5_6127eeee",
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02e835e9_54b833d7",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-10-23T21:38:37Z",
      "side": 1,
      "message": "Per style guide: \"Static methods of a class should generally be closely related to instances of the class or the class\u0027s static data.\"\n\nI would prefer free namespace level functions for this. Shorter to call in parsers/tests/other validation as well.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 55
      },
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adcd51fc_169468bc",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-24T01:31:41Z",
      "side": 1,
      "message": "Done\n\nFor now, I\u0027ve kept them in the same file. Do you think they should be here or elsewhere?",
      "parentUuid": "02e835e9_54b833d7",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 55
      },
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4edfb966_79cb96db",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T17:31:20Z",
      "side": 1,
      "message": "This is fine for now, no need to move them elsewhere until there\u0027s a reason.",
      "parentUuid": "adcd51fc_169468bc",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 55
      },
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad529de_4f82f96d",
        "filename": "discovery/dnssd/public/instance_record.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-22T17:26:34Z",
      "side": 1,
      "message": "I changed this back because either endpoint can be v4 or v6 (see instance_record.cc for further info)",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 43
      },
      "revId": "a0ca9da562801f92263e61a168aa73d1eb38e833",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}