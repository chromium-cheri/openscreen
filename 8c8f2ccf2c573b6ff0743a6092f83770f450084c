{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2baf0931_1e82ab5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "Not sure we can fix the operator overloading, seems to be a language constraint.  Maybe a question for the cpp slack.",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e28f1bd_96b5b298",
        "filename": "cast/standalone_receiver/dummy_player.cc",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "My reading of https://crbug.com/openscreen/123 and https://en.cppreference.com/w/cpp/language/dependent_name is that this is actually not possible, thus the bug was closed as WontFix.",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "623952ec_66e02f88",
        "filename": "cast/standalone_receiver/dummy_player.cc",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e28f1bd_96b5b298",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d11b5fa0_04550fdf",
        "filename": "cast/standalone_receiver/dummy_player.cc",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "I don\u0027t like this because it\u0027s importing an overloaded name, you won\u0027t be getting just just the std::chrono::duration operators but any other operator declared in openscreen::\n\nCan you import just the operator overloads you are using? (Comment applies elsewhere)",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3da26e51_19b8bca7",
        "filename": "cast/standalone_receiver/dummy_player.cc",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "I don\u0027t see a way to specify the function signature in a using statement. I namespaced these together as clock_operators to require specific inclusion as a group. Thoughts?",
      "parentUuid": "d11b5fa0_04550fdf",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fe43eb_5aa733bd",
        "filename": "cast/standalone_receiver/dummy_player.cc",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-10T19:22:55Z",
      "side": 1,
      "message": "Cool, that should address my concern, but I still see the using statements importing from the opensceen:: namespace.  Should they be `using openscreen::clock_operators::operator\u003c\u003c`",
      "parentUuid": "3da26e51_19b8bca7",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99f1faf4_2e7b2e9a",
        "filename": "docs/trace_logging.md",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "Looks like this comment also applies to async tracing?",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cf7efb1_7ad3c1b7",
        "filename": "docs/trace_logging.md",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99f1faf4_2e7b2e9a",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d624caa_b87348ca",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-11-09T21:42:47Z",
      "side": 1,
      "message": "This definitely feels cleaner than passing around a bunch of individual parameters",
      "range": {
        "startLine": 20,
        "startChar": 7,
        "endLine": 20,
        "endChar": 17
      },
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a241c7_29734bba",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-11-09T21:42:47Z",
      "side": 1,
      "message": "Do we ever expect an empty TraceEvent to be constructed?",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 12
      },
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abfbd049_3cdfd4f9",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "I think we are preferring {} for value initialization these days, but check with surrounding code and be consistent with that.",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6bd1556_345f1cbd",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "abfbd049_3cdfd4f9",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c248046_3d957b7a",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-10T19:22:55Z",
      "side": 1,
      "message": "This is now list initialization.  I think you meant `name{nullptr}`?",
      "parentUuid": "c6bd1556_345f1cbd",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "886ab248_537a165a",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "Can the first argument be a char* if dynamic argument names are not a requirement?\nThis would save space since the constant wouldn\u0027t be copied into a new std::string.",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6726249_8f0e7de4",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "886ab248_537a165a",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d641e20_9047f56b",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "It might be an idea to truncate argument strings to some reasonable length to prevent unforseen memory blowups when tracing is on.  This would require some additional length checks per event.... maybe it should be a debug-build-only thing for now.",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfafb190_b81ada16",
        "filename": "platform/api/trace_event.h",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d641e20_9047f56b",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27ab61ff_36e152a5",
        "filename": "platform/base/trace_logging_types.cc",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-11-09T21:42:47Z",
      "side": 1,
      "message": "These are flags not an enum class, so it\u0027s possible more than one is set\n\nYou\u0027d need to check for each flag individually instead of a switch statement",
      "range": {
        "startLine": 46,
        "startChar": 10,
        "endLine": 46,
        "endChar": 18
      },
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4ba31fd_f535d6af",
        "filename": "platform/base/trace_logging_types.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-11-09T01:46:34Z",
      "side": 1,
      "message": "Won\u0027t the compiler warn on a missing value?",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7bc8cd3_28576135",
        "filename": "platform/base/trace_logging_types.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-11-09T21:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4ba31fd_f535d6af",
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71b74b8_f2493653",
        "filename": "platform/base/trace_logging_types.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-11-09T21:42:47Z",
      "side": 1,
      "message": "Why move these to the `.cc`? They seem like the type of trivial function that would do well in the header",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 17
      },
      "revId": "8c8f2ccf2c573b6ff0743a6092f83770f450084c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}