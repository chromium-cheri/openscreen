{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fdcbe000_285426cc",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-21T17:48:51Z",
      "side": 1,
      "message": "do we not have utility for a templated span class? this definitely solves my api conundrum though.",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43911f65_9df60970",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-10-21T17:53:14Z",
      "side": 1,
      "message": "Why call it `byte_view`?\n\nIf it\u0027s a replacement for `std::span` and `absl::span` it might make more sense to call it `span`. Not a strong opinion though",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 16
      },
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90f5b6e1_30c621a1",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1233199
      },
      "writtenOn": "2022-10-21T19:13:38Z",
      "side": 1,
      "message": "Although its method API is similar to std::span, it\u0027s not a template so it can\u0027t old arbitrary types like std::span.  I felt it would be less confusing to be explicit about what type it holds, similar to std::string_view.",
      "parentUuid": "43911f65_9df60970",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 16
      },
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31a6627c_f8e736bd",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1233199
      },
      "writtenOn": "2022-10-21T19:13:38Z",
      "side": 1,
      "message": "Not yet, this this CL.",
      "parentUuid": "fdcbe000_285426cc",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b29dd2e0_fcfec29e",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-10-21T20:33:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "90f5b6e1_30c621a1",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 16
      },
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c12f3266_47c8a47e",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-21T17:48:51Z",
      "side": 1,
      "message": "remove commented out code",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5241d0c8_92e83045",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2022-10-21T17:53:14Z",
      "side": 1,
      "message": "Did you mean to remove this?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 22
      },
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4a7d770_f6b8542e",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-21T17:48:51Z",
      "side": 1,
      "message": "absl::Span can hold mutable data, which we do need for encoded frame on the receiver side?",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "862c47ec_e9681d47",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1233199
      },
      "writtenOn": "2022-10-21T19:13:38Z",
      "side": 1,
      "message": "Can you point me to the place where data mapped by the span is written?  I want to see if I can convert existing usages without templatizing this class.\n\nIf EncodedFrame has mixed mutability (i.e. other parts of it can be mutable but the data itself is sometimes readonly and sometimes mutable) then it gets tricky.",
      "parentUuid": "a4a7d770_f6b8542e",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efd48d97_a4d6933f",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-21T20:17:16Z",
      "side": 1,
      "message": "Looks like we only mutate the buffers when they are absl::Spans and then set them on the EncodedFrame, e.g. during decryption:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/openscreen/src/cast/streaming/frame_crypto.cc;drc\u003d95f3e04e349bf59cdf13c4f4d81748a2b392dcaf;l\u003d77\n\nI think it would be sufficient to have the buffer stored on EncodedFrame be a const view, and we can pass the buffer internally as an absl::Span before it gets set on an encoded frame.\n\nSo this is actually fine as is I think. If something comes up during adoption of this class we can fix it then, I would greatly prefer everything to be const correct.",
      "parentUuid": "862c47ec_e9681d47",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9c19c65_4606aedb",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-10-31T17:41:05Z",
      "side": 1,
      "message": "I\u0027m working on a dependent patch to convert usages of absl::Span in libcast to make sure the API is right, and how to handle the mutable-span case.\n\nMight be a few more days before that\u0027s ready to roll.",
      "parentUuid": "efd48d97_a4d6933f",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec580611_9a4e7994",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-21T17:48:51Z",
      "side": 1,
      "message": "if this isn\u0027t a template class shouldn\u0027t these be in an implementation file?",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f605426f_3d48898b",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1233199
      },
      "writtenOn": "2022-10-21T19:13:38Z",
      "side": 1,
      "message": "I think this is a case where we could want inlining for performance reasons.\n\nAlthough the presence of the std::assert call makes the reasoning a little more complicated.\n\nI\u0027ll do some more research and move it if there is no performance hit.",
      "parentUuid": "ec580611_9a4e7994",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95c1a21a_6133ac6e",
        "filename": "platform/base/bytes_view.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-25T05:04:31Z",
      "side": 1,
      "message": "I don\u0027t feel super strongly about it, maybe if this header grows in size we should revisit it.",
      "parentUuid": "f605426f_3d48898b",
      "revId": "60dc6427d93b63d7812a537d259e19093cbba783",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}