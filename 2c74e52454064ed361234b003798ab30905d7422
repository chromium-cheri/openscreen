{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f1f8936_db77c9cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-04T00:02:28Z",
      "side": 1,
      "message": "I made some structural changes to the code by creating a StreamingVideoEncoder class that both StreamingVpxEncoder and StreamingAv1Encoder inherit from in an attempt to reduce duplicate code. Does this approach work, or should I try something else?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2d2a22_c727a5e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "It\u0027s really cool that you were able to bring over some of the quantization and speed adjustment algorithms to AV1, those will be important to include in the Chrome implementation if we want a chance at realtime encoding in the browser.\n\nRegarding structs, if you define a struct Foo and don\u0027t add initializers for all of the primitive fields, they will be undefined if you declare a Foo like:\n\nFoo f;\n\nSee https://stackoverflow.com/questions/16782103/initializing-default-values-in-a-struct/16782131 for example.\n\nSo I always set POD initializers (or define a full ctor) to avoid unpredictable behaviors from a simple programming mistake.  Especially important if struct members are pointers or array indexes, as use of uninitialized memory can potentially lead to exploits.\n\n",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c17e9c0_d0eb729d",
        "filename": "cast/README.md",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Nit: wrap at 80 chars. Also, most linux distros don\u0027t use apt, so a rephrase would probably be good. Maybe:\n\n\"Currently, it is advised that most Linux users compile LibAOM from source, using the instructions at \u003cwebsite\u003e. Older versions found in many package management systems have blocking performance issues, causing AV1 encoding to be completely unusable.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb5bd058_f03f54bb",
        "filename": "cast/README.md",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c17e9c0_d0eb729d",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad37349a_f9381ff0",
        "filename": "cast/README.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Can you keep the markdown wrapped at 80 columns?  It makes viewing diffs easier.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e50d342b_aa569626",
        "filename": "cast/README.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad37349a_f9381ff0",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18417d9e_93c2a579",
        "filename": "cast/protocol/castv2/streaming_examples/offer.json",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Does this need to be libaom-av1? Why not av1?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b435841a_91564bd0",
        "filename": "cast/protocol/castv2/streaming_examples/offer.json",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Does adding libaom support require a change to the offer spec?  I would expect this to remain just \"av1.\"  If there\u0027s a concern about cross-compatibility of AV1 implementations, then let\u0027s discuss how to handle that separately.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4f3120_1def51ae",
        "filename": "cast/protocol/castv2/streaming_examples/offer.json",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "For some reason FFMPEG recognizes the codec as libaom-av1, not av1.\n\nWhen using `av1` I get this error:\n`[ERROR:../../cast/standalone_receiver/mirroring_application.cc(91):T0] [MirroringApplication] Failure: UnknownError \u003d \"Could not initialize codec av1 because codec not available (Invalid argument).\"`\n\nWhen using `libaom-av1` it finds the codec successfully and I get this message:\n`[INFO:../../cast/standalone_receiver/decoder.cc(123):T0] Found codec: libaom-av1 (known to FFMPEG as av1)`",
      "parentUuid": "b435841a_91564bd0",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db54a4ec_71824ee5",
        "filename": "cast/protocol/castv2/streaming_examples/offer.json",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "See above comment about libaom-av1 vs av1.",
      "parentUuid": "18417d9e_93c2a579",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a15b1e29_ccd4b0ef",
        "filename": "cast/standalone_sender/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Can we gate libaom separately? Since we have to compile it from source, it would be nice to be able to just have the other libraries and toggle this one separately.\n\nAlso, this should be \"have_external_libs\" not \"have_ffmpeg \u0026\u0026 have_libopus \u0026\u0026 have_libvpx\" anyway.\n\nMaybe:\n\n  if (have_external_libs) {\n      sources +\u003d [\n        \"connection_settings.h\",\n        \"ffmpeg_glue.cc\",\n        \"ffmpeg_glue.h\",\n        \"looping_file_cast_agent.cc\",\n        \"looping_file_cast_agent.h\",\n        \"looping_file_sender.cc\",\n        \"looping_file_sender.h\",\n        \"receiver_chooser.cc\",\n        \"receiver_chooser.h\",\n        \"remoting_sender.cc\",\n        \"remoting_sender.h\",\n        \"simulated_capturer.cc\",\n        \"simulated_capturer.h\",\n\n        \"streaming_opus_encoder.cc\",\n        \"streaming_opus_encoder.h\",\n        \"streaming_video_encoder.cc\",\n        \"streaming_video_encoder.h\",\n        \"streaming_vpx_encoder.cc\",\n        \"streaming_vpx_encoder.h\",\n      ]\n      \n      # LibAOM support currently recommends building from source, so is included\n      # separately here.\n      if (have_libaom) {\n        \"streaming_av1_encoder.cc\",\n        \"streaming_av1_encoder.h\",\n      }   \n  }",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bc1af7d_f984fcbe",
        "filename": "cast/standalone_sender/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "This basically requires you to set all of these flags to true if you want to build the standalone sender.\n\nIf the intention is to allow different combinations, you could break the source list down and add the files gated by each flag.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a511593a_385e43c4",
        "filename": "cast/standalone_sender/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6bc1af7d_f984fcbe",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed13a031_174f9f48",
        "filename": "cast/standalone_sender/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a15b1e29_ccd4b0ef",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "638a8014_7787b4f6",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Don\u0027t check in any commented out code, please. I think we want to uncomment this to readd it?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "253608cd_07d09f27",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "638a8014_7787b4f6",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951571e4_20540088",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Did you intend to leave this commented out?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dd5dbd8_62b4b461",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "951571e4_20540088",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1cd1edd_6b766955",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "This break is unreachable.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09779740_117d5ee1",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1cd1edd_6b766955",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e1ad94_d3be4255",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "1. I don\u0027t think you need a break after OSP_NOTREACHED.\n\n2. Definitely a nit, but it is possible this would execute if you added a codec in the main but not here--I would usually say something like\n\n  // Since we only support VP8, VP9, and AV1, any other codec value here \n  // should be due only to developer error.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb0cee3c_7149e210",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6e1ad94_d3be4255",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "733b3dd2_23bd8bce",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Might be helpful to add a message like\n\n\u003c\u003c \"Unsupported codec \" \u003c\u003c params.codec;",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b1bef76_449b219a",
        "filename": "cast/standalone_sender/looping_file_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "733b3dd2_23bd8bce",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81014125_e7536e7d",
        "filename": "cast/standalone_sender/looping_file_sender.h",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "When we gate libAOM separately in the BUILD.gn, we will need preprocessor directives here (#if defined HAVE_LIBAOM)",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a0f4a94_c273aef3",
        "filename": "cast/standalone_sender/looping_file_sender.h",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81014125_e7536e7d",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de29af1_0eea8cf2",
        "filename": "cast/standalone_sender/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Same here, why not just \"av1\"?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ae06b7a_2faac94e",
        "filename": "cast/standalone_sender/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "See above comment about libaom-av1 vs av1.",
      "parentUuid": "7de29af1_0eea8cf2",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eae271f_18a35994",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Can you update this to TODO(issuetracker.google.com/issues/155336511)?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8036d431_cdccf787",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3eae271f_18a35994",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50172803_7c86e651",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Hm, \"lost in history.\"  I like it :-)",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "433cd66c_5829cf00",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Could this be in streamingvideoencoder, with virtual methods for child classes to implement the codec specific stuff?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "becd97b2_798ffa53",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "At the moment StreamingVpxEncoder and StreamingAv1Encoder have slightly different WorkUnit implementations since `work_unit.image` is codec specific. So I think moving this to StreamingVideoEncoder would require moving WorkUnit too, and I\u0027m not quite sure how to handle the fact that WorkUnit\u0027s image field would need to change  depending on the codec.",
      "parentUuid": "433cd66c_5829cf00",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c9f4a87_ab0fdb77",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 387,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Does this use anything from AV1, or could it be part of StreamingVideoEncoder as a protected method?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b89cdec_174c0054",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 439,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Delete commented out code please.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcedbb93_d49cea3c",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 439,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b89cdec_174c0054",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7844189a_a1711efc",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "Could this be shared with the vpx encoder? Maybe in a separate streaming_encoder_util header?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75a30a03_d5147b45",
        "filename": "cast/standalone_sender/streaming_av1_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7844189a_a1711efc",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38d15903_2fdf5808",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2021-08-04T19:20:07Z",
      "side": 1,
      "message": "It seems like there is a lot of overlap between this encoder and the Vpx encoder. I do think it probably doesn\u0027t in StreamingVideoEncoder, but would love to see some of the duplication reduced if possible.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55256729_1a562a34",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "If any of these fields are POD (plain-old-data) and the struct is value-initialized, their contents will be undefined.  So please default-initialize any POD fields.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f560b171_8c64ded4",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Same comment applies here.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86607def_7f43327a",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "I don\u0027t see an argument for CPU encoding speed; update comment?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48ab078c_3e690a45",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86607def_7f43327a",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51dbdf4c_21d56a36",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "If work_unit is never nullptr, consider passing it by a mutable reference.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e29670ef_60a73980",
        "filename": "cast/standalone_sender/streaming_av1_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Ditto",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b18dc2d1_91d8d07a",
        "filename": "cast/standalone_sender/streaming_video_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Can you set this to kMaxQuantizer?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5738da61_36c362bd",
        "filename": "cast/standalone_sender/streaming_video_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b18dc2d1_91d8d07a",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99663b5b_456fd096",
        "filename": "cast/standalone_sender/streaming_video_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "See other comments about default initializing POD struct members.",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad90628a_ff5d04c8",
        "filename": "cast/standalone_sender/streaming_vpx_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2021-08-04T21:07:26Z",
      "side": 1,
      "message": "Are these declarations duplicates from the base class?",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5fa7fa8_6962980c",
        "filename": "cast/standalone_sender/streaming_vpx_encoder.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1515352
      },
      "writtenOn": "2021-08-06T01:21:51Z",
      "side": 1,
      "message": "My understanding was that I needed to re declare them in the derived class because they are pure virtual functions, but I am not sure.",
      "parentUuid": "ad90628a_ff5d04c8",
      "revId": "2c74e52454064ed361234b003798ab30905d7422",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}