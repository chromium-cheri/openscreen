{
  "comments": [
    {
      "key": {
        "uuid": "05eee7a4_2488de7c",
        "filename": "discovery/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-11T22:56:45Z",
      "side": 1,
      "message": "nit: TODO to remove when there are other users of these templates?",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4636fe28_eb91b9a2",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-11T22:56:45Z",
      "side": 1,
      "message": "IMHO it doesn\u0027t seem like this class provides much value.  Is it primarily moving DnsSdPublisher into public/?  Or maybe the impl is more than the comment lets on...",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bdb5dae_4c52036b",
        "filename": "discovery/public/dns_sd_service_publisher.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-12T02:33:10Z",
      "side": 1,
      "message": "I have a slight preference towards including this class. We can centralize validations to the provided SndSdService instance and service name, and only require the cast/osp folders to understand a conversion function (DnsSdService has a factory method that only requires a task runner). It\u0027s not a strong preference though\n\n@mfoltz, what are your thoughts?",
      "parentUuid": "4636fe28_eb91b9a2",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f6c6dec_d670ceeb",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-11T19:36:34Z",
      "side": 1,
      "message": "Since we already expose services() as a function, would it make more sense to just make this a void? Or alternatively std::function\u003cvoid(DnsSdServiceWatcher\u003cT\u003e*)\u003e?\n\nThe caller could call services() if they want the updated list",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 79
      },
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a0e4c28_29e4c960",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-11T19:43:00Z",
      "side": 1,
      "message": "In either case, if we queue this call on the TaskRunner, rather that immediately calling the callback, we might be able to combine multiple callbacks and improve perf\n\nie: if we have already pushed this to the task runner but have not yet had the callback called, don\u0027t push the callback to the task runner again. Or, if we push callbacks Callback1, Callback2, Callback3, when we run callback1 it could invalidate 2 and 3 so that they never actually run.",
      "parentUuid": "0f6c6dec_d670ceeb",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 79
      },
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e88cc323_2ae00bab",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-11T22:56:45Z",
      "side": 1,
      "message": "nit: sometimes called ForceRefresh.",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07cebe17_71b23e40",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-12T02:33:10Z",
      "side": 1,
      "message": "Open to either name. @mfoltz, What are your thoughts - \u0027HardRefresh\u0027 was your suggestion",
      "parentUuid": "e88cc323_2ae00bab",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0885a5a_1c1ab10f",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-11T00:17:34Z",
      "side": 1,
      "message": "How do you feel about returning a vector of const refs rather than objects? It seems that it would avoid a lot of unnecessary copies\n\nSame for the callback",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 73,
        "endChar": 16
      },
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "888eb732_d94bf76c",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-11T22:56:45Z",
      "side": 1,
      "message": "const-refs seem better as long as it\u0027s reasonable.  In particular, whether this class internally stores T or DnsSdInstanceRecord (and then calls FromRecord here) seems to be what matters.",
      "parentUuid": "d0885a5a_1c1ab10f",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 73,
        "endChar": 16
      },
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a477ede_e878fd11",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-11T22:56:45Z",
      "side": 1,
      "message": "CRTP seems more appropriate for these.",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ad08668_07ffd771",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-12T02:33:10Z",
      "side": 1,
      "message": "Is your concern the cost of the virtual function call?",
      "parentUuid": "1a477ede_e878fd11",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d048b8c_f3288252",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-12-12T03:13:53Z",
      "side": 1,
      "message": "That and having a vtable/vptr at all (since Publisher only has the one virtual function).  There\u0027s no reason to mock this for testing and we won\u0027t otherwise have multiple implementations of e.g. DnsSdServiceWatcher\u003ccast::ServiceInfo\u003e.  This is a drop in the bucket though, just thought I\u0027d mention it.",
      "parentUuid": "3ad08668_07ffd771",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79891fe6_44b3573a",
        "filename": "discovery/public/dns_sd_service_watcher.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-12-12T18:00:11Z",
      "side": 1,
      "message": "Actually there will be multiple implementations - we will have one for OSP and one for CastV2\n\nIt seems the options for this conversions are:\n1) virtual functions\n2) conversion std::function\u003cT(const DnsSdInstanceRecord\u0026)\u003e passed into the ctor\n3) operator on T with build failure if its not there\n4) CRTP with build failure if its not there\n\nIMHO 1 and 2 are the most readable, with 1 leading to cleaner code, which is why I went with that route (even if there is a minor perf hit). Happy to change it if needed though",
      "parentUuid": "9d048b8c_f3288252",
      "revId": "17b7febe6f75dfa2f7000b362dc523e3016a5b2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}