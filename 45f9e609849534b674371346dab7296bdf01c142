{
  "comments": [
    {
      "key": {
        "uuid": "ad9b05bc_c9298bc6",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-08-21T00:37:40Z",
      "side": 1,
      "message": "This was written in response to my belief that gmtime() was causing the gcc crash.  gmtime_r() could also be used, but still holds the 2038 limit, so I thought I\u0027d give this a shot.  Interestingly, the gcc crash didn\u0027t actually go away, so I guess it\u0027s just a precision trade-off now.",
      "revId": "45f9e609849534b674371346dab7296bdf01c142",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2e6931d_3f5206d8",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T20:19:10Z",
      "side": 1,
      "message": "I think it would be best to avoid as much time conversion code as possible overall, and especially in anything related to crypto and certs. Just this method alone needs a bunch of unit tests. Does BoringSSL by any chance have any tools for this?",
      "parentUuid": "ad9b05bc_c9298bc6",
      "revId": "45f9e609849534b674371346dab7296bdf01c142",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64eae709_2c0afc47",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-08-23T21:14:24Z",
      "side": 1,
      "message": "gmtime_r() would also do this safely, but will wrap (on Mac anyway) in 2038.  BoringSSL uses gmtime_r internally.",
      "parentUuid": "b2e6931d_3f5206d8",
      "revId": "45f9e609849534b674371346dab7296bdf01c142",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4defee55_977f7703",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-08-23T21:31:56Z",
      "side": 1,
      "message": "I agree with Max. If 2038 causing failure a real concern, we can add a UT that starts failing in 2037 to notify us at that point (or even 2035 to be safe) - then update with whatever fix has been released by then",
      "parentUuid": "64eae709_2c0afc47",
      "revId": "45f9e609849534b674371346dab7296bdf01c142",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad4df25f_4da72ada",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-08-23T21:35:45Z",
      "side": 1,
      "message": "It will be probably re-written many times and protocols will be changed as well before 2038. (Famous last words)\nI\u0027d use bssl and make it a problem of updating a dependency, rather than somehow ending up with a security issue (unlikely, but still, my irrational fear).",
      "parentUuid": "4defee55_977f7703",
      "revId": "45f9e609849534b674371346dab7296bdf01c142",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81706106_42969655",
        "filename": "cast/common/certificate/cast_cert_validator_internal.cc",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-08-23T22:24:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad4df25f_4da72ada",
      "revId": "45f9e609849534b674371346dab7296bdf01c142",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}