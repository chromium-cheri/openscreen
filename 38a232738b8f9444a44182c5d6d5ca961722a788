{
  "comments": [
    {
      "key": {
        "uuid": "11698318_5752abaf",
        "filename": "cast/streaming/answer_messages.cc",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "I know I was the one who suggested this, but thinking now this might warrant a larger discussion for the team\nAll of the CastV2 docs should probably be publicised if we plan to use them, or none of them - landing in some middle ground doesn\u0027t quite make sense\n\n@mfoltz, WDYT?",
      "range": {
        "startLine": 22,
        "startChar": 3,
        "endLine": 22,
        "endChar": 62
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9ea364d_cc33cbdc",
        "filename": "cast/streaming/answer_messages.cc",
        "patchSetId": 11
      },
      "lineNbr": 434,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "I like it! Very clean!",
      "range": {
        "startLine": 421,
        "startChar": 0,
        "endLine": 434,
        "endChar": 63
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78043c38_f2cc8b10",
        "filename": "cast/streaming/answer_messages.h",
        "patchSetId": 11
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "Can you define an interface as a base class? Even if its never referenced outside this file, it would be nice to enforce these assumptions at compile-time\n\nsomething like:\n\n\u003e  template\u003ctypename T\u003e\n\u003e  class JsonParsable {\n\u003e   public:\n\u003e    static bool ParseAndValidate(const Json::Value\u0026 value, T* out) {\n\u003e      return T::ParseAndValidate(value, out);\n\u003e    }\n\u003e  \n\u003e    virtual Json::Value ToJson() const \u003d 0;\n\u003e    virtual bool IsValid() const \u003d 0;\n\u003e  }",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 35,
        "endChar": 33
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "891f6e28_9eb87289",
        "filename": "cast/streaming/answer_messages.h",
        "patchSetId": 11
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-04T19:16:20Z",
      "side": 1,
      "message": "I address this in the above comments. C++ will make these not PODs, which means that list initialization is broken/no longer free, so I have to define all the constructors, and I really dislike stuff like:\n\n    AudioConstraints::AudioConstraints(int max_sample_rate, int max_channels, int min_bit_rate, int max_bit_rate, std::chrono::milliseconds max_delay) : max_sample_rate(max_sample_rate), max_channels(max_channels), min_bit_rate(min_bit_rate), max_bit_rate(max_bit_rate), max_delay(max_delay {}\n    AudioConstraints::AudioConstraints(const AudioConstraints\u0026) \u003d default;\n    AudioConstraints::AudioConstraints(const AudioConstraints\u0026) \u003d default;\n    AudioConstraints\u0026 AudioConstraints::operator\u003d(const AudioConstraints\u0026) \u003d default;\n    AudioConstraints\u0026 AudioConstraints::operator\u003d(AudioConstraints\u0026\u0026) \u003d default;\n    AudioConstraints::~AudioConstraints() \u003d default;\n\n\nOr even worse, it\u0027s definitely a class now, so the definition becomes:\n\n  class AudioConstraints : JsonParseable\u003cAudioConstraints\u003e {\n   public:\n    AudioConstraints::AudioConstraints(int max_sample_rate, int max_channels, int min_bit_rate, int max_bit_rate, std::chrono::milliseconds max_delay);\n    AudioConstraints::AudioConstraints();\n    AudioConstraints::AudioConstraints(const AudioConstraints\u0026);\n    AudioConstraints::AudioConstraints(AudioConstraints\u0026\u0026);\n    AudioConstraints\u0026 AudioConstraints::operator\u003d(const AudioConstraints\u0026);\n    AudioConstraints\u0026 AudioConstraints::operator\u003d(AudioConstraints\u0026\u0026);\n    AudioConstraints::~AudioConstraints();\n\n    // JsonParseable\n    static bool ParseAndValidate(const Json::Value\u0026 value, AudioConstraints* out) override;\n    Json::Value ToJson() const override;\n    bool IsValid() const override;\n\n      int max_sample_rate();\n    int max_channels();\n    int min_bit_rate();\n    int max_bit_rate();\n    std::chrono::milliseconds max_delay();\n\n   private:\n    int max_sample_rate_ \u003d 0;\n    int max_channels_ \u003d 0;\n    // Technically optional, sender will assume 32kbps if omitted.\n    int min_bit_rate_ \u003d 0;\n    int max_bit_rate_ \u003d 0;\n    std::chrono::milliseconds max_delay_ \u003d {};\n  };",
      "parentUuid": "78043c38_f2cc8b10",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 35,
        "endChar": 33
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99df4a31_f180f2dc",
        "filename": "cast/streaming/answer_messages.h",
        "patchSetId": 11
      },
      "lineNbr": 35,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-05T03:30:47Z",
      "side": 1,
      "message": "Think I misunderstood the initial comment. Would you be able to rephrase as something to the effect of:\n\n\u003e For each of the below classes, though a number of methods are shared, the use of a shared base class has intentionally been avoided. This is improve readability of the structs provided in this file by cutting down on the amount of obscuring boilerplate code. For each of the following struct definitions, the following method definitions are shared:\n\n\nWDYT?\n\nAlso some thoughts on the rest\n\n\u003e Or even worse, it\u0027s definitely a class now, so the definition becomes:\n\nI\u0027d actually argue that this makes it no more a class than it currently is.\nNothing in the style guide forbids ctors, operators, or inheritance for structs: https://google.github.io/styleguide/cppguide.html#Structs_vs._Classes\n\n\u003e C++ will make these not PODs, which means that list initialization is broken/no longer free, so I have to define all the constructors, and I really dislike stuff like\n\nThis feels like a case of \"Create a TODO + P4 bug on the backlog\" :) Agree it definitely would explode the size of this CL for minimal benefit.\n\nThough (not necessarily for this CL), this seems like a useful case for a macro\n`CREATE_CHILD_DEFAULT(class)` or similar to generate all that boilerplate and defaults. WDYT?",
      "parentUuid": "891f6e28_9eb87289",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 35,
        "endChar": 33
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8baa55e6_1fe5eb38",
        "filename": "cast/streaming/answer_messages.h",
        "patchSetId": 11
      },
      "lineNbr": 35,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-05T17:11:42Z",
      "side": 1,
      "message": "I think the style guide prefers to avoid macros? If macros are on the table then that changes literally everything... I could avoid so much boilerplate.",
      "parentUuid": "99df4a31_f180f2dc",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 35,
        "endChar": 33
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c7be9cd_ef57e1e8",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "It\u0027s not immediately clear if the check is\n`if (ssrc \u003d\u003d 0)` or `if (ssrc \u003d\u003d Optional::NullOpt)` or `if (ssrc.is_error())`\nThis would especially be true for external contributors not super familiar with our Error classes\n\nIMHO\n\n\u003e  if (ssrc.is_error())\n\nis more readable, but explicitly typing the above also works.\n\nI\u0027d actually be in favor of getting rid of the bool overload for ErrorOr\u003c...\u003e to force more readable code. What does everyone else think?",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 14
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aca2c6b1_b133793b",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-04T19:16:20Z",
      "side": 1,
      "message": "I should probably just remove auto here. IMO, ErrorOr works like pointers right now which I find nice, you have the same problem with:\n\nstd::unique_ptr\u003cuint32_t\u003e ssrc;\nif (!ssrc) {\n   return nullptr;\n}\n\n*ssrc \u003d 123;\n\nThough what I am planning on doing is changing offer_messages.cc to use the new parse methods I added, so I think we should resolve this in a separate patch.",
      "parentUuid": "8c7be9cd_ef57e1e8",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 14
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df7282ec_390eb52f",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-05T03:30:47Z",
      "side": 1,
      "message": "\u003e I should probably just remove auto here\n\neliminating auto is just as good as using `is_error()` here\n\n\u003e ErrorOr works like pointers right now which I find nice, you have the same problem with:\n\nI actually do have the same problem there, but I get that it\u0027s just me. Try to avoid mentioning it in code reviews unless the meaning of the code is obscured\n\n\u003e so I think we should resolve this in a separate patch\n\nSGTM. Though I\u0027m perfectly happy not changing ErrorOr\u003c...\u003e Too. Was just curious what you thought as code readability vs code usability",
      "parentUuid": "aca2c6b1_b133793b",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 14
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c88f05ea_0d8f6606",
        "filename": "cast/streaming/offer_messages.cc",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-05T17:11:42Z",
      "side": 1,
      "message": "I agree that is_error is probably better. I\u0027d be down to remove operator bool in another patch :).",
      "parentUuid": "df7282ec_390eb52f",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 14
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9c407d5_7910f707",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "Thank you! I think we\u0027ve needed one of these for a while!\n\nI expect there will be a lot of discussion around this file though. If that ends up being the case, it might save you time to split this into its own CL",
      "range": {
        "startLine": 11,
        "startChar": 3,
        "endLine": 12,
        "endChar": 18
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15eb7522_492840d2",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-04T19:16:20Z",
      "side": 1,
      "message": "It will block checkin of my answer work, so hoping I can get it in uncontroversially...",
      "parentUuid": "e9c407d5_7910f707",
      "range": {
        "startLine": 11,
        "startChar": 3,
        "endLine": 12,
        "endChar": 18
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90843592_031457ad",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "As long as we are re-writing optional, I\u0027m in favor of removing this operator\nIt\u0027s a few extra characters when we use it to call \u0027.has_value()\u0027, but much more readable code.\n\nWhat does everyone else think?",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 75
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7b3ef5e_c5a504b6",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-04T19:16:20Z",
      "side": 1,
      "message": "I don\u0027t really feel strongly either way, so I\u0027m going to delete the bool() operator. I do think it can lead to some unintuitive states, if the type optional points to is also convertible to bool.",
      "parentUuid": "90843592_031457ad",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 75
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f83de7ec_f4f592f4",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "WDYT about making this public, renaming it NullOpt (or similar) and eliminating the empty ctor (or at least allowing an empty ctor)?\nThen, we need to explicitly create an empty Optional object\n\nSimilar to the absl / std optional\u0027s nullopt\n\n\u003e  struct nullopt_t {\n\u003e    explicit constexpr nullopt_t(int) {}\n\u003e  };\n\nAlso, then we could add an \u003d\u003d overload to allow for checking (Optional\u003cT\u003e \u003d\u003d Nullopt) like with absl",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9aad47b0_a938d154",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:58:56Z",
      "side": 1,
      "message": "Typos in the first part. Either:\n- Eliminate the empty ctor (to force explicit creation)\n- Allow a non-empty ctor (I prefer to use absl::optional\u003cT\u003e(absl::nullopt) sometimes to be explicit in code. Similarly for assignment operators)\n\nI think the latter makes more sense. But open to the former",
      "parentUuid": "f83de7ec_f4f592f4",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6fea8fd_66e4a8a8",
        "filename": "platform/base/optional.h",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-04T19:16:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9aad47b0_a938d154",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2381a20_6f8b470d",
        "filename": "util/json/parsing_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2020-06-04T16:54:49Z",
      "side": 1,
      "message": "This one is doing enough it might warrant a UT",
      "range": {
        "startLine": 172,
        "startChar": 0,
        "endLine": 175,
        "endChar": 5
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5ecb9a2_9aaf498e",
        "filename": "util/json/parsing_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-06-04T19:16:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2381a20_6f8b470d",
      "range": {
        "startLine": 172,
        "startChar": 0,
        "endLine": 175,
        "endChar": 5
      },
      "revId": "38a232738b8f9444a44182c5d6d5ca961722a788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}