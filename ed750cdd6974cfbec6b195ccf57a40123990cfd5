{
  "comments": [
    {
      "key": {
        "uuid": "64dec50a_2951df24",
        "filename": "cast/common/channel/virtual_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "These methods are simple enough that it seems worth moving the definition to the header so that operator\u003d\u003d can be inline. Same for !\u003d",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03ea1aa8_3dcb13c7",
        "filename": "cast/common/channel/virtual_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64dec50a_2951df24",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06e0b16c_1f766c6c",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Suggest s/device/virtual/",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "898d217e_3c43e70d",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06e0b16c_1f766c6c",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ee3fff7_1dc197fb",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "Worth adding a description of what this entire enum is used for",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9bbe8f5_9924f265",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ee3fff7_1dc197fb",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff5c668e_6b34f372",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Can you be more specific on what a user connection is?\n\nDoes this mean the user has foregrounded the application that owns the sender side of the connection?",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f444f3e7_d4efc473",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "It doesn\u0027t necessarily mean anything is foregrounded.  Chromium for example _always_ makes strong connections to apps (it can make invisible connections to the platform but it never makes weak connections).  Maybe weak has more use on Android?  I added some additional information though.",
      "parentUuid": "ff5c668e_6b34f372",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "357a14d5_9cc01709",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "It would be helpful to explain if the \"app\" is the software that requested the connection (sender) or that is receiving the connection (receiver).  Or could it be either?",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69148413_8a8d420d",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "This comment applies to receiver apps so I added clarification.",
      "parentUuid": "357a14d5_9cc01709",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bd77a6f_cfba05ed",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "This didn\u0027t make a lot of sense to me.  If this is copied from Cast documentation, then fine to leave it as-is, and maybe we can come up with something better with the folks who designed the virtual connection system.",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b14e64a2_55cfc9a5",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "This is mostly copied from Cast documentation.  I\u0027ll leave it for now, though I did add one more clarification about \"app\" being a receiver app.",
      "parentUuid": "0bd77a6f_cfba05ed",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b272997_79a82ee3",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Super nit: s/cast/Cast/",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e329ae8_4e7ec22c",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b272997_79a82ee3",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4acc060a_63f702ce",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "This seems to be associated with a peer_id.  Can this data be part of the VirtualConnection object itself?",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dd5529d_6184a0be",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "It seems easier to let it be separate since many queries involving a virtual connection don\u0027t care about this data.  Also, a VirtualConnection by itself is something that can currently be constructed directly just by receiving a CastMessage and used for routing while this data is only known at creation time.  For example, if these were merged, in order to do a HasConnection query, you\u0027d actually have to construct an incomplete VirtualConnection (i.e. |type|, etc. would be ignored).  It might then be slightly confusing when you are for sure talking about a _complete_ VirtualConnection vs. just the currently used triplet.",
      "parentUuid": "4acc060a_63f702ce",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d285a13_505fd881",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Can you add a comment explaining this?\n(I\u0027m guessing this is the last two bytes of the IPv4 address of the peer.)",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15c18df4_45e0d60d",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d285a13_505fd881",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adaa8d84_58e9b205",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Can you provide any comments on the syntax and meaning of local_id and peer_id?\n\nI *think* these are pseudorandom strings that are used to uniquify the connection endpoints.",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15882deb_fd542f85",
        "filename": "cast/common/channel/virtual_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "I added what I know about the possible values of these, but I also don\u0027t think I have the complete story yet.",
      "parentUuid": "adaa8d84_58e9b205",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b59635f3_eb38d035",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Can the VC be made entirely moveable or entirely copyable, so we don\u0027t have to manually copy part of it and move the rest?",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27dcc24d_69f263d7",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "I\u0027m not quite sure what you\u0027re referring to, but the copy on this particular line was for the observer interface, which is now removed.",
      "parentUuid": "b59635f3_eb38d035",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10237f61_aea0c7ba",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "Since there is no error case where socket_map.emplace(...) fails, can this be re-ordered to:\n\nif(observer_) {\n  observer_-\u003eOnConnectionAdded(vconn, associated_data)\n}\nsocket_map.emplace(...)",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 37,
        "endChar": 5
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77d43318_e5747ef9",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "This implementation of using Observer ensures these work:\n\nOnConnectionAdded(added) override { DCHECK(manager-\u003eHasConnection(added); }\nOnConnectionRemoved(removed) override { DCHECK(!manager-\u003eHasConnection(removed); }\n\nWhich would be particularly important if an Added handler wanted to remove it immediately, or vice versa.  However, I don\u0027t _know_ that we\u0027ll need this, so it just seems easier to remove it than use inconsistent semantics.  If we need it later, we might find that the easier-to-implement semantics are fine and I\u0027d be happy with that.",
      "parentUuid": "10237f61_aea0c7ba",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 37,
        "endChar": 5
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e2c97bd_dc415f87",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "This seems like a lot of logic to erase from the socket_map entries before calling OnConnectionRemoved. Is there any reason we can\u0027t call OnConnectionRemoved first?",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 88,
        "endChar": 68
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa90773f_a3aececa",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "See above comment.",
      "parentUuid": "0e2c97bd_dc415f87",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 88,
        "endChar": 68
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b3823ce_06a083f8",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "Same comment about ordering",
      "range": {
        "startLine": 116,
        "startChar": 2,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae08ec20_1756adb0",
        "filename": "cast/common/channel/virtual_connection_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "2b3823ce_06a083f8",
      "range": {
        "startLine": 116,
        "startChar": 2,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddfa6314_2e50c2c4",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "Client?",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5ce8da1_a0bd50c5",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "I still like maintaining a distinction between Delegate/Client and Observer; I think this falls on the side of Observer.  However, it\u0027s removed for now.",
      "parentUuid": "ddfa6314_2e50c2c4",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5e8fc70_9844dc95",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "virtual_connection or just connection",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12ef1684_bfd4a64e",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5e8fc70_9844dc95",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dce30ff9_6a0790d6",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "Comment to explain what the bool parameter is, since it\u0027s not immediately obvious. Same for 2 below functions",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 63
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f90e1c0_7fea1e6f",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dce30ff9_6a0790d6",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 63
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb41e05b_69f53aa9",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Could this remove multiple connections at once (if there are multiple VCs on a socket)?\nCan it be named RemoveConnectionsBySocketId?",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e42b1de_cfddeb72",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Yes it can remove multiple, so it should\u0027ve been plural.  Done.",
      "parentUuid": "bb41e05b_69f53aa9",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "786fe4f7_7ac3f555",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "Can the map of peer_id -\u003e AssociatedData live in the VirtualConnection object?",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9f5366c_8d6c4903",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "I\u0027m not sure what this means.  Is this the same suggestion as making AssociatedData a member of VirtualConnection?  If not, to _which_ VirtualConnection object are you referring?  There isn\u0027t a canonical VirtualConnection* that this class maintains currently.",
      "parentUuid": "786fe4f7_7ac3f555",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5463e59_f65f12d4",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-29T20:22:34Z",
      "side": 1,
      "message": "Sorry if my comment wasn\u0027t clear.  It looks like you want a struct to hold the data associated with the virtual connection peer to hold in the map.  Would it be possible to combine VCTail and AssociatedData into a new object, say PeerData, that includes the peer_id?",
      "parentUuid": "a9f5366c_8d6c4903",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a576cdd8_4e470b59",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T23:57:25Z",
      "side": 1,
      "message": "That VCTail only contains peer data is incidental.  The reason it exists is because we just want a collection of {VirtualConnection, AssociatedData}.  If we used std::vector\u003c\u003e, that would be our struct and we\u0027re done.  Using std::map, we\u0027d be duplicating storage to do for example std::map\u003clocal_id, {VirtualConnection, AssociatedData}\u003e.  VCTail is just the data that\u0027s left over after putting other pieces into map keys.",
      "parentUuid": "b5463e59_f65f12d4",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22e63fcb_f5974e9a",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-01T23:59:32Z",
      "side": 1,
      "message": "OK.  Normally I don\u0027t worry too much about splitting an object into a sub-structure to avoid duplicating a field into a map key, since you end up with objects that don\u0027t have a lot of meaning.  Since this is a private implementation detail of the manager, I\u0027m not too worried about it.  However  I think a comment explaining the purpose of VCTail would be helpful.",
      "parentUuid": "a576cdd8_4e470b59",
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb909d0a_a902068a",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-10-23T04:06:46Z",
      "side": 1,
      "message": "It seems like you never access connections_[id] without immediately calling connections_[id][local_id] after\n\nIt might simplify the code to change this to std::multimap\u003cstd::pair\u003cuint32, std::string\u003e, VCTail\u003e",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14b69a4f_a807f98c",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-24T20:24:36Z",
      "side": 1,
      "message": "I also found the multi-map to add complexity that might not be necessary.  IIUC, a local_id/peer_id pair is unique across sockets.   Are local_ids and peer_ids also distinct?\n\nSo maybe you could have a local_id-\u003eVirtualConnection* map, and a socket_id-\u003estd::vector\u003cVirtualConnection\u003e map, to support the Add/Remove API above.\n\nWhat do you think?",
      "parentUuid": "bb909d0a_a902068a",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5912d24f_ef7e5951",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T01:10:23Z",
      "side": 1,
      "message": "Mark: The specific maps you suggested wouldn\u0027t work because VirtualConnection* isn\u0027t stable inside a std::vector\u003c\u003e (and an index still wouldn\u0027t work because of removals earlier in the list).  That leaves either std::{forward_,}list or std::vector\u003cstd::unique_ptr\u003c\u003e\u003e.  Since you wouldn\u0027t be able to remove from the socket_id list with just a pointer from the local_id map with forward_list, I think std::vector\u003cstd::unique_ptr\u003c\u003e\u003e might be the lesser evil.\n\nRyan: That would simplify removing a specific virtual connection but then removing by socket_id or local_id would have to iterate over the entire map (aside from the VCTail lists) since there\u0027s no wildcard we can supply for the other half of the pair when doing a lookup.  Admittedly, that might not be that bad but it\u0027s something to consider.  We could also do map\u003cpair\u003csocket_id, peer_id\u003e, VCTail\u003e to get out of the multimap altogether but that\u0027s also a case where removal by socket_id or local_id would iterate over the entire map (which probably has even more nodes actually).  Still another option would be to keep a vector sorted first by local_id then (stably) by socket_id.  I imagine no one wants to look at that code alternative though...\n\nFor now, I\u0027ll leave the current implementation if either of you want to respond to the available options.",
      "parentUuid": "14b69a4f_a807f98c",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2c477e2_41e7d26a",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-10-29T20:22:34Z",
      "side": 1,
      "message": "I see, if we don\u0027t want to maintain two copies of the data for a virtual connection, or pointers to the data, then it makes sense to try to maintain the VC in one map.\n\nWhat makes things complicated is that some VCs are scoped to a socket (receiver-0/sender-0) while others are likely not (sender-XXX and the GUID).  So the key for the outer map makes sense as socket_id.\n\nThe open question I have is whether within a socket, there would ever be duplicate local_ids.  If not, we could do away with the inner multimap.  I can ask Oriol today if that\u0027s possible.",
      "parentUuid": "5912d24f_ef7e5951",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dbdf642_3587177a",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-10-29T23:57:25Z",
      "side": 1,
      "message": "Well, in the current map setup, duplicate local_ids are not why there is a multimap, it\u0027s about whether there could be multiple peer_ids per one local_id (i.e. multiple senders talking to the same app/receiver-0) which seems completely legitimate.  Duplicate local_ids would just cause a bug in message routing.",
      "parentUuid": "c2c477e2_41e7d26a",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e901a2f0_04ff1c7d",
        "filename": "cast/common/channel/virtual_connection_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-11-01T23:59:32Z",
      "side": 1,
      "message": "Thanks for the explanation.  I agree the multimap makes sense with the current structures as they are defined.",
      "parentUuid": "8dbdf642_3587177a",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "ed750cdd6974cfbec6b195ccf57a40123990cfd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}