{
  "comments": [
    {
      "key": {
        "uuid": "cd3c4bbd_7e6b587d",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Nit: typo in independent",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81db94e8_aec6d196",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd3c4bbd_7e6b587d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ab5315f_27f58979",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Does this have any platform dependencies, or is this just a helper for EventWaiter?  Can it be a private class of EventWaiter?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5917cec8_4e0b566a",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "Can you explain what this is adding to EventWaiter?  It seems like it\u0027s duplicating the existing functionality but breaking it up in a different way.  This could be related to the fact that I don\u0027t understand why item 1 in the CL description is necessary.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d85f609_9fd13929",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "This is intended to wrap an FD_SET, since that\u0027s platform specific. I\u0027ve moved it to a public class of EventWaiter though (it can\u0027t be private because NetworkLoop needs it too so it can be passed to WaitForEvents(...))",
      "parentUuid": "2ab5315f_27f58979",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20b54d95_96ca3dee",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "The existing parts of EventWaiter (everything I didn\u0027t add) will be deleted in the follow-up CL. It has been left here now to allow code outside of the platform layer to function without refactors as done in the original CL. Those changes will come in the follow up CL, or see the larger parent CL this was taken from for further context.\n\nThe reason to make EventWaiter only platform-specific is so that the wait method could be pulled up to the NetworkLoop layer. This has 2 benefits:\n1) Less code duplication between platforms\n2) Only 1 list of watched sockets is maintained instead of 2 (the previous one in EventWaiter and the new mapping \u003csocket -\u003e callback\u003e in NetworkLoop)\n3) Wait code could be moved up to the NetworkLoop layer for more efficient thread synchronization, based on feedback from @pthatcher and @mfoltz",
      "parentUuid": "5917cec8_4e0b566a",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a1c4e47_deaf7e63",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "We don\u0027t want 2 lists of callbacks, which is another reason to bind them to the UdpSocket itself.",
      "parentUuid": "20b54d95_96ca3dee",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2b5829f_dee16922",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "I think it makes sense to have an object for managing an FD_SET.  However I\u0027m not sure it should be part of the platform API (the part the OS implements), since it\u0027s really part of the network loop implementation, and the OS-specific piece is captured in the declarations below for {Watch,Stop}UdpSocket{Readable,Writable}.  So I think this would fit better as helper class of the NetworkLoop, or maybe put into platform/impl in the new platform/ folder structure if it needs to be used by multiple classes.",
      "parentUuid": "3d85f609_9fd13929",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "048c0d08_76c72eed",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Based on one of Peter\u0027s suggestion, this class has been removed entirely. PTAL when you can to see what you think of the new approach.",
      "parentUuid": "e2b5829f_dee16922",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc045305_db494034",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "PTAL again - the current approach ensures that only 1 list of callbacks is maintained, especially since @pthatcher asked me to remove the Write callbacks from the current CL",
      "parentUuid": "9a1c4e47_deaf7e63",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81c09d89_083ea6bb",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T05:14:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "048c0d08_76c72eed",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26312c28_c4f15bf7",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T05:14:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cc045305_db494034",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c990eaa1_eddfbb2b",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "const?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "860e7194_f222ce01",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c990eaa1_eddfbb2b",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e85d70c2_a278c046",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "s/Unit/unit/",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc5907c_0aa6556f",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e85d70c2_a278c046",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d5e60d_7b0a5b55",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Are these passed by pointers to allow the caller to pass nullptr?\nCan you please document that, or change to const ref if possible?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4200f59d_8844cf43",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "I went with pointers because const refs are not possible\nOn posix, WaitForEvents changes the contents of the FD_SET underlying the SocketHandler objects, so const refs aren\u0027t valid\n\nI\u0027ve added OSP_CHECK calls for nullptrs since they are invalid, and added documentation as such\n\nIf you prefer, I can instead update the code to treat a nullptr as an empty set",
      "parentUuid": "90d5e60d_7b0a5b55",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c845a2fa_6514218f",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "Ok, just please document how the caller should do if they only want reads and not writes (or vice versa).  I would prefer passing nullptr to avoid having to allocate an empty object for this case.",
      "parentUuid": "4200f59d_8844cf43",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aa9e515_f110b739",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "This interface has been updated to instead use const refs as suggested. The new interface is:\nErrorOr\u003cstd::vector\u003cUdpSocket*\u003e\u003e NetworkWaiterPosix::AwaitSocketsReadable(\n    const std::vector\u003cUdpSocket*\u003e\u0026 sockets, const Clock::duration\u0026 timeout) {\n\nPTAL at new approach",
      "parentUuid": "c845a2fa_6514218f",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734dfee0_5c078611",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T05:14:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5aa9e515_f110b739",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e43508f9_52a75830",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "nit: NOTE portion is unnecessary explanation.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48372b1f_7ca9db4c",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e43508f9_52a75830",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f0660ae_01bfaeb7",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-14T21:48:13Z",
      "side": 1,
      "message": "nit: It\u0027s usually called GetInstance",
      "range": {
        "startLine": 41,
        "startChar": 24,
        "endLine": 41,
        "endChar": 36
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "481699f3_31752ee2",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "1/We\u0027re trying to eliminate singletons from the code base, but it probably makes sense as we never want multiple runners per process.\n\n2/However this makes unit testing more complicated.\n\n3/Can this be named GetInstance for consistency with other Chromium code?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6e6d991_b6aa8b96",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "FYI I believe 2 is a very large part of 1.",
      "parentUuid": "481699f3_31752ee2",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c4346c8_f5a2fa34",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "For UT purposes, I define a fake_network_runner in platform/test. This is part of the follow up CL. Allowing the use of this is why all of my changes throughout this and the follow up CL allow for dependency injection :)\n\nrenamed to GetInstance though",
      "parentUuid": "a6e6d991_b6aa8b96",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06cb43fd_5588de34",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f0660ae_01bfaeb7",
      "range": {
        "startLine": 41,
        "startChar": 24,
        "endLine": 41,
        "endChar": 36
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "244a4c34_0fb53d05",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I\u0027m not a fan of singletons.  \n\nAll the code we will be testing should take a NetworkRunner* as a parameter, so why can\u0027t a test simply create one and then pass it in?  Why the need for code being tested to access it via GetSingleton?\n\nI can understand if we have a global Context object that has a NetworkRunner, but then it could also have other things as well (like a clock).  If we\u0027re going to do the \"get the singleton\" thing, I feel like it should be in one place (like a Context) and not in every placed (NetworkRunner, clock, maybe file system some day, etc).",
      "parentUuid": "a6e6d991_b6aa8b96",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce3074d6_9f611a7f",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "We have an open issue to collect all of the \"global things\" into a set of context objects, maybe one per process, one per thread and one per client/profile in the embedder.\n\nhttps://crbug.com/openscreen/31\n\nIf we *really* need the singleton here, then please add a TODO referencing that issue so we can find where we need to fix code to use the context object later.",
      "parentUuid": "244a4c34_0fb53d05",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "337298c8_41de6856",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-24T20:24:37Z",
      "side": 1,
      "message": "Based on discussions with @pthatcher, the Singleon in the platform layer has been removed\n\nWe will still need a singleton, but that assumption will be examined more closely in the follow-up CL, so I will wait and create a TODO at that point if we do decide to go that route",
      "parentUuid": "ce3074d6_9f611a7f",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90526ace_9174b72e",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "s/function/delay_function/\n\nPlease document that the delay function returns microseconds, or zero to post the next task without delay.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c2eb521_2b9359c3",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "I\u0027ve moved this class to private since it\u0027s only used internally, and the caller should never know about it\n\nAdded documentation to clarify how it works. Waiting on naming change since the effect doesn\u0027t exactly match what you\u0027ve described, so let me know if you would still like this change. Additionally, the return type has been changed to a delay based on below comment.",
      "parentUuid": "90526ace_9174b72e",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88f70017_03913fbf",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5c2eb521_2b9359c3",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ff58318_d3dbe041",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Function returns microseconds, while the rest of the task API uses Clock::duration.  It would be more consistent (if more verbose) to have the function return an optional Clock::duration.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7c01c86_d904d89d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Good idea - updating to that",
      "parentUuid": "6ff58318_d3dbe041",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84733dea_2d160269",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "The return value for |function| needs to be documented.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "066acea9_beaeec0b",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84733dea_2d160269",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbc2dc4b_79854be5",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "This and the associated class are defined in the Header rather than .cc so that the function can be inlined. If this is not worth the perf benefit, let me know and I will pull it to the .cc",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde82c6a_d5a348f9",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Usually I prefer to optimize after measuring and/or let the compiler figure it out.  But this is probably hot code, so seems fine to inline the main task runner codepaths.",
      "parentUuid": "fbc2dc4b_79854be5",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91a528e6_826754d5",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "Resolving as I\u0027m not asking for any changes here.",
      "parentUuid": "cde82c6a_d5a348f9",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee87e2b8_df76fcd8",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cde82c6a_d5a348f9",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "879c5650_2f09fe22",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "What is a \"packaged task\"?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12d63141_3c702688",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "The commonly used Post methods take in any functor (using a template), then \u0027package\u0027 it into a std::packaged_task\u003cvoid() noexcept\u003e. It\u0027s essentially a std::function\u003cvoid()\u003e that can only run once. The change was made because we were having issues posting tasks which were move-only",
      "parentUuid": "879c5650_2f09fe22",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01ef6c4a_0cc37f92",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "Thanks, I wasn\u0027t familair with std::packaged_task (which appears to be the std:: flavor of base::OnceClosure).",
      "parentUuid": "12d63141_3c702688",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa92fefc_4b10950d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Or just say \"Tasks will be executed on the current thread ...\"",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44850eaf_9e15b87b",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa92fefc_4b10950d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7edb6e5_e9f213a4",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Or will Chromium provide its own .cc for this class?  That is normally how embedders override platform implementations.\n\nThe comments above mention TaskRunnerFactory, but I don\u0027t see that in the source code.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff6f1cf9_293f881e",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "The above comment is referring to a Chromium Task Runner implementation in osp/impl/quic/quic_connection_factory_impl.cc which wraps our existing TaskRunner and is required for Chromium QUIC - see the larger CL this one came from for more information. I\u0027ve removed this comment since I believe it to be confusing, but can add it back in if requested.\n\nI have updated the above comment. That class was removed as part of a previous CL to add the NetworkRunner interface.",
      "parentUuid": "f7edb6e5_e9f213a4",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc51d95e_1e0d6b9d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-24T18:00:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ff6f1cf9_293f881e",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0aa3b0bb_894b482d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "These weren\u0027t added previously because the platform was meant to have its own way of driving the TaskRunner it provided (e.g. because SequencedTaskRunner in Chromium doesn\u0027t have anything analogous to these).\n\nMy comment about merging NetworkRunnerImpl and TaskRunnerImpl would also make these unnecessary.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98aa32de_4f3d8e63",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "This is exposed for a couple reasons:\n1) In the follow-up change, we are required to wrap our TaskRunner as a Chromium TaskRunner again (Chromium QUIC requires it), and this method is exposed for that purpose. See the larger CL this was pulled out of for more details (specifically osp/impl/quic/quic_connection_factory_impl.cc)\n2) In the new iteration, We allow the embedder to inject in a Task Runner of their choice into the Network Runner. Since we do not know the type of Task Runner any longer, we cannot make such assumptions here and need to be able to initialize the Task Runner without that information (if initialization is needed). This method allows for such initialization\n\n@pthatcher has expressed a similar view of removing this, and I can do so if that is the consensus, but I would prefer to allow for further discussion before making this change.",
      "parentUuid": "0aa3b0bb_894b482d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a475f5bf_092dab8d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-25T00:15:12Z",
      "side": 1,
      "message": "1 doesn\u0027t seem to be a reason here?  I can\u0027t find either being used in quic_connection_factory_impl.cc where you mentioned.  Chromium\u0027s base::TaskRunner doesn\u0027t have these methods, so Chromium QUIC shouldn\u0027t be able to depend on them.\n\nFor 2, the \"initialization\" of RunUntilStopped isn\u0027t used in the current patch (PS5), though maybe you intended to add it to NetworkRunnerImpl where I also commented.",
      "parentUuid": "98aa32de_4f3d8e63",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c438545_8d5afb51",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-25T01:16:53Z",
      "side": 1,
      "message": "In the most recent iteration, this has been removed entirely. There were comments left saying similar on a future iteration, and I forgot to go back and close this one when I closed that one",
      "parentUuid": "a475f5bf_092dab8d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f52719b_26258d48",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "These should just be in a member initialization list: https://en.cppreference.com/w/cpp/language/initializer_list",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "462e52b3_64788930",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f52719b_26258d48",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f7d0c17_a000ba30",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "emplace",
      "range": {
        "startLine": 57,
        "startChar": 26,
        "endLine": 57,
        "endChar": 32
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1e49023_601bff09",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f7d0c17_a000ba30",
      "range": {
        "startLine": 57,
        "startChar": 26,
        "endLine": 57,
        "endChar": 32
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a0fd5d6_9f627874",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "I wouldn\u0027t term this an IO failure, there was just already someone else waiting on this socket.  Maybe kAlreadyListening (though that was added for a different purpose)?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991bb211_8a8df1df",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated to kAlreadyListening;",
      "parentUuid": "7a0fd5d6_9f627874",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "494e6e85_273bf664",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "emplace",
      "range": {
        "startLine": 70,
        "startChar": 27,
        "endLine": 70,
        "endChar": 33
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34c302a0_7ba4ef3e",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "494e6e85_273bf664",
      "range": {
        "startLine": 70,
        "startChar": 27,
        "endLine": 70,
        "endChar": 33
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3df49b5_9224c067",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "A duplicate entry in the map doesn\u0027t seem like an I/O failure.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e8a6ab3_1bd15d61",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated to kAlreadyListening",
      "parentUuid": "d3df49b5_9224c067",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4342f3ec_cf4f4280",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "IMO just DCHECK(task_runner_)",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1218ff72_b0335ad2",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated to CHECK rather than DCHECK since we need it to fail in release builds as well",
      "parentUuid": "4342f3ec_cf4f4280",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68a76ad9_b01891b2",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "interesting",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f291ba3_c1ae9724",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68a76ad9_b01891b2",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62330a6a_80adffb5",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Do we want this to be re-entrant?  It seems like if we have two event waiters on the same socket, they will both get events and it\u0027s non-deterministic which one gets the next packet.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "186f30a3_175951f2",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "As we discussed, making Wait() a private API to the network loop should avoid re-entrancy problems (if it isn\u0027t already).",
      "parentUuid": "62330a6a_80adffb5",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55f9de5e_6443e039",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Discussed offline",
      "parentUuid": "62330a6a_80adffb5",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2739c57_83a2992d",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "The set of sockets/callbacks here could be completely different from the ones you\u0027re waiting on.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63005417_8b230913",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "As we discussed, this is an OK tradeoff and we don\u0027t think callers will see unexpected behavior; but I would like a note explaining the outcomes when a caller adds/removes/swaps a callback mid-Wait.",
      "parentUuid": "d2739c57_83a2992d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9c67d78_0883053d",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Adding a NOTE here and to the Add/remove methods and to the wait method",
      "parentUuid": "d2739c57_83a2992d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db41c6f1_57e1a9c5",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "How about a ReadPacketTask class that takes the packet and is passed to PostTask, rather than using multiple std::function wrappers?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e1e0292_9ae6422a",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "I think this comment still applies.  A re-usable Task implementation would seem clearer and simpler than allocating std::function on the stack each time.",
      "parentUuid": "db41c6f1_57e1a9c5",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d291f5_bb91d8bc",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Discussed offline. Tried to change to a direct use of std::bind (move-only lambdas not supported until C++14) which looks like \u0027auto task \u003d std::bind(read.second, std::move(read_packet))\u0027, but this fails as a compilation error:\nerror: no type named \u0027type\u0027 in \u0027std::result_of\u003cstd::_Bind\u003cstd::function\u003cvoid (std::unique_ptr\u003copenscreen::platform::UdpReadCallback::Packet, std::default_delete\u003copenscreen::platform::UdpReadCallback::Packet\u003e \u003e)\u003e (std::unique_ptr\u003copenscreen::platform::UdpReadCallback::Packet, std::default_delete\u003copenscreen::platform::UdpReadCallback::Packet\u003e \u003e)\u003e \u0026()\u003e\u0027\n\nBased on the provided stack trace, the error is in TaskRunner:\n../../platform/api/task_runner.h:34:22: note: in instantiation of function template specialization \u0027std::packaged_task\u003cvoid ()\u003e::packaged_task\u003cstd::_Bind\u003cstd::function\u003cvoid (std::unique_ptr\u003copenscreen::platform::UdpReadCallback::Packet, std::default_delete\u003copenscreen::platform::UdpReadCallback::Packet\u003e \u003e)\u003e (std::unique_ptr\u003copenscreen::platform::UdpReadCallback::Packet, std::default_delete\u003copenscreen::platform::UdpReadCallback::Packet\u003e \u003e)\u003e, void\u003e\u0027 requested here\n    PostPackagedTask(Task(std::move(f)));\n\nThis might be fixable eventually, but I expect it should be as part of another CL",
      "parentUuid": "5e1e0292_9ae6422a",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e5cdfa2_94e4e045",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T05:14:11Z",
      "side": 1,
      "message": "OK - not familiar enough with the std:: task APIs in use to offer a suggestion, but I still think there is room for future improvement.\n\nCan you add a FIXME: Investigate removing ReadCallbackExecutor\n\nThanks!",
      "parentUuid": "a6d291f5_bb91d8bc",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffd37701_84ad17a2",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-28T18:34:11Z",
      "side": 1,
      "message": "Definitely agree that this should be fixed - it\u0027s going to take some further investigation though\n\nAdded the FIXME for now",
      "parentUuid": "7e5cdfa2_94e4e045",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66ad1b46_7ddb9d5d",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "Does it seem worth adding constants to Clock for 1 second, 1 ms, etc...? I haven\u0027t yet, but am in favor of doing so",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ccbc33c_f298dcb7",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Check and see what we agreed to in terms of using Clock literals.",
      "parentUuid": "66ad1b46_7ddb9d5d",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c703f8b7_80a58a45",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "This could be `std::chrono::milliseconds(250)` or just `milliseconds(250)` with a using declaration somewhere.",
      "parentUuid": "3ccbc33c_f298dcb7",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76a0ef2_d87b08bc",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "std::chrono::milliseconds(250) sounds good to me.",
      "parentUuid": "c703f8b7_80a58a45",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "579c9e84_153516de",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c703f8b7_80a58a45",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe1bd85e_3195886b",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "for/i unnecessary, just use `while (continue_network_procesing_)`",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e84365b_ce317ec0",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe1bd85e_3195886b",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05942d64_eb632225",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "What service?  \"for NetworkRunnerImpl\"?",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 19,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4893f0ed_12c843df",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05942d64_eb632225",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 19,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "059bf65d_00c9e0c2",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "What is the lifetime relationship between this object and the UdpSocket* passed through the API takes? How will the caller know it\u0027s safe to delete a UdpSocket?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8d98f23_55440916",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Discussed offline. Adding a callback to UDP Socket for deletion from NetworkLoop as discussed.",
      "parentUuid": "059bf65d_00c9e0c2",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81bdc8f2_673beda4",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "nit: unnecessary explanation IMO.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5e0c4e3_5e11545a",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81bdc8f2_673beda4",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb6a1437_c3d59591",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Can this be passed in the constructor?\nCan NetworkLoop just call NetworkRunner::GetSingleton() in its ctor?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0e102ad_214059a1",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Discussed offline. Updated code to allow the NetworkRunner to swap which TaskRunner is used, so this section has changed. PTAL again",
      "parentUuid": "bb6a1437_c3d59591",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa4c4b8b_c2d5689c",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T05:14:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a0e102ad_214059a1",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a593e59_99e87192",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Similar comment about lifetime of the task_runner pointer.  Is it assumed to be a long lived singleton?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dab10fe_4b130cdd",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Discussed offline. Updated this section to make the Task Runner inject-able by the embedder, so PTAL again",
      "parentUuid": "0a593e59_99e87192",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "024cb14c_f85d800c",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-28T05:14:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8dab10fe_4b130cdd",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "884ab76f_94f62bf7",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "This method sounds like it should be \"WaitUntilWritable\", since it\u0027s not actually writing anything.\n\nIf the callback passed the UdpSocket* that became writable, the caller could pass a more generic function.  Depends on how callers use this.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28871a16_bd5318f3",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Renamed to WaitUntilWritable",
      "parentUuid": "884ab76f_94f62bf7",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ce5ee18_0c90d6f5",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "For now, I have included support for Write callbacks. They were already written + tested before we decided against including them in the NetworkRunner layer (based on our meeting mid last week), so I wanted to check everyone\u0027s thoughts before pulling this out.\n\nIn the current setup, these methods are written here but not exposed in NetworkRunner, so callers cannot access them. For this reason I see it as reasonable to not delete the existing code. Especially since we\u0027ve already decided it needs to be removed and hasn\u0027t been yet\n\nThoughts @pthatcher @mfoltz",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7461ea15_44fc4cd0",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "I am OK leaving them in for now.   However if we finish porting the layers above, and:\n\n1. There\u0027s no implementation that actually reports non-writability,\n2. they remain internal and unused,\n\nWe should go back and remove them.",
      "parentUuid": "1ce5ee18_0c90d6f5",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e27b296_4ec80efd",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "Unless others object, please add a TODO(issue/XX) here to re-evaluate Write callbacks part of the NetworkLoop API at a later time.",
      "parentUuid": "7461ea15_44fc4cd0",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03354fb6_0a8fceed",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7461ea15_44fc4cd0",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d984e3ca_73b4d8c1",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "ISTM these map values should be combined into a single struct with a UDPSocket* and the two callbacks.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2006e4b_1a2a012b",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-18T22:50:59Z",
      "side": 1,
      "message": "I don\u0027t feel strongly about this since they have be iterated separately through the EventWaiter.",
      "parentUuid": "d984e3ca_73b4d8c1",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a888283_f8dd2478",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "The reason I kept them separate is because we need to add the Read callbacks to the Read SocketHandler each iteration through this loop, and separately for Write. \nThese could be combined, but it would complicate this operation.\n\nresolving since you don\u0027t have a strong opinion on this one",
      "parentUuid": "d984e3ca_73b4d8c1",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f138c5c_b34dde4c",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "is_running_ ?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dbd9d89_62aa04a4",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f138c5c_b34dde4c",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9dc166b_3ff1062b",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "I\u0027d prefer a lambda over std::bind everywhere.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd29b217_b9313bdf",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updating to use lambdas throughout this CL",
      "parentUuid": "f9dc166b_3ff1062b",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a783a370_43861ab4",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "Same here.",
      "parentUuid": "f9dc166b_3ff1062b",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae664f0d_470147cb",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-25T18:45:20Z",
      "side": 1,
      "message": "CL has been updated to use lambdas rather than std::bind",
      "parentUuid": "a783a370_43861ab4",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd49c689_f3734532",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:45:58Z",
      "side": 1,
      "message": "Updating to PostPackagedTaskWithDelay, and same for above PostPackagedTask. Didn\u0027t think it was worth pushing another iteration just for this change, so it will show up in the next iteration",
      "range": {
        "startLine": 43,
        "startChar": 16,
        "endLine": 43,
        "endChar": 33
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d9db6c_dfe24efc",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd49c689_f3734532",
      "range": {
        "startLine": 43,
        "startChar": 16,
        "endLine": 43,
        "endChar": 33
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3da526b_4b01e0ad",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "IMO there should either be a join of both threads here to preserve the blocking behavior/implication or we should rename this.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f703b5c_761b714d",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Based on discussions with Mark, I\u0027ve added a boolean parameter to determine whether the task runner should run on the current thread or on a new thread. PTAL again now that this change is in",
      "parentUuid": "c3da526b_4b01e0ad",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b4c11b4_b80afc1d",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "+1\n\nActually... I don\u0027t think we need to threads for this.  We could do this instead:\n\nnetwork_thread_ \u003d std::make_unique\u003cstd::thread\u003e(\n      std::bind(\u0026NetworkLoop::RunUntilStopped, network_loop_.get()));\ntask_runner_-\u003eRunUntilStopped();\nnetwork_thread_-\u003eJoin();",
      "parentUuid": "c3da526b_4b01e0ad",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9caecf0d_77794baf",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-25T18:45:20Z",
      "side": 1,
      "message": "In the most recent iteration, threads have been removed. We expect the caller to handle calling the task runner and network runner\u0027s RunUntilStopped methods on 2 new threads that they create, similarly to the expectation we previously had for the Task Runner",
      "parentUuid": "8b4c11b4_b80afc1d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c23e231_1594c024",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "We explicitly added this warning to prevent this; it\u0027s not just the compiler being picky.  I believe the OSP solution has been to make these a raw pointer and just turn make_unique into new, letting it leak on exit.  Chromium has base::LazyInstance::Leaky [1] for this but I don\u0027t think we plan to import it (it goes a step further and only creates one on first access).\n\n[1] https://cs.chromium.org/chromium/src/base/lazy_instance.h?type\u003dcs\u0026q\u003dlazyinstance\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d132",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f16d9a84_3215a48c",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Good to know - thank you! Updated to use a pointer instead of unique_ptr",
      "parentUuid": "9c23e231_1594c024",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97e7933b_942bab1e",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Filename should be network_runner_impl.h",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2233b893_4165553c",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97e7933b_942bab1e",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38386056_e46e082a",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1125619
      },
      "writtenOn": "2019-06-21T17:00:55Z",
      "side": 1,
      "message": "I think we need a comment explaining that this is the 2-thread approach, perhaps with some documentation about what that means.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "764e3e21_5d2847ab",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-25T18:45:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38386056_e46e082a",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47ee63fe_80b28cda",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "IMO we wouldn\u0027t need a fake NetworkRunner (positive, also IMO) if the following things changed:\n 1. This still allowed for the clock function to be injected.\n 2. TaskRunnerImpl moved into this impl directly instead of injecting a unique_ptr\u003cTaskRunner\u003e.\n\nAlthough 1 seems reasonable by itself, it\u0027s probably useless without 2 or something similar.\n\nAt this point, we don\u0027t need a TaskRunnerImpl by itself at all anymore, because NetworkRunnerImpl will always be what\u0027s substituted for a TaskRunner.  Then, copying its implementation here would give us the ability to run tasks on the same thread that calls NetworkRunnerImpl (i.e. can sequence with unit test code), which also enables RunUntilIdleForTesting.\n\nThis probably isn\u0027t going to be a popular opinion but I want to see what others\u0027 opinions are nonetheless.  IMO allowing an arbitrary TaskRunner to be injected won\u0027t necessarily allow code re-use here because for e.g. Chromium, we still need an entirely different NetworkRunner (and starting a new thread to run SequencedTaskRunner isn\u0027t what we want/possible anyway).  Also, the current singleton impl means we\u0027re locked into TaskRunnerImpl that way as well anyway.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8df7fedb_56abd7c9",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "The biggest reason I would prefer to keep the two separate is to encapsulate all TaskRunner and Networking code in their own locations, where they don\u0027t need to know about each other.\n\nRegarding swapping in an arbitrary Task Runner, @Mfoltz has asked me to add support for this. It should be in the new iteration of this CL\n\nWhat does everyone else think?",
      "parentUuid": "47ee63fe_80b28cda",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e817ab08_6bec2082",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "Really wanted this to be protected, but needed it public to support NetworkRunner::GetSingleton(). If someone has a clever way to make this non-public, I\u0027d appreciate it :)",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eccd6829_fcce284d",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-14T21:48:13Z",
      "side": 1,
      "message": "I think you can get it to work with CRTP https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\nNetworkRunnerImpl : public NetworkRunner\u003cNetworkRunnerImpl\u003e\nThis way code in NetworkRunner can call into NetworkRunnerImpl as a template, i.e. it can call GetSingleton method which will be implemented in NetworkRunnerImpl.\nI\u0027m sure if you search for CRTP singleton, something will come up",
      "parentUuid": "e817ab08_6bec2082",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b4deeae_87f2fe71",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Why not move GetInstance() to this class if this class is actually providing the implementation?",
      "parentUuid": "eccd6829_fcce284d",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b4d7b06_a2ef0579",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "This could be private by declaring both NetworkRunner and std::make_unique (or using std::unique_ptr(new ...) work-around) as friends.",
      "parentUuid": "7b4deeae_87f2fe71",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebf5a968_c522daf1",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated based on Mark\u0027s suggestion. Thank you everyone for the ideas!",
      "parentUuid": "2b4d7b06_a2ef0579",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4290b918_ef65614c",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Should be private",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d6105e3_eff351b7",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated. This was originally public to allow the NetworkRunner to access NetworkRunnerImpl\u0027s singleton object, but the suggestion above fixed this.",
      "parentUuid": "4290b918_ef65614c",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929e8df1_90a5ba25",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "instance\u0027s",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5fb52f2_fc17ab3e",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "929e8df1_90a5ba25",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "392b87a9_6a47fd3d",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "rv \u003d\u003d 0 is a timeout, not an IO failure.  That is also a bug in the current WaitForEvents; at one point it blocked forever, and in that case the error code is correct.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fefead6a_7038a306",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated to return a new Error::Code::kTimeout",
      "parentUuid": "392b87a9_6a47fd3d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2a50249_a2c60123",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-20T20:42:58Z",
      "side": 1,
      "message": "Updated to return a new Error::Code::kTimeout",
      "parentUuid": "392b87a9_6a47fd3d",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a449cd9_134b9d59",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-25T01:16:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fefead6a_7038a306",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}