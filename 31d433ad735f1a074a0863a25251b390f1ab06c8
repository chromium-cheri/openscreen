{
  "comments": [
    {
      "key": {
        "uuid": "cd3c4bbd_7e6b587d",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Nit: typo in independent",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ab5315f_27f58979",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Does this have any platform dependencies, or is this just a helper for EventWaiter?  Can it be a private class of EventWaiter?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5917cec8_4e0b566a",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "Can you explain what this is adding to EventWaiter?  It seems like it\u0027s duplicating the existing functionality but breaking it up in a different way.  This could be related to the fact that I don\u0027t understand why item 1 in the CL description is necessary.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c990eaa1_eddfbb2b",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "const?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e85d70c2_a278c046",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "s/Unit/unit/",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90d5e60d_7b0a5b55",
        "filename": "platform/api/event_waiter.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Are these passed by pointers to allow the caller to pass nullptr?\nCan you please document that, or change to const ref if possible?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e43508f9_52a75830",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "nit: NOTE portion is unnecessary explanation.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f0660ae_01bfaeb7",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-14T21:48:13Z",
      "side": 1,
      "message": "nit: It\u0027s usually called GetInstance",
      "range": {
        "startLine": 41,
        "startChar": 24,
        "endLine": 41,
        "endChar": 36
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "481699f3_31752ee2",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "1/We\u0027re trying to eliminate singletons from the code base, but it probably makes sense as we never want multiple runners per process.\n\n2/However this makes unit testing more complicated.\n\n3/Can this be named GetInstance for consistency with other Chromium code?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6e6d991_b6aa8b96",
        "filename": "platform/api/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "FYI I believe 2 is a very large part of 1.",
      "parentUuid": "481699f3_31752ee2",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90526ace_9174b72e",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "s/function/delay_function/\n\nPlease document that the delay function returns microseconds, or zero to post the next task without delay.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ff58318_d3dbe041",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Function returns microseconds, while the rest of the task API uses Clock::duration.  It would be more consistent (if more verbose) to have the function return an optional Clock::duration.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84733dea_2d160269",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "The return value for |function| needs to be documented.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbc2dc4b_79854be5",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "This and the associated class are defined in the Header rather than .cc so that the function can be inlined. If this is not worth the perf benefit, let me know and I will pull it to the .cc",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde82c6a_d5a348f9",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Usually I prefer to optimize after measuring and/or let the compiler figure it out.  But this is probably hot code, so seems fine to inline the main task runner codepaths.",
      "parentUuid": "fbc2dc4b_79854be5",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "879c5650_2f09fe22",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "What is a \"packaged task\"?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa92fefc_4b10950d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Or just say \"Tasks will be executed on the current thread ...\"",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7edb6e5_e9f213a4",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Or will Chromium provide its own .cc for this class?  That is normally how embedders override platform implementations.\n\nThe comments above mention TaskRunnerFactory, but I don\u0027t see that in the source code.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aa3b0bb_894b482d",
        "filename": "platform/api/task_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "These weren\u0027t added previously because the platform was meant to have its own way of driving the TaskRunner it provided (e.g. because SequencedTaskRunner in Chromium doesn\u0027t have anything analogous to these).\n\nMy comment about merging NetworkRunnerImpl and TaskRunnerImpl would also make these unnecessary.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f52719b_26258d48",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "These should just be in a member initialization list: https://en.cppreference.com/w/cpp/language/initializer_list",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f7d0c17_a000ba30",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "emplace",
      "range": {
        "startLine": 57,
        "startChar": 26,
        "endLine": 57,
        "endChar": 32
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a0fd5d6_9f627874",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "I wouldn\u0027t term this an IO failure, there was just already someone else waiting on this socket.  Maybe kAlreadyListening (though that was added for a different purpose)?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "494e6e85_273bf664",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "emplace",
      "range": {
        "startLine": 70,
        "startChar": 27,
        "endLine": 70,
        "endChar": 33
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3df49b5_9224c067",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "A duplicate entry in the map doesn\u0027t seem like an I/O failure.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4342f3ec_cf4f4280",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "IMO just DCHECK(task_runner_)",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68a76ad9_b01891b2",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "interesting",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62330a6a_80adffb5",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Do we want this to be re-entrant?  It seems like if we have two event waiters on the same socket, they will both get events and it\u0027s non-deterministic which one gets the next packet.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2739c57_83a2992d",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "The set of sockets/callbacks here could be completely different from the ones you\u0027re waiting on.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db41c6f1_57e1a9c5",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "How about a ReadPacketTask class that takes the packet and is passed to PostTask, rather than using multiple std::function wrappers?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66ad1b46_7ddb9d5d",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "Does it seem worth adding constants to Clock for 1 second, 1 ms, etc...? I haven\u0027t yet, but am in favor of doing so",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ccbc33c_f298dcb7",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Check and see what we agreed to in terms of using Clock literals.",
      "parentUuid": "66ad1b46_7ddb9d5d",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c703f8b7_80a58a45",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "This could be `std::chrono::milliseconds(250)` or just `milliseconds(250)` with a using declaration somewhere.",
      "parentUuid": "3ccbc33c_f298dcb7",
      "range": {
        "startLine": 142,
        "startChar": 50,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe1bd85e_3195886b",
        "filename": "platform/base/network_loop.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "for/i unnecessary, just use `while (continue_network_procesing_)`",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05942d64_eb632225",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "What service?  \"for NetworkRunnerImpl\"?",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 19,
        "endChar": 54
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "059bf65d_00c9e0c2",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "What is the lifetime relationship between this object and the UdpSocket* passed through the API takes? How will the caller know it\u0027s safe to delete a UdpSocket?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81bdc8f2_673beda4",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "nit: unnecessary explanation IMO.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb6a1437_c3d59591",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Can this be passed in the constructor?\nCan NetworkLoop just call NetworkRunner::GetSingleton() in its ctor?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a593e59_99e87192",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Similar comment about lifetime of the task_runner pointer.  Is it assumed to be a long lived singleton?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "884ab76f_94f62bf7",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "This method sounds like it should be \"WaitUntilWritable\", since it\u0027s not actually writing anything.\n\nIf the callback passed the UdpSocket* that became writable, the caller could pass a more generic function.  Depends on how callers use this.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce5ee18_0c90d6f5",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "For now, I have included support for Write callbacks. They were already written + tested before we decided against including them in the NetworkRunner layer (based on our meeting mid last week), so I wanted to check everyone\u0027s thoughts before pulling this out.\n\nIn the current setup, these methods are written here but not exposed in NetworkRunner, so callers cannot access them. For this reason I see it as reasonable to not delete the existing code. Especially since we\u0027ve already decided it needs to be removed and hasn\u0027t been yet\n\nThoughts @pthatcher @mfoltz",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7461ea15_44fc4cd0",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "I am OK leaving them in for now.   However if we finish porting the layers above, and:\n\n1. There\u0027s no implementation that actually reports non-writability,\n2. they remain internal and unused,\n\nWe should go back and remove them.",
      "parentUuid": "1ce5ee18_0c90d6f5",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 46,
        "endChar": 42
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d984e3ca_73b4d8c1",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "ISTM these map values should be combined into a single struct with a UDPSocket* and the two callbacks.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f138c5c_b34dde4c",
        "filename": "platform/base/network_loop.h",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "is_running_ ?",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9dc166b_3ff1062b",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "I\u0027d prefer a lambda over std::bind everywhere.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd49c689_f3734532",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:45:58Z",
      "side": 1,
      "message": "Updating to PostPackagedTaskWithDelay, and same for above PostPackagedTask. Didn\u0027t think it was worth pushing another iteration just for this change, so it will show up in the next iteration",
      "range": {
        "startLine": 43,
        "startChar": 16,
        "endLine": 43,
        "endChar": 33
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3da526b_4b01e0ad",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "IMO there should either be a join of both threads here to preserve the blocking behavior/implication or we should rename this.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c23e231_1594c024",
        "filename": "platform/base/network_runner.cc",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "We explicitly added this warning to prevent this; it\u0027s not just the compiler being picky.  I believe the OSP solution has been to make these a raw pointer and just turn make_unique into new, letting it leak on exit.  Chromium has base::LazyInstance::Leaky [1] for this but I don\u0027t think we plan to import it (it goes a step further and only creates one on first access).\n\n[1] https://cs.chromium.org/chromium/src/base/lazy_instance.h?type\u003dcs\u0026q\u003dlazyinstance\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d132",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97e7933b_942bab1e",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Filename should be network_runner_impl.h",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47ee63fe_80b28cda",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "IMO we wouldn\u0027t need a fake NetworkRunner (positive, also IMO) if the following things changed:\n 1. This still allowed for the clock function to be injected.\n 2. TaskRunnerImpl moved into this impl directly instead of injecting a unique_ptr\u003cTaskRunner\u003e.\n\nAlthough 1 seems reasonable by itself, it\u0027s probably useless without 2 or something similar.\n\nAt this point, we don\u0027t need a TaskRunnerImpl by itself at all anymore, because NetworkRunnerImpl will always be what\u0027s substituted for a TaskRunner.  Then, copying its implementation here would give us the ability to run tasks on the same thread that calls NetworkRunnerImpl (i.e. can sequence with unit test code), which also enables RunUntilIdleForTesting.\n\nThis probably isn\u0027t going to be a popular opinion but I want to see what others\u0027 opinions are nonetheless.  IMO allowing an arbitrary TaskRunner to be injected won\u0027t necessarily allow code re-use here because for e.g. Chromium, we still need an entirely different NetworkRunner (and starting a new thread to run SequencedTaskRunner isn\u0027t what we want/possible anyway).  Also, the current singleton impl means we\u0027re locked into TaskRunnerImpl that way as well anyway.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e817ab08_6bec2082",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1330244
      },
      "writtenOn": "2019-06-12T16:43:12Z",
      "side": 1,
      "message": "Really wanted this to be protected, but needed it public to support NetworkRunner::GetSingleton(). If someone has a clever way to make this non-public, I\u0027d appreciate it :)",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eccd6829_fcce284d",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1336186
      },
      "writtenOn": "2019-06-14T21:48:13Z",
      "side": 1,
      "message": "I think you can get it to work with CRTP https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\nNetworkRunnerImpl : public NetworkRunner\u003cNetworkRunnerImpl\u003e\nThis way code in NetworkRunner can call into NetworkRunnerImpl as a template, i.e. it can call GetSingleton method which will be implemented in NetworkRunnerImpl.\nI\u0027m sure if you search for CRTP singleton, something will come up",
      "parentUuid": "e817ab08_6bec2082",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b4deeae_87f2fe71",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Why not move GetInstance() to this class if this class is actually providing the implementation?",
      "parentUuid": "eccd6829_fcce284d",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b4d7b06_a2ef0579",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "This could be private by declaring both NetworkRunner and std::make_unique (or using std::unique_ptr(new ...) work-around) as friends.",
      "parentUuid": "7b4deeae_87f2fe71",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4290b918_ef65614c",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "Should be private",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "929e8df1_90a5ba25",
        "filename": "platform/base/network_runner.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2019-06-14T22:08:05Z",
      "side": 1,
      "message": "instance\u0027s",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "392b87a9_6a47fd3d",
        "filename": "platform/posix/event_waiter.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1215804
      },
      "writtenOn": "2019-06-17T23:59:32Z",
      "side": 1,
      "message": "rv \u003d\u003d 0 is a timeout, not an IO failure.  That is also a bug in the current WaitForEvents; at one point it blocked forever, and in that case the error code is correct.",
      "revId": "31d433ad735f1a074a0863a25251b390f1ab06c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}