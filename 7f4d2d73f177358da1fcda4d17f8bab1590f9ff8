{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "81ed2f61_8e4262dc",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-10-12T22:33:20Z",
      "side": 1,
      "message": "This looks very similar to: https://source.chromium.org/chromium/chromium/src/+/master:components/mirroring/service/message_dispatcher.h\n\nSessionMessager::SetHandler\n  --\u003e MessageDispatcher::Subscribe\n\nSessionMessager::SendMessage\n  --\u003e MessageDispatcher::SendOutboundMessage (one-off)\n  --\u003e MessageDispatcher::RequestReply (expecting a response, or timeout)\n\nAnd MessageDispatcher provides the sequence numbers, and confirms reply messages, such as an ANSWER, have matching sequence numbers to the original request.\n\nSo, I\u0027m wondering if it\u0027d be better to port MessageDispatcher over into this code base (to communicate via MessagePort, instead of the mojo pipes)?",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 21
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bba688b6_de24f679",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-13T19:55:51Z",
      "side": 1,
      "message": "I think it will be a rewrite to make it work more like the MessageDispatcher, since we will need a SendReply method as well and a complete unit test suite for it.\n\nI think we should do this as part of adding more message types, right now it\u0027s overkill:\n\nhttps://b.corp.google.com/issues/170756458",
      "parentUuid": "81ed2f61_8e4262dc",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 21
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "353d7bb0_dce60d76",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-10-16T21:57:36Z",
      "side": 1,
      "message": "Okay, as long as embedders don\u0027t depend directly on an API that will change soon. ðŸ˜Š\n\nMy point, though, was not to rewrite anything. It was to just copy MessageDispather into this code base, and replace its inbound/outbound mojo data pipes w/ the MessagePort OnMessage/PostMessage. Then, we could be done with it all now?\n\n(FWIW, there\u0027s likely to be a lot of code in Chromium we are essentially going to want to move into libcast rather than rewrite again.)",
      "parentUuid": "bba688b6_de24f679",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 21
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adec3be5_1b0a2d6c",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-19T20:59:28Z",
      "side": 1,
      "message": "Well, unfortunately no. MessageDispatcher is tightly coupled to the Sender concerns, where this is a more general message handler.\n\nI can definitely port the MessageDispatcher, but it\u0027s completely useless for the receiver so will need some rewriting.\n\nI would like to land this and go from there.",
      "parentUuid": "353d7bb0_dce60d76",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 21
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c17193_17d7eda4",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-10-12T22:33:20Z",
      "side": 1,
      "message": "Do we need this struct? Seems we could just pass the message_namespace and Json::Value in arguments to MessageCallback and SendMessage(), and let this class fill-in the rest of the details before I/O through the message_port_.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 16
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c6c61c2_2ace5c6e",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-13T19:55:51Z",
      "side": 1,
      "message": "I think we should keep this for now, the sender ID is necessary unless the session_messager also knows where all messages are coming from and going.",
      "parentUuid": "c6c17193_17d7eda4",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 16
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff37b7d0_213e2c75",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2020-10-16T21:57:36Z",
      "side": 1,
      "message": "I\u0027m a little confused. It seems we have multiple sender_id\u0027s being plumbed through here:\n\n1. The sender_id passed to the ctor.\n\n2. The sender_id passed to SendMessage().\n\nI think #1 is meant to be the local peer\u0027s ID, while #2 is meant to be the remote peer\u0027s ID (the destination for outbound messages). Since these are two different things, can we adjust the naming to make that clearer (e.g., use source_id and destination_id, like in CastMessage)?\n\nAlso, it seems like we have several different names in our code base for this. I\u0027ve seen: transport_id, peer_id, local_id, remote_id, source_id, destination_id, and sender_id. IMHO, we should work towards consistency: Either local_id and remote_id, or source_id and destination_id. The latter are probably better, since two local peers can theoretically send messages to each other (though, I\u0027ve never seen this actually used anywhere).",
      "parentUuid": "6c6c61c2_2ace5c6e",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 16
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70da7031_96197bee",
        "filename": "cast/streaming/session_messager.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2020-10-19T20:59:28Z",
      "side": 1,
      "message": "source and destination sound right to me.",
      "parentUuid": "ff37b7d0_213e2c75",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 16
      },
      "revId": "7f4d2d73f177358da1fcda4d17f8bab1590f9ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}