{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "19e62ac8_117044c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-17T20:38:38Z",
      "side": 1,
      "message": "we talked a while ago about keeping Abseil out of the public APIs. Figured I\u0027d get in one more breaking change before letting things be stable for a little bit ðŸ˜Š.",
      "revId": "c7265a9cd670a406b03b7d956bb09f22d007eac4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c1c2dc2_1adf8a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-10-18T01:30:05Z",
      "side": 1,
      "message": "Passing around data by pointer and length is generally discouraged; this may be in the style guide, but generally you can imagine there are more things that can go wrong versus using a more strongly typed object that can e.g. assert that accesses are in-bounds.\n\nSo definitely in favor of replacing absl::span here, but I don\u0027t think we can quite migrate to std::span as we are still setting a language level of C++14.\n\nI have a WIP patch for util::span, a drop-in std::span replacement that can be upgraded to std::span in the future but didn\u0027t quite finish wrapping it up. Do you mind taking a look and seeing if it would make sense to replace absl::span with util::span here?",
      "revId": "c7265a9cd670a406b03b7d956bb09f22d007eac4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a21d946_b2471314",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2022-10-18T01:37:16Z",
      "side": 1,
      "message": "I don\u0027t think util::span would be appropriate here since its a public API and we don\u0027t want embedders to include files from util. Embedders have to create an EncodedFrame to pass into the Sender class. Based on the visibility rules we have that would be a violation.\n\nI know you didn\u0027t want Abseil exposed in the public API so this is a solution for that. Since std::span is in C++20 I\u0027m sure it will be a while before we can use it, plus I\u0027m sure it will be banned in Chrome or something.\n\nIf you have a better suggestion I\u0027m all ears, I also don\u0027t really mind if embedders have to include Abseil since they depend on it implicitly anyway. LMK what you think.",
      "parentUuid": "1c1c2dc2_1adf8a94",
      "revId": "c7265a9cd670a406b03b7d956bb09f22d007eac4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c76570a7_af7413f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2022-10-18T01:45:42Z",
      "side": 1,
      "message": "Yeah, good point.  I think it would have to go into platform/base.  I can\u0027t seem to find the WIP patch but let me look one more place.\n\n\u003e you didn\u0027t want Abseil exposed in the public API so this is a solution for that\n\nThis is to make life easier for existing and future Android consumption of our code, specifically AOSP.  Since absl doesn\u0027t guarantee ABI compatibility they end up having to distribute N copies of absl for N libraries that use it.\n\n\u003e C++20 I\u0027m sure it will be a while before we can use it, plus I\u0027m sure it will be banned in Chrome or something.\n\nI think the idea is to replace base::span in Chromium with std::span but I haven\u0027t checked the list archives to be sure.",
      "parentUuid": "5a21d946_b2471314",
      "revId": "c7265a9cd670a406b03b7d956bb09f22d007eac4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}