{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "42c8b968_f6196af1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2024-08-14T09:10:50Z",
      "side": 1,
      "message": "Hi, mark is OoO. Can any one of you help review this? thanks.",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9c930e_5f4b8e97",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 1893,
      "author": {
        "id": 1410933
      },
      "writtenOn": "2024-08-15T01:07:12Z",
      "side": 1,
      "message": "I think the root cause of the memory access issue is not here, but in line 1765 `return \u0026data_[0] + position_;`.\n\nWhen `CborEncodeBuffer` is initialized, `data_` is empty, and it should be valid.",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21ad640b_5e68e551",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 1893,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2024-08-15T01:22:39Z",
      "side": 1,
      "message": "Thanks, I will change the position() method.",
      "parentUuid": "9a9c930e_5f4b8e97",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2c5a17b_60356bc1",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 1893,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2024-08-15T08:11:07Z",
      "side": 1,
      "message": "PTAL at the changes.",
      "parentUuid": "21ad640b_5e68e551",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22804f72_7ac48348",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 1904,
      "author": {
        "id": 1410933
      },
      "writtenOn": "2024-08-15T01:07:12Z",
      "side": 1,
      "message": "IIUC, `position_` points to the next write location in `data_`. Then we shouldn\u0027t need to update its value if we\u0027re not writing to `data_`.",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "667df09d_4cc7f276",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 1904,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2024-08-15T01:22:39Z",
      "side": 1,
      "message": "If we use resize to reduce the size of `data_`, it means the valid values in `data_` also decreases. If we don\u0027t update `position_`, we will access an invalid memory location when calling `Position()` and get wroing value when calling `AvailableLength()`.",
      "parentUuid": "22804f72_7ac48348",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a1c0cb_58e991b1",
        "filename": "tools/cddl/codegen.cc",
        "patchSetId": 1
      },
      "lineNbr": 1904,
      "author": {
        "id": 1363709
      },
      "writtenOn": "2024-08-15T08:11:07Z",
      "side": 1,
      "message": "Suppose `data_ \u003d {1, 2, 3, 4, 0, 0}`, then `data_.size()` is 6 and `position_` is 4. When we call `ResizeBy(-3)`, `data_` becomes `{1, 2, 3}`. We need to updata `position_` to 3 to make `AvailableLength()` reutrn 0.\n\nBesides, if we don\u0027t update `position_`, `data_` becomes `{1, 2, 3, 0, 0, 0}` when we call `ResizeBy(3)` and we will continue writing data from `data_[4]`. There will be an extra 0 in the middle.",
      "parentUuid": "667df09d_4cc7f276",
      "revId": "43711d2a9f7d1756b02eca5b441433d9e46f0b0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}