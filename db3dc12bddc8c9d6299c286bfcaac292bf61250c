{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1219535b_43a2b935",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-09-13T17:21:00Z",
      "side": 1,
      "message": "Nice fix.  However there are a couple of higher level issues here that seem worth looking into.\n\n1. I wonder if we can simplify GetInFlightMediaDuration() by tracking the the timestamp of the most recently checkpointed frame, and subtracting it from the next frame timestamp.   No need to look up slots?\n\n2. The computation of GetMaxInFlightMediaDuration() assumes it takes 1/2 the playout delay for capture and encoding.   This isn\u0027t accurate, I expect this to take less than 50 ms in most cases.  A better way to estimate this value would be to keep a running average of the capture+encode time when the frame is queued, then subtract it from the playout delay.",
      "revId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5be59ef_2b5ac168",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-09-13T20:03:06Z",
      "side": 1,
      "message": "I\u0027ll do some more investigation. This patch is a good fix I think, but we could definitely have more improvements in this area.",
      "parentUuid": "1219535b_43a2b935",
      "revId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b05b7c4c_6f8b1fad",
        "filename": "cast/streaming/sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2023-09-13T17:21:00Z",
      "side": 1,
      "message": "Was the previous code cancelling frame IDs it shouldn\u0027t?",
      "revId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6ede456_b1512111",
        "filename": "cast/streaming/sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 1323871
      },
      "writtenOn": "2023-09-13T20:03:06Z",
      "side": 1,
      "message": "Yes and no. The repro case I have in the patch description is a good example.\n\nEvery frame should get cancelled at least once--whenever a frame plays out it is cancelled.\n\nThis fix basically just makes it so that we don\u0027t have any side effects/call code that attempts to enqueue frames while we are processing receiver reports--in the middle of processing a report we may have invalid state, e.g. the temporary checkpoint frame ID + 1 may be already cancelled.",
      "parentUuid": "b05b7c4c_6f8b1fad",
      "revId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "db3dc12bddc8c9d6299c286bfcaac292bf61250c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}